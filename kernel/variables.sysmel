// Value assignment
metaMethod selectors: #(assignValue:) rules: {
when: $$Pharo {matchesMessage: message inEnvironment: environment at: position
    | receiverType |
    receiverType := message receiver evaluateTypeInEnvironment: environment.
  
	receiverType ifNil: [^ false ].
    ^ receiverType isReferenceType
	
} doOn: {
    // Compile time evaluation
    evaluation: $$Pharo {
        node: node environment: environment
            self halt.
    }.

    // Semantic analysis
    semanticAnalysis: $$Pharo {
        node: node environment: environment position: aSourcePosition
			| reference referenceType value valueType |
			reference := node receiver semanticAnalysisInEnvironment: environment.
			value := node arguments first semanticAnalysisInEnvironment: environment.
			
			referenceType  := reference evaluateTypeInEnvironment: environment.
			valueType := value evaluateTypeInEnvironment: environment.
			self assert: referenceType isReferenceType.
			
			referenceType referenced isConstantType ifTrue: [
				self error: 'Cannot assign to constant.' at: aSourcePosition.
			].
		
			valueType coercedImplicitlyNode: value into: referenceType referenced at: node.
			^ node copy
                metaMethod: self;
                receiver: reference;
                arguments: {value};
				coercionType: referenceType referenced;
                valueType: referenceType;
                yourself
	}.

    // Code generation
    codeGeneration: $$Pharo {
        node: messageNode builder: builder
			| value coercionType valueNode valueType reference instruction |
			valueNode := messageNode arguments first.
			valueType := valueNode type.
			
			coercionType := messageNode coercionType.
			value := valueType ssaCoerceImplicitly: (valueNode generateSSACodeWith: builder) to: coercionType with: builder at: messageNode.

			reference := messageNode receiver generateSSACodeWith: builder.
			instruction := builder store: value in: reference.
			instruction volatile: coercionType isVolatileType.
			
			^ reference
    }.
}

}.

