namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

#**
 * I am a CPU only implementation for a buffer.
 *#
class SoftBuffer superclass: Buffer; definition: {
    protected field description type: BufferDescription.
    protected field memory type: Void pointer.

    method initializeWithDescription: (theDescription: BufferDescription const ref) memory: (theMemory: Void pointer) ::=> Void := {
        description := theDescription.
        memory := theMemory.
    }.

    override method finalize => Void := {
        Stdn free(memory)
    }.

    const override method description => BufferDescription
        := description.

    const inline method memoryStartPointer => UInt8 pointer
        := memory reinterpretCastTo: UInt8 pointer.

    const override method stride => UIntPointer
        := description stride.

    const override method size => UIntPointer
        := description size.

    override method map: (access: MappingAccessMask) ::=> Void pointer
        := memory.

    override method unmap ::=> Void
        := void.

    override method uploadAt: (offset: UIntPointer) size: (size: UIntPointer) data: (data: Void const pointer) ::=> Void := {
        let uploadEnd := offset + size min: description size.
        uploadEnd < offset ifTrue: {return: void}.

        let clippedSize := uploadEnd - offset.
        Stdn memcpy(self memoryStartPointer + offset, data, clippedSize).
    }.

    override method readAt: (offset: UIntPointer) size: (size: UIntPointer) into: (buffer: Void pointer) ::=> Void := {
        let readEnd := offset + size min: description size.
        readEnd < offset ifTrue: {return: void}.

        let clippedSize := readEnd - offset.
        Stdn memcpy(buffer, self memoryStartPointer + offset, clippedSize).
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
