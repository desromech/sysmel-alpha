namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Stdn Math Geometry.

class CommandListBuilderSurface.

#**
 * I am a canvas that works by recording different commands.
 *#
class CommandListBuilderCanvas superclass: AbstractConcreteCanvas; definition: {
    protected field targetSurface type: CommandListBuilderSurface pointer.

    method initializeWithSurface: (theTargetSurface: CommandListBuilderSurface pointer) ::=> Void := {
        blendingMode := BlendingMode AlphaOver.
        targetSurface := theTargetSurface.
        currentClipRectangle := RectangleF32 fullSpace.
        transform setIdentity.
    }.

    override method finalize => Void := {
        targetSurface ifNotNil: {
            targetSurface _ endDrawing
        }
    }.

    override method clear ::=> Void := {
        Stdn stdout << "TODO: clear"; nl
    }.


    override method fillTriangle: (p1: Float32x2) color: (c1: Float32x4) tc: (tc1: Float32x2)
        p2: (p2: Float32x2) color: (c2: Float32x4) tc: (tc2: Float32x2)
        p3: (p3: Float32x2) color: (c3: Float32x4) tc: (tc3: Float32x2) ::=> Void := {
        Stdn stdout << "TODO: fillTriangle"; nl.
    }.

    override method fillRectangle: (rectangle: RectangleF32) ::=> Void := {
        Stdn stdout << "TODO: fillRectangle"; nl.
    }.

    ## Draw the rectangle lines.
    override method drawSegmentStart: (startPoint: Float32x2) end: (endPoint: Float32x2) ::=> Void := {
        Stdn stdout << "TODO: drawSegment"; nl.
    }.

    override method copyTexture: (textureView: TextureView sharedPointer const ref) at: (targetPosition: Float32x2) ::=> Void := {
        Stdn stdout << "TODO: copyTexture"; nl.
    }.

    override method blendTexture: (textureView: TextureView sharedPointer const ref) at: (targetPosition: Float32x2) ::=> Void := {
        Stdn stdout << "TODO: blendTexture"; nl.
    }.

    override method drawGlyph: (glyph: Glyph ref) at: (aPosition: Float32x2) ::=> Void := {
        Stdn stdout << "TODO: drawGlyph"; nl.
    }.

    inline method doSetClipRectangle: (aRectangle: RectangleF32) ::=> Void := {
        Stdn stdout << "TODO: doSetClipRectangle"; nl.
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
