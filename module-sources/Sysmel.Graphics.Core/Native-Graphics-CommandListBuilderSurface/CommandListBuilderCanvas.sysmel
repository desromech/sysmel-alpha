namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Stdn Math Geometry.

class CommandListBuilderSurface.

#**
 * I am a canvas that works by recording different commands.
 *#
class CommandListBuilderCanvas superclass: AbstractConcreteCanvas; definition: {
    protected field targetSurface type: CommandListBuilderSurface pointer.

    method initializeWithSurface: (theTargetSurface: CommandListBuilderSurface pointer) ::=> Void := {
        targetSurface := theTargetSurface.
        self resetCanvasState.
    }.

    override method finalize => Void := {
        targetSurface ifNotNil: {
            targetSurface _ endDrawing
        }
    }.

    override method clear ::=> Void := {
        Stdn stdout << "TODO: clear"; nl
    }.

    override method fillTriangle: (p1: Float32x2) color: (c1: Float32x4) tc: (tc1: Float32x2)
        p2: (p2: Float32x2) color: (c2: Float32x4) tc: (tc2: Float32x2)
        p3: (p3: Float32x2) color: (c3: Float32x4) tc: (tc3: Float32x2) ::=> Void := {


        ## TODO: Validate drawing and paint state.
        let builder ref := targetSurface _ meshBuilder.

        builder
            beginTriangles;
            addVertex: (Mesh2DVertex()
                position: p1;
                color: c1;
                texcoord: tc1;
                yourself);
            addVertex: (Mesh2DVertex()
                position: p2;
                color: c2;
                texcoord: tc2;
                yourself);
            addVertex: (Mesh2DVertex()
                position: p3;
                color: c3;
                texcoord: tc3;
                yourself);
            addTriangle: UInt32x3(0, 1, 2).
    }.

    override method drawSegmentStart: (startPoint: Float32x2) end: (endPoint: Float32x2) ::=> Void := {
        Stdn stdout << "TODO: drawSegment"; nl.
    }.

    override method doSetClipRectangle: (aRectangle: RectangleF32) ::=> Void := {
        ## Stdn stdout << "TODO: doSetClipRectangle"; nl.
    }.

    override method drawGlyph: (glyph: Glyph ref) at: (aPosition: Float32x2) ::=> Void := {
    }.

}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
