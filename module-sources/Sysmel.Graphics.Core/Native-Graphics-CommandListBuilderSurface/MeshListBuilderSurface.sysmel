namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Stdn Graphics CanvasMesh2D.

#**
 * I am a 2D rendering surface that records all of the canvas rendering command for a deferred construction of command list.
 *#
class MeshListBuilderSurface superclass: Surface; definition: {
    public field extent type: UInt32x2.
    public field meshBuilder type: MeshBuilder.
    ## For converting the font
    public field renderingDevice type: RenderingDevicePtr.

    override method beginDrawingWithCanvas => Canvas uniquePointer := {
        self beginDrawing ifFalse: {
            return: Canvas uniquePointer nil
        }.

        let result := MeshListBuilderCanvas nativeNew _
            initializeWithSurface: self address;
            address.

        Canvas uniquePointer for: result.
    }.

    virtual method beginDrawing => Boolean8 := {
        meshBuilder clear.

        true
    }.

    virtual method endDrawing => Void := {
        meshBuilder finishLastSubmesh.

        Stdn stdout << self address << " MeshListBuilderSurface endDrawing"; nl.
        Stdn stdout << "mesh " << meshBuilder vertices size << " " << meshBuilder indices size << " " << meshBuilder submeshes size; nl.

    }.
}.

compileTime constant MeshListBuilderSurfaceRef := MeshListBuilderSurface sharedPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
