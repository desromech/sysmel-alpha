namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Stdn Math Geometry.
useNamespace: Stdn Graphics CanvasMesh2D.

class MeshListBuilderSurface.

#**
 * I am a canvas that works by recording different commands.
 *#
class MeshListBuilderCanvas superclass: AbstractConcreteCanvas; definition: {
    protected field targetSurface type: MeshListBuilderSurface pointer.

    method initializeWithSurface: (theTargetSurface: MeshListBuilderSurface pointer) ::=> Void := {
        targetSurface := theTargetSurface.
        self resetCanvasState.
    }.

    method beginSubmesh: (primitiveTopology: PrimitiveTopology) ::=> MeshBuilder ref := {
        let builder ref := targetSurface _ meshBuilder.
        builder beginSubmesh: primitiveTopology drawingState: drawingState
            texture: paintState texture textureView: paintState textureView.
        builder
    }.

    method beginTriangles => MeshBuilder ref
        := self beginSubmesh: PrimitiveTopology Triangles.
    method beginLines => MeshBuilder ref
        := self beginSubmesh: PrimitiveTopology Lines.

    override method finalize => Void := {
        targetSurface ifNotNil: {
            targetSurface _ endDrawing
        }
    }.

    override method clear ::=> Void := {
        let extent := targetSurface _ extent castTo: Float32x2.
        self
            fillTransformedQuad: Float32x2(0, 0) color: Float32x4 ones tc: Float32x2(0, 0)
                p2: Float32x2(extent x, 0) color: Float32x4 ones tc: Float32x2(1, 0)
                p3: Float32x2(extent x, extent y) color: Float32x4 ones tc: Float32x2(1, 1)
                p4: Float32x2(0, extent y) color: Float32x4 ones tc: Float32x2(0, 1).
    }.

    inline method fillTransformedQuad: (p1: Float32x2) color: (c1: Float32x4) tc: (tc1: Float32x2)
        p2: (p2: Float32x2) color: (c2: Float32x4) tc: (tc2: Float32x2)
        p3: (p3: Float32x2) color: (c3: Float32x4) tc: (tc3: Float32x2)
        p4: (p4: Float32x2) color: (c4: Float32x4) tc: (tc4: Float32x2) ::=> Void := {

        self beginTriangles
            addVertex: (MeshVertex()
                position: p1;
                color: c1;
                texcoord: tc1;
                yourself);
            addVertex: (MeshVertex()
                position: p2;
                color: c2;
                texcoord: tc2;
                yourself);
            addVertex: (MeshVertex()
                position: p3;
                color: c3;
                texcoord: tc3;
                yourself);
            addVertex: (MeshVertex()
                position: p4;
                color: c4;
                texcoord: tc4;
                yourself);
            addTriangle: UInt32x3(0, 1, 2);
            addTriangle: UInt32x3(2, 3, 0).
    }.

    inline method fillTransformedTriangle: (p1: Float32x2) color: (c1: Float32x4) tc: (tc1: Float32x2)
        p2: (p2: Float32x2) color: (c2: Float32x4) tc: (tc2: Float32x2)
        p3: (p3: Float32x2) color: (c3: Float32x4) tc: (tc3: Float32x2) ::=> Void := {

        self beginTriangles
            addVertex: (MeshVertex()
                position: p1;
                color: c1;
                texcoord: tc1;
                yourself);
            addVertex: (MeshVertex()
                position: p2;
                color: c2;
                texcoord: tc2;
                yourself);
            addVertex: (MeshVertex()
                position: p3;
                color: c3;
                texcoord: tc3;
                yourself);
            addTriangle: UInt32x3(0, 1, 2).
    }.

    override method fillTriangle: (p1: Float32x2) color: (c1: Float32x4) tc: (tc1: Float32x2)
        p2: (p2: Float32x2) color: (c2: Float32x4) tc: (tc2: Float32x2)
        p3: (p3: Float32x2) color: (c3: Float32x4) tc: (tc3: Float32x2) ::=> Void := {

        let tp1 := transform transformPoint: p1.
        let tp2 := transform transformPoint: p2.
        let tp3 := transform transformPoint: p3.

        self fillTransformedTriangle: tp1 color: c1 tc: tc2
            p2: tp2 color: c2 tc: tc2
            p3: tp3 color: c3 tc: tc3
    }.

    override method fillRectangle: (rectangle: RectangleF32) ::=> Void := {
        self
            fillTransformedQuad: (transform transformPoint: rectangle bottomLeft) color: Float32x4 ones tc: Float32x2(0, 0)
                p2: (transform transformPoint: rectangle bottomRight) color: Float32x4 ones tc: Float32x2(1, 0)
                p3: (transform transformPoint: rectangle topRight) color: Float32x4 ones tc: Float32x2(1, 1)
                p4: (transform transformPoint: rectangle topLeft) color: Float32x4 ones tc: Float32x2(0, 1).
    }.

    override method drawSegmentStart: (startPoint: Float32x2) end: (endPoint: Float32x2) ::=> Void := {
        Stdn stdout << "TODO: drawSegment"; nl.
    }.

    override method doSetClipRectangle: (aRectangle: RectangleF32) ::=> Void := {
        ## Stdn stdout << "TODO: doSetClipRectangle"; nl.
    }.

    override method drawGlyph: (glyph: Glyph ref) at: (aPosition: Float32x2) ::=> Void := {
    }.

}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
