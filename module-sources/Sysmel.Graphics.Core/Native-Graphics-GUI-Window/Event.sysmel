namespace Stdn definition: {
namespace Graphics definition: {
namespace GUI definition: {

class EventHandler.

#**
 * I represent a basic event for a window.
 * Different GUI toolkit should convert my instances into something more suitable for their specific behavior.
 *#
class Event definition: {
    virtual method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := void.
}.

#**
 * I am a ticking time notification. I am an event that is broadcasted into all
 * of the windows to give them an opportunity to redraw themselves.
 *#
class TickEvent superclass: Event; definition: {
    public field ticks type: Stdn Chrono Time.
    public field delta type: Stdn Chrono Time.
    public field deterministicDelta type: Stdn Chrono Time.
    public field deterministicRemainingDelta type: Stdn Chrono Time.
    public field deterministicFrameCount type: UInt32.

    inline method seconds => Float64
        := Stdn Chrono ticksToFloatSeconds(ticks).

    inline method deltaSeconds => Float64
        := Stdn Chrono ticksToFloatSeconds(delta).

    inline method deterministicDeltaSeconds => Float64
        := Stdn Chrono ticksToFloatSeconds(deterministicDelta).

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onTickEvent: self.
}.

#**
 * I am a keyboard event.
 *#
class KeyboardEvent superclass: Event; definition: {
    public field symbol type: KeySymbol.
    public field modifiers type: KeyModifiers.
    public field isRepeat type: Boolean8.

}.

#**
 * I am a key pressed event.
 *#
class KeyPressedEvent superclass: KeyboardEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onKeyPressedEvent: self.
}.

#**
 * I am a key released event.
 *#
class KeyReleasedEvent superclass: KeyboardEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onKeyReleasedEvent: self.
}.

#**
 * I am a text input event
 *#
class TextInputEvent superclass: Event; definition: {

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onTextInputEvent: self.
}.

#**
 * I am a mouse move event.
 *#
class MouseEvent superclass: Event; definition: {
    public field mouseId type: UInt32.
    public field position type: Int32x2.
    public field modifiers type: KeyModifiers.
}.

#**
 * I am a mouse move event.
 *#
class MouseMoveEvent superclass: MouseEvent; definition: {
    public field buttonState type: MouseButtonMask.
    public field delta type: Int32x2.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onMouseMoveEvent: self.
}.

#**
 * I am a mouse button event.
 *#
class MouseButtonEvent superclass: MouseEvent; definition: {
    public field button type: MouseButton.
    public field clickCount type: UInt8.
}.

#**
 * I am a mouse wheel event.
 *#
class MouseWheelEvent superclass: MouseEvent; definition: {
    public field scrollDelta type: Int32x2.
    public field isFlipped type: Boolean8.
}.

#**
 * I am a mouse button pressed event.
 *#
class MouseButtonPressedEvent superclass: MouseButtonEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onMouseButtonPressedEvent: self.
}.

#**
 * I am a mouse button down event.
 *#
class MouseButtonReleasedEvent superclass: MouseButtonEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onMouseButtonReleasedEvent: self.
}.

#**
 * I am an expose event. I am sent when a Window needs to be redraw.
 *#
class ExposeEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onExposeEvent: self.

}.

#**
 * I am a window close requestevent. I am sent when the close button of a window is hit.
 *#
class WindowCloseRequestEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowCloseRequestEvent: self.
}.

}. ## End of namespace GUI
}. ## End of namespace Graphics
}. ## End of namespace Stdn
