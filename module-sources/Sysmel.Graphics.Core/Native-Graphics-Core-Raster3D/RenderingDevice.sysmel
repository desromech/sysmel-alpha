namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

#**
 * I am an abstract rendering driver. I am typically used as a factory for generating
 *#
RenderingDevice extend: {
    abstract method createShaderSignatureBuilder ::=> ShaderSignatureBuilderPtr.

    abstract method createBuffer: (description: BufferDescription const ref) initialData: (initialData: Void const pointer) ::=> BufferPtr.
    abstract method createTexture: (description: TextureDescription const ref) ::=> TexturePtr.
    abstract method createSampler: (description: SamplerDescription const ref) ::=> SamplerPtr.
    abstract method createComputePipelineState: (description: ComputePipelineStateDescription const ref) ::=> PipelineStatePtr.
    abstract method createGraphicsPipelineState: (description: GraphicsPipelineStateDescription const ref) ::=> PipelineStatePtr.

    abstract method createVertexLayout => VertexLayoutPtr.
    abstract method createVertexBindingFor: (layout: VertexLayout sharedPointer const ref) ::=> VertexBindingPtr.

    abstract method createCommandAllocatorOfType: (type: CommandListType) for: (queue: CommandQueuePtr const ref) ::=> CommandListAllocatorPtr.
    abstract method createCommandListOfType: (type: CommandListType) for: (allocator: CommandListAllocatorPtr const ref) initialPipelineState: (initialPipeline: PipelineStatePtr const ref) ::=> CommandListPtr.
    abstract method getDefaultCommandQueue => CommandQueuePtr const ref.

    abstract method createShaderLibraryFromModule: (shaderModule: GPU ShaderModuleInfo const ref) ::=> ShaderLibraryHandlePtr.
    abstract method createShaderStageFromEntryPoint: (entryPointInfo: GPU ShaderEntryPointInfo const ref) ::=> ShaderStageHandlePtr.

    abstract method createFramebuffer: (extent: UInt32x2) colorViews: (colorViews: TextureViewPtr const arraySlice) depthStencilView: (depthStencilView: TextureViewPtr const ref) ::=> FramebufferPtr.
    abstract method createRenderPass: (colorAttachment: RenderPassColorAttachmentDescription const arraySlice) depthStencilAttachment: (depthAttachment: RenderPassDepthStencilAttachmentDescription const pointer) ::=> RenderPassPtr.

    abstract method createFence => FencePtr.
    abstract method createSwapChain: (swapChainCreationInfo: SwapChainCreationInfo const ref) for: (renderingQueue: CommandQueuePtr const ref) ::=> SwapChainPtr.
    abstract method waitForIdle => Void.

    virtual method createCommandListOfType: (type: CommandListType) for: (allocator: CommandListAllocatorPtr const ref) ::=> CommandListPtr
        := self createCommandListOfType: type for: allocator initialPipelineState: PipelineStatePtr nil.

    abstract method hasTopLeftNdcOrigin => Boolean8.
    abstract method hasBottomLeftTextureCoordinates => Boolean8.

    virtual method shouldInvertProjectionY => Boolean8
        := self hasTopLeftNdcOrigin ~= self hasBottomLeftTextureCoordinates.

    virtual method nonCoherentAtomSize => UIntPointer
        := 256.
    virtual method minMemoryMapAlignment => UIntPointer
        := 256.
    virtual method minTexelBufferOffsetAlignment => UIntPointer
        := 256.
    virtual method minUniformBufferOffsetAlignment => UIntPointer
        := 256.
    virtual method minStorageBufferOffsetAlignment => UIntPointer
        := 256.

    virtual method createPipelineStateCache => PipelineStateCachePtr := {
        let result := GenericPipelineStateCache sharedNew.
        result _ device: self asWeakPointer.
        result upCastFor: PipelineStateCache
    }.

    virtual method createShaderCache => ShaderCachePtr := {
        let result := GenericShaderCache sharedNew.
        result _ device: self asWeakPointer.
        result upCastFor: ShaderCache
    }.

    virtual method createFontCache => RenderingDeviceFontCachePtr := {
        let result := TextureAtlasRenderingDeviceFontCache sharedNew.
        result _ initializeWithDevice: self asWeakPointer.
        result upCastFor: RenderingDeviceFontCache
    }.

    abstract method getDefaultPipelineStateCache => PipelineStateCachePtr const ref.
    abstract method getDefaultShaderCache => ShaderCachePtr const ref.
    abstract method getDefaultFontCache => RenderingDeviceFontCachePtr const ref.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
