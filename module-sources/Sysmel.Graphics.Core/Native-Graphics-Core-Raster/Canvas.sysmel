namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Stdn Math LinearAlgebra.
useNamespace: Stdn Math Geometry.

class FontFaceWithSize.

#**
 * I am an abstract rendering canvas interface. I could be implemented through
 * CPU based software rendering, or I could be implemented through a hardware based accelerator.
 *#
class Canvas superclass: Object; definition: {
    ## This method clears the whole surface with the active color.
    abstract method clear ::=> Void.

    ## This gives access to the current transform
    abstract method transform => AffinePostTransform2dF32 ref.

    ## This gives access to the current drawing state.
    abstract method drawingState => CanvasDrawingState ref.

    ## This gives access to the current paint state.
    abstract method paintState => CanvasPaintState ref.

    ## Fill a triangle.
    abstract method fillTriangle: (p1: Float32x2) color: (c1: Float32x4) tc: (tc1: Float32x2)
        p2: (p2: Float32x2) color: (c2: Float32x4) tc: (tc2: Float32x2)
        p3: (p3: Float32x2) color: (c3: Float32x4) tc: (tc3: Float32x2) ::=> Void.

    ## Draw the rectangle lines.
    abstract method drawSegmentStart: (startPoint: Float32x2) end: (endPoint: Float32x2) ::=> Void.

    ## Fill a rectangle.
    abstract method fillRectangle: (rectangle: RectangleF32) ::=> Void.

    ## Gets the current font face with size.
    abstract method fontFaceWithSize => FontFaceWithSize sharedPointer const ref.

    ## Sets the current font face with size.
    abstract method fontFaceWithSize: (font: FontFaceWithSize sharedPointer const ref) ::=> Void.

    ## Draw a character glyph in a particular position.
    abstract method drawGlyph: (glyph: Glyph ref) at: (aPosition: Float32x2) ::=> Void.

    ## Retrieve the current clipping rectangle
    abstract method currentClipRectangle => RectangleF32.

    ## Apply a new clip rectangle.
    abstract method applyClipRectangle: (aRectangle: RectangleF32) ::=> Void.

    ## Restore a clipping rectangle.
    abstract method restoreClipRectangle: (aRectangle: RectangleF32) ::=> Void.

    ## This method sets a white color.
    inline method white ::=> Void := {
        self paintState white
    }.

    ## This method sets a black color.
    inline method black ::=> Void := {
        self paintState black
    }.

    ## This method sets a transparent color.
    inline method transparent ::=> Void := {
        self paintState transparent
    }.

    inline method color: (aColor: UInt8x4) ::=> Void := {
        self paintState color: aColor
    }.

    inline method color: (aColor: Float32x4) ::=> Void := {
        self paintState color: aColor
    }.

    inline method fillTriangle: (p1: Float32x2) color: (c1: Float32x4) p2: (p2: Float32x2) color: (c2: Float32x4) p3: (p3: Float32x2) color: (c3: Float32x4)::=> Void := {
        self fillTriangle: p1 color: c1 tc: Float32x2 zeros
            p2: p2 color: c2 tc: Float32x2 zeros
            p3: p3 color: c3 tc: Float32x2 zeros
    }.

    inline method fillTriangle: (p1: Float32x2) tc: (tc1: Float32x2) p2: (p2: Float32x2) tc: (tc2: Float32x2) p3: (p3: Float32x2) tc: (tc3: Float32x2) ::=> Void := {
        self fillTriangle: p1 color: Float32x4 ones tc: tc1
            p2: p2 color: Float32x4 ones tc: tc2
            p3: p3 color: Float32x4 ones tc: tc3
    }.

    inline method fillTriangle: (p1: Float32x2) p2: (p2: Float32x2) p3: (p3: Float32x2) ::=> Void := {
        self fillTriangle: p1 color: Float32x4 ones tc: Float32x2 zeros
            p2: p2 color: Float32x4 ones tc: Float32x2 zeros
            p3: p3 color: Float32x4 ones tc: Float32x2 zeros
    }.

    inline method gradientStart: (startColor: Float32x4) position: (startPosition: Float32x2) end: (endColor: Float32x4) position: (endPosition: Float32x2) ::=> Void := {
        let transform ref := self transform.
        self paintState gradientStart: startColor position: (transform transformPoint: startPosition) end: endColor position: (transform transformPoint: endPosition)
    }.

    ## Fill a rectangle with a horizontal gradient.
    inline method fillRectangle: (rectangle: RectangleF32) verticalGradientStart: (startColor: Float32x4) end: (endColor: Float32x4) ::=> Void := {
        self gradientStart: startColor position: rectangle min end: endColor position: Float32x2(rectangle min x, rectangle max y).
        self fillRectangle: rectangle
    }.

    ## Fill a rectangle with a horizontal gradient.
    inline method fillRectangle: (rectangle: RectangleF32) horizontalGradientStart: (startColor: Float32x4) end: (endColor: Float32x4) ::=> Void := {
        self gradientStart: startColor position: rectangle min end: endColor position: Float32x2(rectangle max x, rectangle min y).
        self fillRectangle: rectangle
    }.

    ## Draw the rectangle lines.
    inline method drawRectangle: (rectangle: RectangleF32) ::=> Void := {
        rectangle isEmpty ifTrue: {
            return: void.
        }.

        let inclusiveRectangle := RectangleF32 min: rectangle min max: ((rectangle max - 1) max: rectangle min).

        self
            drawSegmentStart: inclusiveRectangle bottomLeft end: inclusiveRectangle bottomRight;
            drawSegmentStart: inclusiveRectangle bottomRight end: inclusiveRectangle topRight;
            drawSegmentStart: inclusiveRectangle topRight end: inclusiveRectangle topLeft;
            drawSegmentStart: inclusiveRectangle topLeft end: inclusiveRectangle bottomLeft.
    }.

    ## Draws a character with the font face and size. This returns the position for drawing the next character.
    inline method drawCharacterWithState: (state: TextDrawingState) ::=> TextDrawingState := {
        let fontFaceWithSize ref := self fontFaceWithSize.
        fontFaceWithSize ifNil: {
            return: state.
        }.

        let newState mutable := fontFaceWithSize _ computeNewDrawingState: state.
        newState isVisibleCharacter ifTrue: {
            ## Get the glyph for the character
            let glyph := fontFaceWithSize _ getOrCreateGlyphForCodePoint: newState character.
            glyph ifNil: {
                return: newState
            }.

            ## Convert the glyph into a form. We can always do this operation with fonts.
            self drawGlyph: glyph _ at: newState previousPosition.
        }.

        return: newState.
    }.

    ## Draw an UTF-8 encoded string. Allow overriding for optiomization reasons.
    inline method drawUTF8String: (encodedString: Char8 const pointer) size: (encodedStringSize: UIntPointer) withState: (state: TextDrawingState) ::=> TextDrawingState := {
        let currentState mutable := state.

        ## TODO: Properly decode the utf8 encoded string by using a stream and an iterator.
        0 until: encodedStringSize do: {:(UIntPointer)i :: Void |
            currentState character: encodedString[i].
            currentState := self drawCharacterWithState: currentState.
        }.

        currentState
    }.

    inline method drawUTF8String: (encodedString: Char8 const pointer) size: (encodedStringSize: UIntPointer) at: (position: Float32x2) ::=> TextDrawingState
        := self drawUTF8String: encodedString size: encodedStringSize
            withState: (TextDrawingState position: position).

    inline method drawUTF8String: (string: Stdn String const ref) at: (position: Float32x2) ::=> TextDrawingState
        := self drawUTF8String: string data size: string size at: position.

    inline method drawUTF8String: (encodedString: Char8 const pointer) at: (position: Float32x2) ::=> TextDrawingState
        := self drawUTF8String: encodedString size: Stdn cstrlen(encodedString) at: position.

    inline method applyLocalClipRectangle: (aRectangle: RectangleF32) ::=> Void
        := self applyClipRectangle: (aRectangle transformedWith: self transform).

    macro method withLocalClipRectangle: aRectangle do: aBlock := {
        let canvas := __astBuilder gensym: #canvas.
        let clipRectangleMemento := __astBuilder gensym: #clipRectangleMemento.
        ``{
            let `,canvas ref := `,self.
            let `,clipRectangleMemento := `,canvas currentClipRectangle.
            `,canvas applyLocalClipRectangle: `,aRectangle.
            try: `,aBlock finally: {
                `,canvas restoreClipRectangle: `,clipRectangleMemento.
            }.

        } asSequenceWithoutLexicalScope
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
