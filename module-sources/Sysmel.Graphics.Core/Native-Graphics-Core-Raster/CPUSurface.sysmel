namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

#**
 * I am a CPU software based rasterization drawing surface. My drawing is based on bitblit,
 * I am slower than a GPU based surface, but I have zero overhead on direct accesses from the CPU.
 *#
class CPUSurface superclass: Surface; definition: {
    public field pixelsBlitter type: Blitter.

    override method beginDrawingWithCanvas => Canvas uniquePointer := {
        let result := CPUCanvas nativeNew _
            initializeWithSurface: self address;
            address.

        self beginDrawing.
        Canvas uniquePointer for: result.
    }.

    override method renderingDriver => RenderingDriver pointer
        := CPURenderingDriver uniqueInstance getPointer.

    virtual method beginDrawing => Void := {
        ## Hook for locking a surface, and setting the actual blitter.
    }.

    virtual method endDrawing => Void := {
        ## Hook for unlocking the surface and invalidating the blitter.
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
