namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Stdn Math Geometry.

class UnsafePixelIterator definition: {
    public field pixels type: UInt8 pointer.
    public field pitch type: Int32.
    public field bytesPerPixel type: UInt32.
    public field pixelFormat type: PixelFormat.

    inline method advanceColumn => Void := {
        pixels := pixels + bytesPerPixel
    }.

    inline method advanceColumns: (deltaX: Int32) ::=> Void := {
        pixels := pixels + (deltaX*bytesPerPixel)
    }.

    inline method advanceRow => Void := {
        pixels := pixels + pitch
    }.

    inline method advanceRows: (deltaY: Int32) ::=> Void := {
        pixels := pixels + (deltaY*pitch)
    }.

    inline method advanceRows: (deltaY: Int32) columns: (deltaX: Int32) ::=> Void := {
        pixels := pixels + (deltaY*pitch + deltaX*bytesPerPixel)
    }.

    inline method advanceCoordinates: (coords: Int32x2) ::=> Void := {
        self advanceRows: coords y columns: coords x
    }.

    method storePixelUNorm8x4: (rawNewValue: UInt8x4) ::=> Void := {
        let newValue := pixelFormat swizzleStoringUnorm8x4: rawNewValue.

        bytesPerPixel selectCase: #{
        1 : {
            pixels _ := newValue r.
        }.
        2 : {
            (pixels reinterpretCastTo: UInt8x2 pointer) _  := newValue rg.
        }.
        3 : {
            pixels[0] := newValue r.
            pixels[1] := newValue g.
            pixels[2] := newValue b.
        }.
        4 : {
            (pixels reinterpretCastTo: UInt8x4 pointer) _  := newValue.
        }.
        _ : {}
        }.
    }.

    method storePixelFloat32x4: (newValue: Float32x4) ::=> Void := {
        pixelFormat store: newValue intoMemory: pixels.
    }.

    method loadPixelUNorm8x4 => UInt8x4 := {
        let result mutable := UInt8x4 zeros.
        bytesPerPixel selectCase: #{
        1 : {
            result := UInt8x4(pixels[0], 0, 0, 255).
        }.
        2 : {
            result := UInt8x4(pixels[0], pixels[1], 0, 255).
        }.
        3 : {
            result := UInt8x4(pixels[0], pixels[1], pixels[2], 255).
        }.
        4 : {
            result := (pixels reinterpretCastTo: UInt8x4 pointer) _.
        }.
        _ : {}
        }.

        pixelFormat swizzleLoadedUnorm8x4: result.
    }.

    method loadPixelFloat32x4 => Float32x4
        := pixelFormat fetchFromMemory: pixels.
}.

#**
 * I am a 2D CPU based blitter for pixels. I encapsulate pixel accessing and
 * conversion operations, and I provide basic CPU based rasterization primitives.
 *#
class Blitter definition: {
    ## Hold a copy of the surface components.

    public field extent type: UInt32x2.
    public field pitch type: Int32.
    public field pixelFormat type: PixelFormat.
    public field pixels type: UInt8 pointer.
    public field clippedBounds type: RectangleI32.

    const inline method bounds => RectangleI32
        := RectangleI32 extent: (extent castTo: Int32x2).

    field bytesPerPixel type: UInt32.

    compileTime constant UNorm8RenderBlockType := ((UInt32x2) => UInt8x4) nativeBlockClosure.
    compileTime constant Float32RenderBlockType := ((UInt32x2) => Float32x4) nativeBlockClosure.
    compileTime constant Float32BlendRenderBlockType := ((UInt32x2 -- Float32x4) => Float32x4) nativeBlockClosure.
    compileTime constant Float32BlendTriangleBlockType := ((Float32x2 -- Float32x3 -- Float32x4) => Float32x4) nativeBlockClosure.
    compileTime constant Float32BlendCopyBlockType := ((Int32x2 -- Float32x4 -- Float32x4) => Float32x4) nativeBlockClosure.
    compileTime constant Float32NormalizedRenderBlockType := ((Float32x2) => Float32x4) nativeBlockClosure.

    inline method applyFullClippingBounds => Void := {
        clippedBounds := self bounds.
    }.

    inline method applyZeroClippingBounds => Void := {
        clippedBounds := RectangleI32 point: Int32x2 zeros
    }.

    inline method applyClippingRectangle: (aRectangle: RectangleI32) ::=> Void := {
        clippedBounds := self bounds intersectionWith: aRectangle.
        clippedBounds isEmpty ifTrue: {
            self applyZeroClippingBounds
        }
    }.

    method initializeCachedState => Void := {
        bytesPerPixel := pixelFormat bytesPerPixel.
    }.

    const inline method makeUnsafePixelIterator => UnsafePixelIterator
        := UnsafePixelIterator basicNewValue
            pixels: pixels;
            pitch: pitch;
            bytesPerPixel: bytesPerPixel;
            pixelFormat: pixelFormat;
            yourself.

    const inline method makeUnsafePixelIteratorAt: (coordinates: Int32x2) ::=> UnsafePixelIterator
        := self makeUnsafePixelIterator advanceCoordinates: coordinates; yourself.

    const inline method setRectangle: (rectangle: RectangleI32) pixelsWith: (renderBlock: UNorm8RenderBlockType) ::=> Void := {
        let clippedRectangle := rectangle intersectionWith: self clippedBounds.
        clippedRectangle isEmpty ifTrue: {
            Stdn stdout << "Empty clipped rectangle"; nl.
            return: void
        }.

        let destRow mutable := self makeUnsafePixelIteratorAt: clippedRectangle min.
        clippedRectangle min y until: clippedRectangle max y do: {:(Int32)y :: Void |
            let destPixel mutable := destRow.
            clippedRectangle min x until: clippedRectangle max x do: {:(Int32)x :: Void |
                destPixel storePixelUNorm8x4: renderBlock(Int32x2(x, y) castTo: UInt32x2).
                destPixel advanceColumn
            }.

            destRow advanceRow
        }
    }.

    const inline method setPixelsWith: (renderBlock: UNorm8RenderBlockType) ::=> Void := {
        self setRectangle: self bounds pixelsWith: renderBlock
    }.

    const inline method setRectangle: (rectangle: RectangleI32) pixelsWith: (renderBlock: Float32RenderBlockType) ::=> Void := {
        let clippedRectangle := rectangle intersectionWith: self clippedBounds.
        clippedRectangle isEmpty ifTrue: {
            return: void
        }.

        let destRow mutable := self makeUnsafePixelIteratorAt: clippedRectangle min.
        clippedRectangle min y until: clippedRectangle max y do: {:(Int32)y :: Void |
            let destPixel mutable := destRow.
            clippedRectangle min x until: clippedRectangle max x do: {:(Int32)x :: Void |
                destPixel storePixelFloat32x4: renderBlock(Int32x2(x, y) castTo: UInt32x2).
                destPixel advanceColumn
            }.

            destRow advanceRow
        }
    }.

    const inline method setPixelsWith: (renderBlock: Float32RenderBlockType) ::=> Void := {
        self setRectangle: self bounds pixelsWith: renderBlock
    }.

    const inline method setRectangle: (rectangle: RectangleI32) pixelData: (encodedPixel: UInt8 const pointer) pixelSize: (pixelSize: UIntPointer) ::=> Void := {
        let clippedRectangle := rectangle intersectionWith: self clippedBounds.
        clippedRectangle isEmpty ifTrue: {
            return: void
        }.

        let destRow mutable := self makeUnsafePixelIteratorAt: clippedRectangle min.
        clippedRectangle min y until: clippedRectangle max y do: {:(Int32)y :: Void |
            let destPixel mutable := destRow.
            clippedRectangle min x until: clippedRectangle max x do: {:(Int32)x :: Void |
                Stdn memcpy(destPixel pixels, encodedPixel, pixelSize).
                destPixel advanceColumn
            }.

            destRow advanceRow
        }
    }.

    const inline method setRectangle: (rectangle: RectangleI32) pixelsTo: (color: UInt8x4) ::=> Void := {
        bytesPerPixel > 32 ifTrue: {
            return: void
        }.

        let pixelData mutable type: (UInt8 array: 32).
        pixelFormat store: color intoMemory: pixelData[0] address.
        self setRectangle: rectangle pixelData: pixelData[0] address pixelSize: bytesPerPixel
    }.

    const inline method setRectangle: (rectangle: RectangleI32) pixelsTo: (color: Float32x4) ::=> Void := {
        bytesPerPixel > 32 ifTrue: {
            return: void
        }.

        let pixelData mutable type: (UInt8 array: 32).
        pixelFormat store: color intoMemory: pixelData[0] address.
        self setRectangle: rectangle pixelData: pixelData[0] address pixelSize: bytesPerPixel
    }.

    ## This one is used for generating procedural textures
    const inline method setPixelsWith: (renderBlock: Float32NormalizedRenderBlockType) ::=> Void := {
        self setPixelsWith: {:(UInt32x2)pixelCoord :: Float32x4 |
            let normalizedCoord := (pixelCoord castTo: Float32x2) / (extent castTo: Float32x2).
            renderBlock(normalizedCoord)
        }
    }.

    const inline method setAllPixelsToColor: (color: UInt8x4) ::=> Void := {
        clippedBounds = self bounds &&
        (color r == color g && color g == color b && color b == color a) &&
        pitch >= 0 ifTrue: {
            Stdn memset(pixels, color r, pitch * extent y castTo: UIntPointer)
        } ifFalse: {
            self setRectangle: self bounds pixelsTo: color
        }.
    }.

    const inline method setAllPixelsToColor: (color: Float32x4) ::=> Void := {
        clippedBounds = self bounds &&
        (color r == color g && color g == color b && color b == color a && bytesPerPixel = 4) &&
        pitch >= 0 ifTrue: {
            let encodedPattern mutable type: UInt32.
            pixelFormat store: color intoMemory: (encodedPattern address reinterpretCastTo: UInt8 pointer).
            let wordCount := (pitch * extent y) / 4.
            (wordCount % 16 == 0) && ((pixels reinterpretCastTo: UIntPointer) % 16 == 0) ifTrue: {
                let vectorCount := wordCount / 4.
                let dest := pixels reinterpretCastTo: UInt32x4 pointer.
                let vectorPattern := UInt32x4(encodedPattern, encodedPattern, encodedPattern, encodedPattern).
                0 until: vectorCount do: {:i :: Void |
                    dest[i] := vectorPattern
                }.
            } ifFalse: {
                let dest := pixels reinterpretCastTo: UInt32 pointer.
                0 until: wordCount do: {:i :: Void |
                    dest[i] := encodedPattern
                }.

            }.
        } ifFalse: {
            self setRectangle: self bounds pixelsTo: color
        }.
    }.

    const inline method blendRectangle: (rectangle: RectangleI32) pixelsWith: (renderBlock: Float32BlendRenderBlockType) ::=> Void := {
        let clippedRectangle := rectangle intersectionWith: self clippedBounds.
        clippedRectangle isEmpty ifTrue: {
            return: void
        }.

        let destRow mutable := self makeUnsafePixelIteratorAt: clippedRectangle min.
        clippedRectangle min y until: clippedRectangle max y do: {:(Int32)y :: Void |
            let destPixel mutable := destRow.
            clippedRectangle min x until: clippedRectangle max x do: {:(Int32)x :: Void |
                destPixel storePixelFloat32x4: renderBlock(Int32x2(x, y) castTo: UInt32x2, destPixel loadPixelFloat32x4).
                destPixel advanceColumn
            }.

            destRow advanceRow
        }
    }.

    const inline method blendVerticalSegmentStart: (startPoint: Int32x2) end: (endPoint: Int32x2) pixelsWith: (renderBlock: Float32BlendRenderBlockType) ::=> Void := {
        let w := extent x castTo: Int32.
        clippedBounds min x <= startPoint x && startPoint x < clippedBounds max x ifFalse: {
            return: void
        }.

        let x := startPoint x.
        let dy := startPoint y <= endPoint y ifTrue: 1 ifFalse: -1.
        let y mutable := startPoint y.

        let destPixel mutable := self makeUnsafePixelIteratorAt: Int32x2(x, y).
        let h := extent y castTo: Int32.
        while: y ~= endPoint y do: {
            clippedBounds min y <= y && y < clippedBounds max y ifTrue: {
                destPixel storePixelFloat32x4: renderBlock(Int32x2(x, y) castTo: UInt32x2, destPixel loadPixelFloat32x4).
            }.
            destPixel advanceRows: dy.
            y := y + dy
        }.
    }.

    const inline method blendHorizontalSegmentStart: (startPoint: Int32x2) end: (endPoint: Int32x2) pixelsWith: (renderBlock: Float32BlendRenderBlockType) ::=> Void := {
        clippedBounds min y <= startPoint y && startPoint y < clippedBounds max y ifFalse: {
            return: void
        }.

        let y := startPoint y.
        let dx := startPoint x <= endPoint x ifTrue: 1 ifFalse: -1.
        let x mutable := startPoint x.
        let destPixel mutable := self makeUnsafePixelIteratorAt: Int32x2(x, y).
        while: x ~= endPoint x do: {
            clippedBounds min x <= x && x < clippedBounds max x ifTrue: {
                destPixel storePixelFloat32x4: renderBlock(Int32x2(x, y) castTo: UInt32x2, destPixel loadPixelFloat32x4).
            }.
            destPixel advanceColumns: dx.
            x := x + dx
        }.
    }.

    const inline method blendSegmentStart: (startPoint: Int32x2) end: (endPoint: Int32x2) pixelsWith: (renderBlock: Float32BlendRenderBlockType) ::=> Void := {
        ## Vertical line
        startPoint x == endPoint x ifTrue: {
            self blendVerticalSegmentStart: startPoint end: endPoint pixelsWith: renderBlock.
            return: void
        }.

        ## Horizontal line
        startPoint y == endPoint y ifTrue: {
            self blendHorizontalSegmentStart: startPoint end: endPoint pixelsWith: renderBlock.
            return: void
        }.

        ## TODO: Add proper clipping support for the segment.
        ## Bresenham algorithm from: https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm [April 2th, 2020]
        let delta := endPoint - startPoint.
        let d := Int32x2(delta x abs, delta y abs negated).
        let step := delta sign.

        let currentPoint mutable := startPoint.
        let currentError mutable := d x + d y.
        let destPixel mutable := self makeUnsafePixelIteratorAt: currentPoint.
        let myBounds := self clippedBounds.
        while: currentPoint x ~= endPoint x || currentPoint y ~= endPoint y do: {
            (myBounds includesPoint: currentPoint) ifTrue: {
                destPixel storePixelFloat32x4: renderBlock(currentPoint castTo: UInt32x2, destPixel loadPixelFloat32x4).
            }.

            let e2 := currentError * 2.
            e2 >= d y ifTrue: {
                currentError := currentError + d y.
                currentPoint := Int32x2(currentPoint x + step x, currentPoint y).
                destPixel advanceColumns: step x.
            }.
            e2 <= d x ifTrue: {
                currentError := currentError + d x.
                currentPoint := Int32x2(currentPoint x, currentPoint y + step y).
                destPixel advanceRows: step y.
            }.
        }.
    }.

    const inline method blendSegmentStart: (startPoint: Float32x2) end: (endPoint: Float32x2) pixelsWith: (renderBlock: Float32BlendRenderBlockType) ::=> Void := {
        self blendSegmentStart: (startPoint floor castTo: Int32x2) end: (endPoint castTo: Int32x2) pixelsWith: renderBlock
    }.

    const inline method blendTriangle: (p1: Float32x2) p2: (p2: Float32x2) p3: (p3: Float32x2) pixelsWith: (renderBlock: Float32BlendTriangleBlockType) ::=> Void := {
        let destRow mutable type: UnsafePixelIterator.
        let destPixel mutable type: UnsafePixelIterator.

        TringleRasterizer()
            clippingBounds: self clippedBounds;
            loopSetupFunction: {:(Int32x2)startPosition :: Void |
                destRow := self makeUnsafePixelIteratorAt: startPosition.
            };
            rowSetupFunction: { :: Void |
                destPixel := destRow.
            };
            rowAdvanceFunction: {:(Int32)delta :: Void |
                destRow advanceRows: delta
            };
            columnAdvanceFunction: {:(Int32)delta :: Void |
                destPixel advanceColumns: delta
            };
            pixelRenderFunction: {:(Float32x4)p :(Boolean8)isFrontFace :(Float32x3)flatBarycentric :(Float32x3)perspectiveBarycentric :: Void |
                destPixel storePixelFloat32x4: renderBlock(p xy, perspectiveBarycentric, destPixel loadPixelFloat32x4).
            };
            rasterizeTriangle2D: p1 p2: p2 p3: p3.
    }.

    const inline method copyPixelsFrom: (sourceBlitter: Blitter const ref) at: (source: RectangleI32)
        into: (destinationPosition: Int32x2) ::=> Void := {

        ## Clip the source rectangle.
        let clippedSourceRectangle := source intersectionWith: sourceBlitter clippedBounds.
        clippedSourceRectangle isEmpty ifTrue: {
            return: void
        }.

        ## Compute the destination rectangle.
        let destinationRectangle := RectangleI32 min: destinationPosition max: destinationPosition + clippedSourceRectangle extent.
        let clippedDestinationRectangle := destinationRectangle intersectionWith: self clippedBounds.
        clippedDestinationRectangle isEmpty ifTrue: {
            return: void
        }.

        let sourceClippedLocation := clippedSourceRectangle min + (clippedDestinationRectangle min - destinationPosition).
        let copyExtent := clippedDestinationRectangle extent.

        sourceBlitter extent = extent &&
        clippedDestinationRectangle = self bounds &&
        sourceBlitter pixelFormat = pixelFormat &&
        sourceBlitter pitch = pitch &&
        pitch >= 0 ifTrue: {
            Stdn memcpy(pixels, sourceBlitter pixels, pitch*extent y castTo: UIntPointer).
            return: void.
        }.

        let sourceRow mutable := sourceBlitter makeUnsafePixelIteratorAt: sourceClippedLocation.
        let destRow mutable := self makeUnsafePixelIteratorAt: clippedDestinationRectangle min.
        clippedDestinationRectangle min y until: clippedDestinationRectangle max y do: {:(Int32)y :: Void |
            let sourcePixel mutable := sourceRow.
            let destPixel mutable := destRow.
            clippedDestinationRectangle min x until: clippedDestinationRectangle max x do: {:(Int32)x :: Void |
                destPixel storePixelUNorm8x4: sourcePixel loadPixelUNorm8x4.

                sourcePixel advanceColumn.
                destPixel advanceColumn.
            }.

            sourceRow advanceRow.
            destRow advanceRow.
        }
    }.

    const inline method copyPixelsFrom: (sourceBlitter: Blitter const ref) into: (targetPosition: Int32x2) ::=> Void := {
        self copyPixelsFrom: sourceBlitter at: sourceBlitter clippedBounds into: targetPosition.
    }.

    const inline method blendPixelsFrom: (sourceBlitter: Blitter const ref) at: (source: RectangleI32)
        into: (destinationPosition: Int32x2) with: (blendFunction: Float32BlendCopyBlockType)::=> Void := {

        ## Clip the source rectangle.
        let clippedSourceRectangle := source intersectionWith: sourceBlitter clippedBounds.
        clippedSourceRectangle isEmpty ifTrue: {
            return: void
        }.

        ## Compute the destination rectangle.
        let destinationRectangle := RectangleI32 min: destinationPosition max: destinationPosition + clippedSourceRectangle extent.
        let clippedDestinationRectangle := destinationRectangle intersectionWith: self clippedBounds.
        clippedDestinationRectangle isEmpty ifTrue: {
            return: void
        }.

        let sourceClippedLocation := clippedSourceRectangle min + (clippedDestinationRectangle min - destinationPosition).
        ##let copyExtent := clippedDestinationRectangle extent.

        let sourceRow mutable := sourceBlitter makeUnsafePixelIteratorAt: sourceClippedLocation.
        let destRow mutable := self makeUnsafePixelIteratorAt: clippedDestinationRectangle min.
        clippedDestinationRectangle min y until: clippedDestinationRectangle max y do: {:(Int32)y :: Void |
            let sourcePixel mutable := sourceRow.
            let destPixel mutable := destRow.
            clippedDestinationRectangle min x until: clippedDestinationRectangle max x do: {:(Int32)x :: Void |
                let currentDestColor := destPixel loadPixelFloat32x4.
                let currentSourceColor := sourcePixel loadPixelFloat32x4.
                let computedDestColor := blendFunction(Int32x2(x, y), currentDestColor, currentSourceColor).

                destPixel storePixelFloat32x4: computedDestColor.

                sourcePixel advanceColumn.
                destPixel advanceColumn.
            }.

            sourceRow advanceRow.
            destRow advanceRow.
        }
    }.

    const inline method blendPixelsFrom: (sourceBlitter: Blitter const ref) into: (targetPosition: Int32x2) with: (blendFunction: Float32BlendCopyBlockType) ::=> Void := {
        self blendPixelsFrom: sourceBlitter at: sourceBlitter clippedBounds into: targetPosition with: blendFunction.
    }.

    const inline method compositeAlphaBlendPixelsFrom: (sourceBlitter: Blitter const ref) at: (sourceRectangle: RectangleI32)
        into: (destinationPosition: Int32x2) withColor: (modulationColor: Float32x4) ::=> Void := {

        self blendPixelsFrom: sourceBlitter at: sourceRectangle into: destinationPosition with: {:(Int32x2)pixelCoord :(Float32x4)destColor :(Float32x4)sourceColor :: Float32x4 |
            let newColor := modulationColor * sourceColor.
            Float32x4((destColor rgb * (1.0f - newColor a)) + (newColor rgb * newColor a), destColor a + newColor a).
        }
    }.

    const inline method compositeAlphaBlendPixelsFrom: (sourceBlitter: Blitter const ref) withColor: (modulationColor: Float32x4) at: (targetPosition: Int32x2) ::=> Void := {
        self compositeAlphaBlendPixelsFrom: sourceBlitter at: sourceBlitter clippedBounds into: targetPosition withColor: modulationColor
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
