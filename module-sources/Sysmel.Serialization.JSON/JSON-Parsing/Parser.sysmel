namespace Stdn definition: {
namespace Serialization definition: {
namespace JSON definition: {

template Parser(RT: Type)
 := class definition: {
    compileTime constant ResultType := RT.
    compileTime constant DefaultResult := RT defaultValue.

    class Callback definition: {
        virtual method beginArray ::=> ResultType
            := DefaultResult.

        virtual method endArray: (theArray: ResultType ref) ::=> Void
            := void.

        virtual method putValue: (theValue: ResultType) onArray: (theArray: ResultType ref) ::=> Void
            := void.

        virtual method beginObject ::=> ResultType
            := DefaultResult.

        virtual method endObject: (theObject: ResultType ref) ::=> Void
            := void.

        virtual method putKey: (key: Stdn String const ref) value: (theValue: ResultType) onObject: (theObject: ResultType ref) ::=> Void
            := void.

        virtual method onInteger: (value: Int64) ::=> ResultType
            := DefaultResult.

        virtual method onUnsignedInteger: (value: UInt64) ::=> ResultType
            := DefaultResult.

        virtual method onNil ::=> ResultType
            := DefaultResult.

        virtual method onBoolean: (value: Boolean8) ::=> ResultType
            := DefaultResult.

        virtual method onFloat: (value: Float64) ::=> ResultType
            := DefaultResult.

        virtual method onString: (string: Stdn String const ref) ::=> ResultType
            := DefaultResult.

        virtual method onError ::=> ResultType
            := Stdn raiseError("JSON parse error").

    }.

    public field callback type: Callback pointer.
    public field tokenStream type: TokenStream.
    field currentToken type: TokenType.

    method beginReadingStream: (stream: Stdn IO Stream pointer) ::=> Void := {
        tokenStream := TokenStream for: stream.
    }.

    method parseNextList => ResultType := {
        self nextToken = TokenType LeftBracket ifFalse: {
            return: callback _ onError
        }.
        self advanceToken.

        let array mutable := callback _ beginArray.
        self nextToken ~= TokenType RightBracket ifTrue: {
            callback _ putValue: (self parseNextValue) onArray: array.

            while: (self nextToken = TokenType Comma) do: {
                self advanceToken.
                callback _ putValue: (self parseNextValue) onArray: array.
            }.

            self nextToken = TokenType RightBracket ifFalse: {
                return: callback _ onError
            }
        }.

        self advanceToken.
        callback _ endArray: array.
        array.
    }.

    method parseNextObjectElementOnto: (object: ResultType ref) ::=> Boolean8 := {
        ## Key
        self nextToken = TokenType String ifFalse: {
            return: false
        }.
        let key := tokenStream text.
        self advanceToken.

        ## Colon
        self nextToken = TokenType Colon ifFalse: {
            return: false
        }.
        self advanceToken.

        ## Value.
        let value := self parseNextValue.

        ## Store the object element.
        callback _ putKey: key value: value onObject: object.

        true
    }.

    method parseNextObject => ResultType := {
        self nextToken = TokenType LeftCurlyBracket ifFalse: {
            return: callback _ onError
        }.
        self advanceToken.

        let object mutable := callback _ beginObject.
        self nextToken ~= TokenType RightCurlyBracket ifTrue: {
            (self parseNextObjectElementOnto: object) ifFalse: {
                return: callback _ onError
            }.

            while: (self nextToken = TokenType Comma) do: {
                self advanceToken.
                (self parseNextObjectElementOnto: object) ifFalse: {
                    return: callback _ onError
                }.
            }.

            self nextToken = TokenType RightCurlyBracket ifFalse: {
                return: callback _ onError
            }
        }.

        self advanceToken.
        callback _ endObject: object.
        object.
    }.

    method nextToken => TokenType := {
        currentToken = TokenType None ifTrue: {
            currentToken := tokenStream next
        }.

        currentToken
    }.

    method advanceToken => TokenType := {
        currentToken := TokenType None
    }.

    method parseNextValue => ResultType := {
        self nextToken selectCase: #{
        (TokenType Integer , TokenType HexInteger) asValueInSetPattern : {
            tokenStream text first = '-' ifTrue: {
                let value := Stdn parseInt64(tokenStream text data, tokenStream text size).
                self advanceToken.
                callback _ onInteger: value
            } ifFalse: {
                let value := Stdn parseUInt64(tokenStream text data, tokenStream text size).
                self advanceToken.
                callback _ onUnsignedInteger: value
            }
        }.

        TokenType Float : {
            let value := Stdn parseFloat64(tokenStream text data, tokenStream text size).
            self advanceToken.
            callback _ onFloat: value
        }.

        TokenType String : {
            let stringCopy := tokenStream text.
            self advanceToken.
            callback _ onString: stringCopy
        }.

        TokenType LeftBracket : {
            self parseNextList.
        }.

        TokenType LeftCurlyBracket : {
            self parseNextObject.
        }.

        TokenType Identifier : {
            tokenStream text selectCase: #{
            "nil" asMutableString : {
                self advanceToken.
                callback _ onNil
            }.
            "true" asMutableString : {
                self advanceToken.
                callback _ onBoolean: true
            }.
            "false" asMutableString : {
                self advanceToken.
                callback _ onBoolean: false
            }.
            _ : {
                callback _ onError
            }.
            }
        }.

        _ : {callback _ onError}
        }.
    }.

}.

}. ## End of namespace JSON
}. ## End of namespace Serialization
}. ## End of namespace Stdn
