namespace Std definition: {
namespace Graphics definition: {
namespace GUI definition: {

useNamespace: SDL2.
useNamespace: Std Graphics Core.
class SDL2Window.

function convertSystemCursorName(name: SystemCursorName) => SDL_SystemCursor := {
    name selectCase: #{
    SystemCursorName Arrow : SDL_SYSTEM_CURSOR_ARROW.
    SystemCursorName IBeam : SDL_SYSTEM_CURSOR_IBEAM.
    SystemCursorName Wait : SDL_SYSTEM_CURSOR_WAIT.
    SystemCursorName CrossHair : SDL_SYSTEM_CURSOR_CROSSHAIR.
    SystemCursorName WaitArrow : SDL_SYSTEM_CURSOR_WAITARROW.
    SystemCursorName SizeNorthWestSouthEast : SDL_SYSTEM_CURSOR_SIZENWSE.
    SystemCursorName SizeNorthEastSouthWest : SDL_SYSTEM_CURSOR_SIZENESW.
    SystemCursorName SizeWestEast : SDL_SYSTEM_CURSOR_SIZEWE.
    SystemCursorName SizeNorthSouth : SDL_SYSTEM_CURSOR_SIZENS.
    SystemCursorName SizeAll : SDL_SYSTEM_CURSOR_SIZEALL.
    SystemCursorName No : SDL_SYSTEM_CURSOR_NO.
    SystemCursorName Hand : SDL_SYSTEM_CURSOR_HAND.
    _ : SDL_SYSTEM_CURSOR_ARROW.
    }.
}.

class SDL2WindowSystem superclass: WindowSystem; definition: {
    compileTime constant MaxGameControllerCount := 8.

    private field aliveWindowCount type: UInt32.
    private field isQuitRequested type: Boolean8.
    private field windowIDDictionary type: Std Collections Dictionary(UInt32, SDL2Window rcRef).
    private field lastMousePosition type: Float32x2.
    private field lastKeyModifiers type: KeyModifiers.
    private field allocatedSystemCursors type: (SDL_Cursor pointer array: SystemCursorName Count value).
    private field gameControllers type: (SDL_GameController pointer array: MaxGameControllerCount).

    override method initialize => Void := {
        SDL2InitState uniqueInstance increaseVideoUserCount.
    }.

    override method finalize => Void := {
        0 until: SystemCursorName Count value do: {:i :: Void |
            let cursor := allocatedSystemCursors[i].
            cursor ifNotNil: {
                SDL_FreeCursor(cursor)
            }
        }.

        SDL2InitState uniqueInstance decreaseVideoUserCount.
    }.

    override method isQuitting => Boolean8
        := isQuitRequested || aliveWindowCount == 0.

    method nextWaitEventTimeout => Int32
        := 32.

    method currentMousePosition => Float32x2
        := lastMousePosition.

    method currentKeyModifiers => KeyModifiers
        := lastKeyModifiers.

    override method createWindow: (creationInfo: WindowCreationInfo const ref) ::=> Window rcRef := {
        let position mutable := Int32x2(SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED).
        creationInfo position isPresent ifTrue: {
            position := creationInfo position _
        }.

        let extent := creationInfo extent.
        let flags mutable type: UInt32 := SDL_WINDOW_ALLOW_HIGHDPI.
        creationInfo hidden ifTrue: {
            flags := flags | SDL_WINDOW_HIDDEN
        } ifFalse: {
            flags := flags | SDL_WINDOW_SHOWN
        }.

        creationInfo borderless ifTrue: {
            flags := flags | SDL_WINDOW_BORDERLESS
        }.

        creationInfo fullscreen ifTrue: {
            flags := flags | SDL_WINDOW_FULLSCREEN
        }.

        creationInfo resizable ifTrue: {
            flags := flags | SDL_WINDOW_RESIZABLE
        }.

        creationInfo fullscreen ifTrue: {
            flags := flags | SDL_WINDOW_FULLSCREEN_DESKTOP
        }.

        let windowHandle := SDL_CreateWindow(creationInfo title asCString, position x, position y, extent x, extent y, flags).
        windowHandle ifNil: {
            return: Window rcRef nil.
        }.

        aliveWindowCount := aliveWindowCount + 1.
        let result := SDL2Window new
            handle: windowHandle;
            setWindowSystem: self address;
            animated: creationInfo animated;
            vsyncDisabled: creationInfo vsyncDisabled;
            isFullscreen: creationInfo fullscreen;
            yourself.


        windowIDDictionary at: SDL_GetWindowID(windowHandle) put: result.
        result upCastFor: Window.
    }.

    override method hasAnimatedWindow => Boolean8 := {
        let result mutable := false.
        windowIDDictionary valuesDo: {:(SDL2Window rcRef const ref)each :: Void |
            each animated ifTrue: {
                result := true
            }
        }.

        result
    }.

    override method pollAndPumpEvents => Void := {
        let event mutable type: SDL_Event.
        while: SDL_PollEvent(event address) do: {
            self pumpSDLEvent: event
        }
    }.

    override method waitForNextEventOrTimeout => Void := {
        let event mutable type: SDL_Event.
        if: SDL_WaitEventTimeout(event address, self nextWaitEventTimeout) then: {
            self pumpSDLEvent: event
        }.
    }.

    method windowDestroyed: (windowWrapper: SDL2Window pointer) ::=> Void := {
        let handle := windowWrapper _ handle.
        handle ifNotNil: {
            let id := SDL_GetWindowID(handle).
            windowIDDictionary removeKey: id
        }.

        aliveWindowCount := aliveWindowCount - 1.
    }.

    method pumpSDLEvent: (event: SDL_Event) ::=> Void := {
        event type selectCase: #{
        SDL_EventType SDL_WINDOWEVENT : { self processWindowEvent: event window. }.
        SDL_EventType SDL_KEYDOWN : { self processKeyDown: event key }.
        SDL_EventType SDL_KEYUP  : { self processKeyUp: event key }.
        SDL_EventType SDL_TEXTEDITING : { self processTextEditing: event edit }.
        SDL_EventType SDL_TEXTINPUT  : { self processTextInput: event text }.
        SDL_EventType SDL_MOUSEMOTION  : { self processMouseMotion: event motion }.
        SDL_EventType SDL_MOUSEBUTTONUP  : { self processMouseButtonUp: event button }.
        SDL_EventType SDL_MOUSEBUTTONDOWN  : { self processMouseButtonDown: event button }.
        SDL_EventType SDL_MOUSEWHEEL  : { self processMouseWheel: event wheel }.
        SDL_EventType SDL_CONTROLLERDEVICEADDED   : { self processGameControllerDeviceAdded: event cdevice }.
        SDL_EventType SDL_CONTROLLERDEVICEREMOVED   : { self processGameControllerDeviceRemoved: event cdevice }.
        SDL_EventType SDL_CONTROLLERDEVICEREMAPPED   : { self processGameControllerDeviceRemapped: event cdevice }.
        SDL_EventType SDL_CONTROLLERAXISMOTION   : { self processGameControllerAxisMotion: event caxis }.
        SDL_EventType SDL_CONTROLLERBUTTONDOWN   : { self processGameControllerButtonDown: event cbutton }.
        SDL_EventType SDL_CONTROLLERBUTTONUP  : { self processGameControllerButtonUp: event cbutton }.
        _ : {}
        }.
    }.

    method findWrapperForWindowID: (id: UInt32) ::=> Window rcRef := {
        let wrapper mutable := windowIDDictionary at: id ifAbsent: SDL2Window rcRef nil.

        wrapper upCastFor: Window.
    }.

    method processWindowEvent: (event: SDL_WindowEvent const ref) ::=> Void := {
        let wrapper mutable := self findWrapperForWindowID: event windowID.
        wrapper ifNil: {return: void}.

        event event selectCase: #{
            SDL_WINDOWEVENT_CLOSE : {
                let convertedEvent mutable type: WindowCloseRequestEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_EXPOSED : {
                let convertedEvent mutable type: ExposeEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_MOVED : {
                let convertedEvent mutable type: WindowMovedEvent.
                convertedEvent newPosition: Float32x2(event data1, event data2).
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_RESIZED : {
                let convertedEvent mutable type: WindowResizingEvent.
                convertedEvent newSize: Float32x2(event data1, event data2).
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_SIZE_CHANGED : {
                let convertedEvent mutable type: WindowSizeChangedEvent.
                convertedEvent newSize: Float32x2(event data1, event data2).
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_HIDDEN : {
                let convertedEvent mutable type: WindowHiddenEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_SHOWN : {
                let convertedEvent mutable type: WindowShownEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_MINIMIZED : {
                let convertedEvent mutable type: WindowMinimizedEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_MAXIMIZED : {
                let convertedEvent mutable type: WindowMaximizedEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_RESTORED : {
                let convertedEvent mutable type: WindowRestoredEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_ENTER : {
                let convertedEvent mutable type: MouseEnterEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_LEAVE : {
                let convertedEvent mutable type: MouseLeaveEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_FOCUS_GAINED : {
                let convertedEvent mutable type: WindowGotFocusEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            SDL_WINDOWEVENT_FOCUS_LOST : {
                let convertedEvent mutable type: WindowLostFocusEvent.
                wrapper deliverEvent: convertedEvent.
            }.
            _ : {}
        }
    }.

    method processKeyDown: (event: SDL_KeyboardEvent const ref) ::=> Void := {
        let wrapper mutable := self findWrapperForWindowID: event windowID.
        wrapper ifNil: {return: void}.

        let convertedEvent mutable := KeyPressedEvent newValue
            symbol: (event keysym sym castTo: KeySymbol);
            modifiers: (event keysym mod castTo: KeyModifiers);
            isRepeat: (event repeat ~= 0);
            yourself.

        lastKeyModifiers := convertedEvent modifiers.

        wrapper deliverEvent: convertedEvent.
    }.

    method processKeyUp: (event: SDL_KeyboardEvent const ref) ::=> Void := {
        let wrapper mutable := self findWrapperForWindowID: event windowID.
        wrapper ifNil: {return: void}.

        let convertedEvent mutable := KeyReleasedEvent newValue
            symbol: (event keysym sym castTo: KeySymbol);
            modifiers: (event keysym mod castTo: KeyModifiers);
            isRepeat: (event repeat ~= 0);
            yourself.

        lastKeyModifiers := convertedEvent modifiers.

        wrapper deliverEvent: convertedEvent.
    }.

    method processTextEditing: (event: SDL_TextEditingEvent const ref) ::=> Void := {
    }.

    method processTextInput: (event: SDL_TextInputEvent const ref) ::=> Void := {
        let wrapper mutable := self findWrapperForWindowID: event windowID.
        wrapper ifNil: {return: void}.

        let convertedEvent mutable := TextInputEvent newValue.
        convertedEvent text := Std String fromCString: event text[0] address.
        wrapper deliverEvent: convertedEvent.
    }.

    method processMouseMotion: (event: SDL_MouseMotionEvent const ref) ::=> Void := {
        let wrapper mutable := self findWrapperForWindowID: event windowID.
        wrapper ifNil: {return: void}.

        let convertedEvent mutable := MouseMoveEvent newValue
            mouseId: event which;
            position: Float32x2(event x, event y);
            modifiers: self currentKeyModifiers;
            buttonState: (event state castTo: MouseButtonMask);
            delta: Float32x2(event xrel, event yrel);
            yourself.

        lastMousePosition := convertedEvent position.

        wrapper deliverEvent: convertedEvent.
    }.

    method processMouseButtonDown: (event: SDL_MouseButtonEvent const ref) ::=> Void := {
        let wrapper mutable := self findWrapperForWindowID: event windowID.
        wrapper ifNil: {return: void}.

        let convertedEvent mutable := MouseButtonPressedEvent newValue
            mouseId: event which;
            position: Float32x2(event x, event y);
            modifiers: self currentKeyModifiers;
            button: (event button castTo: MouseButton);
            yourself.

        lastMousePosition := convertedEvent position.

        wrapper deliverEvent: convertedEvent.
    }.

    method processMouseButtonUp: (event: SDL_MouseButtonEvent const ref) ::=> Void := {
        let wrapper mutable := self findWrapperForWindowID: event windowID.
        wrapper ifNil: {return: void}.

        let convertedEvent mutable := MouseButtonReleasedEvent newValue
            mouseId: event which;
            position: Float32x2(event x, event y);
            modifiers: self currentKeyModifiers;
            button: (event button castTo: MouseButton);
            yourself.

        lastMousePosition := convertedEvent position.

        wrapper deliverEvent: convertedEvent.
    }.

    method processMouseWheel: (event: SDL_MouseWheelEvent const ref) ::=> Void := {
        let wrapper mutable := self findWrapperForWindowID: event windowID.
        wrapper ifNil: {return: void}.

        let convertedEvent mutable := MouseWheelEvent newValue
            mouseId: event which;
            position: self currentMousePosition;
            modifiers: self currentKeyModifiers;
            scrollDelta: Float32x2(event x, event y);
            isFlipped: event direction == SDL_MOUSEWHEEL_FLIPPED;
            yourself.

        wrapper deliverEvent: convertedEvent.
    }.

    method processGameControllerDeviceAdded: (event: SDL_ControllerDeviceEvent const ref) ::=> Void := {
        event which < 0 || event which >= MaxGameControllerCount ifTrue: {return: void}.

        gameControllers[event which] := SDL_GameControllerOpen(event which).

        let convertedEvent mutable := GameControllerDeviceAddedEvent()
            which: event which;
            yourself.

        self broadcastEvent: convertedEvent
    }.

    method processGameControllerDeviceRemoved: (event: SDL_ControllerDeviceEvent const ref) ::=> Void := {
        event which < 0 || event which >= MaxGameControllerCount ifTrue: {return: void}.

        gameControllers[event which] ifNotNil: {
            SDL_GameControllerClose(gameControllers[event which]).
            gameControllers[event which] := nil.
        }.

        let convertedEvent mutable := GameControllerDeviceRemovedEvent()
            which: event which;
            yourself.

        self broadcastEvent: convertedEvent
    }.

    method processGameControllerDeviceRemapped: (event: SDL_ControllerDeviceEvent const ref) ::=> Void := {
        event which < 0 || event which >= MaxGameControllerCount ifTrue: {return: void}.

        let convertedEvent mutable := GameControllerDeviceRemappedEvent()
            which: event which;
            yourself.

        self broadcastEvent: convertedEvent
    }.

    method mapAxisValue: (value: Int16) ::=> Float32 := {
        let floatValue := (value castTo: Float32) / Int16 maxValue.
        let Threshold := 0.2f.
        floatValue >= Threshold ifTrue: {
            return: (floatValue - Threshold) / (1.0f - Threshold)
        }.
        floatValue <= Threshold negated ifTrue: {
            return: (floatValue + Threshold) / (1.0f - Threshold)
        }.

        0.0f
    }.

    method processGameControllerAxisMotion: (event: SDL_ControllerAxisEvent const ref) ::=> Void := {
        let convertedEvent mutable := GameControllerAxisMotionEvent()
            which: event which;
            axis: (event axis castTo: GameControllerAxis);
            value: (self mapAxisValue: event value);
            yourself.

        self broadcastEvent: convertedEvent
    }.

    method processGameControllerButtonDown: (event: SDL_ControllerButtonEvent const ref) ::=> Void := {
        let convertedEvent mutable := GameControllerButtonPressedEvent()
            which: event which;
            button: (event button castTo: GameControllerButton);
            yourself.

        self broadcastEvent: convertedEvent
    }.

    method processGameControllerButtonUp: (event: SDL_ControllerButtonEvent const ref) ::=> Void := {
        let convertedEvent mutable := GameControllerButtonReleasedEvent()
            which: event which;
            button: (event button castTo: GameControllerButton);
            yourself.

        self broadcastEvent: convertedEvent
    }.

    override method broadcastEvent: (event: Event ref) ::=> Void := {
        super broadcastEvent: event.
        windowIDDictionary valuesDo: {:(SDL2Window rcRef ref) window :: Void |
            window deliverEvent: event
        }
    }.

    method getConvertedCursorFor: (cursor: CursorRef const ref) ::=> SDL_Cursor pointer := {
        self getSystemCursor: cursor systemCursorName
    }.

    method getSystemCursor: (systemCursorName: SystemCursorName) ::=> SDL_Cursor pointer := {
        systemCursorName >= SystemCursorName Count ifTrue: {
            return: (self getSystemCursor: SystemCursorName Arrow)
        }.

        let result ref := allocatedSystemCursors[systemCursorName value].
        result ifNil: {
            let convertedName := convertSystemCursorName(systemCursorName).
            result := SDL_CreateSystemCursor(convertedName)
        }.

        result
    }.
}.

class SDL2WindowSystemFactory superclass: WindowsSystemFactory; definition: {
    const override method isHeadfull => Boolean8 := true.

    meta definition: {
        global Singleton mutable type: SDL2WindowSystemFactory.
    }.

    override method createWindowSystem => WindowSystem rcRef := {
        SDL2WindowSystem new upCastFor: WindowSystem.
    }.
}.

}. ## End of namespace GUI
}. ## End of namespace Graphics
}. ## End of namespace Std
