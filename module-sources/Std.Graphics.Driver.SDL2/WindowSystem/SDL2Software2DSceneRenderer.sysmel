namespace Std definition: {
namespace Graphics definition: {
namespace GUI definition: {

useNamespace: Std Graphics Core.
useNamespace: Std Graphics Driver SoftRenderer.
useNamespace: SDL2.

class SDL2Software2DSceneRenderer superclass: WindowScene2DRenderer; definition: {
    protected field window type: SDL2Window pointer.
    protected field rendererHandle type: SDL_Renderer pointer.
    protected field textureHandle type: SDL_Texture pointer.
    protected field textureExtent type: UInt32x2.
    protected field currentClearColor type: Float32x4.

    meta method for: (window: SDL2Window ref) ::=> SDL2Software2DSceneRenderer rcRef := {
        let renderer := SDL_CreateRenderer(window handle, -1, SDL_RENDERER_PRESENTVSYNC).
        renderer ifNil: {
            return: SDL2Software2DSceneRenderer rcRef nil
        }.

        SDL2Software2DSceneRenderer new
            initializeWithWindow: window address handle: renderer;
            yourself
    }.

    method initializeWithWindow: (theWindow: SDL2Window pointer) handle: (theRenderer: SDL_Renderer pointer) ::=> Void := {
        window := theWindow.
        rendererHandle := theRenderer.
    }.

    override method finalize => Void := {
        self destroy.
    }.

    override method destroy => Void := {
        textureHandle ifNotNil: {
            SDL_DestroyTexture(textureHandle).
            textureHandle := nil.
        }.

        rendererHandle ifNotNil: {
            SDL_DestroyRenderer(rendererHandle).
            rendererHandle := nil.
        }.

        window := nil.
    }.

    override method newSceneBuilder => Std Graphics Scene2D BuilderRef
        := SoftScene2DBuilder new upCastFor: Std Graphics Scene2D Builder.

    override method clearColor: (color: Float32x4) ::=> Void := {
        currentClearColor := color.
    }.

    override method renderScene: (rootNode: Std Graphics Scene2D NodeRef const ref) ::=> Void := {
        ## Apply the clear color.
        let convertedClearColor := Std Math Color encodeSRGBUnorm8(currentClearColor).
        SDL_SetRenderDrawColor(rendererHandle, convertedClearColor r, convertedClearColor g, convertedClearColor b, convertedClearColor a).
        SDL_RenderClear(rendererHandle).

        ## Render the scene into a texture, and then blit it into the screen.
        rootNode ifNotNil: {
            self doSceneRendering: rootNode
        }.
    }.

    method doSceneRendering: (rootNode: Std Graphics Scene2D NodeRef const ref) ::=> Void := {
        self validateTexture ifFalse: {
            return: void.
        }.

        let pixels mutable type: UInt8 pointer.
        let pitch mutable type: Int32.

        SDL_LockTexture(textureHandle, nil, pixels address reinterpretCastTo: Void pointer pointer, pitch address) = 0 ifFalse: {
            return: void.
        }.

        ## Create an external surface
        let surface mutable := ExternalSurface().
        surface pixelsBlitter := Blitter newValue
            extent: textureExtent;
            pitch: pitch;
            pixelFormat: PixelFormat B8G8R8A8_UNormSRGB;
            pixels: pixels;
            applyFullClippingBounds;
            initializeCachedState;
            yourself.

        ## Render on the external canvas.
        {
            let canvas := surface beginDrawingWithCanvas.
            canvas ifNil: { return: void }.
            canvas _
                color: currentClearColor;
                clear.

            let renderer mutable := Std Graphics Scene2D CanvasRenderer()
                canvas: canvas getPointer;
                yourself.
            renderer render: rootNode
        }.

        ## Unlock the texture
        SDL_UnlockTexture(textureHandle).

        ## Copy the texture
        SDL_RenderCopy(rendererHandle, textureHandle, nil, nil).
    }.

    override method present => Void := {
        ## Present the rendering output.
        SDL_RenderPresent(rendererHandle).
    }.

    method outputExtent => UInt32x2 := {
        let result mutable type: Int32x2.
        SDL_GetRendererOutputSize(rendererHandle, result x address, result y address).

        result castTo: UInt32x2
    }.

    method validateTexture => Boolean8 := {
        ## We need a renderer here.
        rendererHandle ifNil: {
            return: false.
        }.

        let requiredExtent := self outputExtent.
        textureHandle isNil || textureExtent x ~= requiredExtent x || textureExtent y ~= requiredExtent y ifTrue: {
            self createNewTextureWithExtent: requiredExtent
        }.

        textureHandle isNotNil.
    }.

    method createNewTextureWithExtent: (newExtent: UInt32x2) ::=> Void := {
        ## Destroy the old texture handle.
        textureHandle ifNotNil: {
            SDL_DestroyTexture(textureHandle).
            textureHandle := nil.
        }.

        textureHandle := SDL_CreateTexture(rendererHandle, SDL_PIXELFORMAT_BGRA32, SDL_TEXTUREACCESS_STREAMING, newExtent x castTo: Int32, newExtent y castTo: Int32).
        textureExtent := newExtent
    }.
}.

}. ## End of namespace GUI
}. ## End of namespace Graphics
}. ## End of namespace Std
