namespace Std definition: {
namespace Graphics definition: {
namespace GUI definition: {

class EventHandler.

#**
 * I represent a basic event for a window.
 * Different GUI toolkit should convert my instances into something more suitable for their specific behavior.
 *#
class Event definition: {
    virtual method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := void.
}.

#**
 * I am a ticking time notification. I am an event that is broadcasted into all
 * of the windows to give them an opportunity to redraw themselves.
 *#
class TickEvent superclass: Event; definition: {
    public field ticks type: Std Chrono Time.
    public field delta type: Std Chrono Time.
    public field mainLoopFrameCount type: UInt32.

    inline method seconds => Float64
        := Std Chrono ticksToFloatSeconds(ticks).

    inline method deltaSeconds => Float64
        := Std Chrono ticksToFloatSeconds(delta).

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onTickEvent: self.
}.

#**
 * I am a keyboard event.
 *#
class KeyboardEvent superclass: Event; definition: {
    public field symbol type: KeySymbol.
    public field modifiers type: KeyModifiers.
    public field isRepeat type: Boolean8.
}.

#**
 * I am a key pressed event.
 *#
class KeyPressedEvent superclass: KeyboardEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onKeyPressedEvent: self.
}.

#**
 * I am a key released event.
 *#
class KeyReleasedEvent superclass: KeyboardEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onKeyReleasedEvent: self.
}.

#**
 * I am a text input event
 *#
class TextInputEvent superclass: Event; definition: {
    public field text type: Std String.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onTextInputEvent: self.
}.

#**
 * I am a mouse move event.
 *#
class MouseEvent superclass: Event; definition: {
    public field mouseId type: UInt32.
    public field position type: Float32x2.
    public field modifiers type: KeyModifiers.
}.

#**
 * I am a mouse enter event.
 *#
class MouseEnterEvent superclass: MouseEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onMouseEnterEvent: self.
}.

#**
 * I am a mouse enter event.
 *#
class MouseLeaveEvent superclass: MouseEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onMouseLeaveEvent: self.
}.

#**
 * I am a mouse move event.
 *#
class MouseMoveEvent superclass: MouseEvent; definition: {
    public field buttonState type: MouseButtonMask.
    public field delta type: Float32x2.

    const inline method isLeftButtonPressed => Boolean8
        := buttonState anyMask: MouseButtonMask Left.

    const inline method isMiddleButtonPressed => Boolean8
        := buttonState anyMask: MouseButtonMask Middle.

    const inline method isRightButtonPressed => Boolean8
        := buttonState anyMask: MouseButtonMask Right.

    const inline method isX1ButtonPressed => Boolean8
        := buttonState anyMask: MouseButtonMask X1.

    const inline method isX2ButtonPressed => Boolean8
        := buttonState anyMask: MouseButtonMask X2.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onMouseMoveEvent: self.
}.

#**
 * I am a mouse button event.
 *#
class MouseButtonEvent superclass: MouseEvent; definition: {
    public field button type: MouseButton.
    public field clickCount type: UInt8.

    const inline method isLeftButton => Boolean8
        := button = MouseButton Left.

    const inline method isMiddleButton => Boolean8
        := button = MouseButton Middle.

    const inline method isRightButton => Boolean8
        := button = MouseButton Right.

    const inline method isX1Button => Boolean8
        := button = MouseButton X1.

    const inline method isX2Button => Boolean8
        := button = MouseButton X2.
}.

#**
 * I am a mouse wheel event.
 *#
class MouseWheelEvent superclass: MouseEvent; definition: {
    public field scrollDelta type: Float32x2.
    public field isFlipped type: Boolean8.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onMouseWheelEvent: self.
}.

#**
 * I am a mouse button pressed event.
 *#
class MouseButtonPressedEvent superclass: MouseButtonEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onMouseButtonPressedEvent: self.
}.

#**
 * I am a mouse button down event.
 *#
class MouseButtonReleasedEvent superclass: MouseButtonEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onMouseButtonReleasedEvent: self.
}.

#**
 * I am an expose event. I am sent when a Window needs to be redraw.
 *#
class ExposeEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onExposeEvent: self.

}.

#**
 * I am a window close requestevent. I am sent when the close button of a window is hit.
 *#
class WindowCloseRequestEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowCloseRequestEvent: self.
}.

#**
 * I am a window moved event.
 *#
class WindowMovedEvent superclass: Event; definition: {
    public field newPosition type: Float32x2.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowMovedEvent: self.
}.

#**
 * I am a window resizing event.
 *#
class WindowResizingEvent superclass: Event; definition: {
    public field newSize type: Float32x2.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowResizingEvent: self.
}.

#**
 * I am a window size changed event.
 *#
class WindowSizeChangedEvent superclass: Event; definition: {
    public field newSize type: Float32x2.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowSizeChangedEvent: self.
}.

#**
 * I am a window shown event.
 *#
class WindowShownEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowShownEvent: self.
}.

#**
 * I am a window hidden event.
 *#
class WindowHiddenEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowHiddenEvent: self.
}.

#**
 * I am a window minimized event.
 *#
class WindowMinimizedEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowMinimizedEvent: self.
}.

#**
 * I am a window maximized event.
 *#
class WindowMaximizedEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowMaximizedEvent: self.
}.

#**
 * I am a window restored event.
 *#
class WindowRestoredEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowRestoredEvent: self.
}.

#**
 * I am a window got focus event.
 *#
class WindowGotFocusEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowGotFocusEvent: self.
}.

#**
 * I am a window lost focus event.
 *#
class WindowLostFocusEvent superclass: Event; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onWindowLostFocusEvent: self.
}.

#**
 * I am a game controller device event.
 *#
class GameControllerDeviceEvent superclass: Event; definition: {
}.

#**
 * I am a game controller event.
 *#
class GameControllerEvent superclass: Event; definition: {
    public field which type: Int32.
}.

#**
 * I am a game controller device event.
 *#
class GameControllerDeviceAddedEvent superclass: GameControllerEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onGameControllerDeviceAddedEvent: self.
}.

#**
 * I am a game controller device event.
 *#
class GameControllerDeviceRemovedEvent superclass: GameControllerEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onGameControllerDeviceRemovedEvent: self.
}.

#**
 * I am a game controller device event.
 *#
class GameControllerDeviceRemappedEvent superclass: GameControllerEvent; definition: {
    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onGameControllerDeviceRemappedEvent: self.
}.

#**
 * I am a game controller axis event.
 *#
class GameControllerAxisMotionEvent superclass: GameControllerEvent; definition: {
    public field axis type: GameControllerAxis.
    public field value type: Float32.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onGameControllerAxisMotionEvent: self.
}.

#**
 * I am a game controller button event.
 *#
class GameControllerButtonEvent superclass: GameControllerEvent; definition: {
    public field button type: GameControllerButton.
}.

#**
 * I am a game controller button pressed event.
 *#
class GameControllerButtonPressedEvent superclass: GameControllerButtonEvent; definition: {
    public field button type: GameControllerButton.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onGameControllerButtonPressedEvent: self.
}.

#**
 * I am a game controller button released event.
 *#
class GameControllerButtonReleasedEvent superclass: GameControllerButtonEvent; definition: {
    public field button type: GameControllerButton.

    override method acceptEventHandler: (eventHandler: EventHandler ref) ::=> Void
        := eventHandler onGameControllerButtonReleasedEvent: self.
}.

}. ## End of namespace GUI
}. ## End of namespace Graphics
}. ## End of namespace Std
