namespace Stdn definition: {
namespace Graphics definition: {
namespace DriverAGPU definition: {

useNamespace: Stdn Graphics Core.

#**
 * I am a agpu based device.
 *#
class AgpuVertexBinding superclass: VertexBinding; definition: {
    public field handle type: AGPU VertexBindingRef.

    override method bindVertexBuffers: (theVertexBuffers: VertexBuffers) ::=> Void := {
        let convertedBuffers mutable type: Stdn Collections Vector(AGPU BufferRef).
        convertedBuffers reserve: theVertexBuffers size.
        theVertexBuffers do: {:each :: Void |
            (each getPointer castTo: AgpuBuffer pointer) ifNil: {
                convertedBuffers add: AGPU BufferRef()
            } ifNotNil: {:bufferPointer :: Void |
                convertedBuffers add: bufferPointer _ handle
            }
        }.

        handle _ bindVertexBuffers: (convertedBuffers size castTo: UInt32) vertexBuffers: convertedBuffers data
    }.

    override method bindVertexBuffers: (theVertexBuffers: VertexBuffers) offset: (offsets: Offsets) ::=> Void := {
        Stdn assert: theVertexBuffers size = offsets size.

        let convertedBuffers mutable type: Stdn Collections Vector(AGPU BufferRef).
        convertedBuffers reserve: theVertexBuffers size.
        theVertexBuffers do: {:each :: Void |
            (each getPointer castTo: AgpuBuffer pointer) ifNil: {
                convertedBuffers add: AGPU BufferRef()
            } ifNotNil: {:bufferPointer :: Void |
                convertedBuffers add: bufferPointer _ handle
            }
        }.

        handle _ bindVertexBuffersWithOffsets: (convertedBuffers size castTo: UInt32) vertexBuffers: convertedBuffers data offsets: (offsets elements reinterpretCastTo: UInt32 pointer)

    }.
}.

compileTime constant AgpuVertexBindingPtr := AgpuVertexBinding sharedPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
