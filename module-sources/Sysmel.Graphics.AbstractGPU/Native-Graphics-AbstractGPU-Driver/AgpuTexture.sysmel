namespace Stdn definition: {
namespace Graphics definition: {
namespace DriverAGPU definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math Geometry.

#**
 * I am a agpu based device.
 *#
sealed class AgpuTexture superclass: Texture; definition: {
    public field handle type: AGPU TextureRef.
    public field creationDescription type: TextureDescription.

    protected field fullTextureView type: TextureViewPtr.
    protected field fullTextureViewOnceFlag type: Stdn OnceFlag.


    override method description => TextureDescription
        := creationDescription.

    override method mapLevel: (level: UIntPointer) layer: (layer: UIntPointer) accessMask: (access: MappingAccessMask) region: (region: RectangleI32 const pointer) ::=> Void pointer := {
        nil
    }.

    override method unmapLevel => Void := {

    }.

    override method readTextureLevel: (level: UIntPointer) layer: (layer: UIntPointer) pitch: (pitch: IntPointer) slicePitch: (slicePitch: IntPointer) buffer: (buffer: Void pointer) ::=> Void := {
    }.

    override method readTextureLevel: (level: UIntPointer) layer: (layer: UIntPointer) pitch: (pitch: IntPointer) slicePitch: (slicePitch: IntPointer)
        sourceRegion: (sourceRegion: RectangleI32 const pointer) destExtent: (destExtent: UInt32x3 pointer) buffer: (buffer: Void pointer) ::=> Void := {

    }.

    override method uploadTextureLevel: (level: UIntPointer) layer: (layer: UIntPointer) pitch: (pitch: IntPointer) slicePitch: (slicePitch: IntPointer) data: (data: Void const pointer) ::=> Void := {
    }.

    override method uploadTextureLevel: (level: UIntPointer) layer: (layer: UIntPointer) pitch: (pitch: IntPointer) slicePitch: (slicePitch: IntPointer)
        sourceRegion: (sourceRegion: RectangleI32 const pointer) destExtent: (destExtent: UInt32x3 pointer) data: (data: Void const pointer) ::=> Void := {

    }.

    override method getFullViewDescription => TextureViewDescription := {
        TextureViewDescription()
            type: creationDescription type;
            format: creationDescription format;
            sampleCount: creationDescription sampleCount;
            subresourceRange: (TextureSubResourceRange()
                usageModes: creationDescription mainUsageMode;
                levelCount: creationDescription miplevels;
                layerCount: (creationDescription layers > 1 ifTrue: creationDescription layers ifFalse: 0u);
                yourself);
            yourself
    }.

    override method createView: (viewDescription: TextureViewDescription const ref) ::=> TextureViewPtr := {
        let convertedViewDescription mutable := AGPU TextureViewDescription()
            type: (viewDescription type castTo: AGPU TextureType);
            format: (viewDescription format castTo: AGPU TextureFormat);
            sample_count: viewDescription sampleCount;
            components: (AGPU ComponentsSwizzle()
                r: (viewDescription components r castTo: AGPU ComponentSwizzle);
                g: (viewDescription components g castTo: AGPU ComponentSwizzle);
                b: (viewDescription components b castTo: AGPU ComponentSwizzle);
                a: (viewDescription components a castTo: AGPU ComponentSwizzle);
                yourself);
            subresource_range: (AGPU SubresourceRange()
                usage_mode: (viewDescription subresourceRange usageModes castTo: AGPU TextureUsageModeMask);
                base_miplevel: viewDescription subresourceRange baseMipLevel;
                level_count: viewDescription subresourceRange levelCount;
                base_arraylayer: viewDescription subresourceRange baseArrayLayer;
                layer_count: viewDescription subresourceRange layerCount;
                yourself
            );
            yourself.

        let viewHandle := handle _ createView: convertedViewDescription address.
        viewHandle ifNil: {
            return: TextureViewPtr nil
        }.

        let result := AgpuTextureView sharedNew.
        result _ handle: viewHandle.
        result upCastFor: TextureView
    }.

    override method getOrCreateFullView => TextureViewPtr := {
        fullTextureViewOnceFlag do: {
            fullTextureView := self createView: self getFullViewDescription
        }.

        fullTextureView
    }.
}.

compileTime constant AgpuTexturePtr := AgpuTexture sharedPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
