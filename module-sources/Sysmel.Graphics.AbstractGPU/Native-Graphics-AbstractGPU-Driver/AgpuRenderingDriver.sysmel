namespace Stdn definition: {
namespace Graphics definition: {
namespace DriverAGPU definition: {

useNamespace: Stdn Graphics Core.

#**
 * I am a agpu based driver.
 *#
sealed class AgpuRenderingDriver superclass: RenderingDriver; definition: {
    override method initialize => Void := {
        RenderingDriverRegistry default registerDriver: self address
    }.

    override method finalize => Void := {
        RenderingDriverRegistry default unregisterDriver: self address
    }.

    field mainDevice type: AgpuRenderingDevice sharedPointer.

    meta definition: {
        global Singleton mutable type: AgpuRenderingDriver.
    }.

    method createDefaultDevice => AgpuRenderingDevicePtr := {
        ## Find the platform.
        let agpuPlatform mutable type: AGPU Platform pointer.
        AGPU agpuGetPlatforms(1, agpuPlatform address, nil).
        agpuPlatform ifNil: {
            Stdn stderr << "Failed to get AGPU platform"; nl.
            return: AgpuRenderingDevicePtr nil.
        }.

        let deviceOpenInfo mutable := AGPU DeviceOpenInfo()
            debug_layer: 1;
            yourself.

        let deviceHandle := agpuPlatform _ openDevice: deviceOpenInfo address.
        deviceHandle ifNil: {
            Stdn stderr << "Failed to open the device"; nl.
            return: AgpuRenderingDevicePtr nil.
        }.

        let result := AgpuRenderingDevice sharedNew.
        result _ initializeWithHandle: deviceHandle.
        result
    }.

    const override method isHardwareRenderingDriver => Boolean8
        := true.

    override method getMainDevice => RenderingDevice sharedPointer := {
        mainDevice ifNil: {
            mainDevice := self createDefaultDevice.
        }.

        mainDevice upCastFor: RenderingDevice
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
