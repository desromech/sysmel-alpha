namespace Stdn definition: {
namespace Testing definition: {

class TestCaseTestFactory definition: {
    abstract method name => StringLiteral.
    abstract method execute => Void.
}.

class TestCaseFactory definition: {
    public field testFactories type: Stdn Collections Vector(TestCaseTestFactory pointer).

    method initialize => Void := {
        TestRunner defaultInstance registerTestCaseFactory: self address
    }.

    method finalize => Void := {
        TestRunner defaultInstance unregisterTestCaseFactory: self address
    }.

    abstract method name => StringLiteral.

    method addTestFactory: (testFactory: TestCaseTestFactory pointer) ::=> Void := {
        ## Assume this only happens in a single module, on module loading time
        ## and that this does not produce a race condition.
        testFactories add: testFactory.
    }.
}.

template TestCaseInstanceFactory(TC: Type)
    := sealed class superclass: TestCaseFactory; definition: {

    compileTime constant TestCaseClass := TC.

    global Factory mutable type: SelfType.

    override method name => StringLiteral
        := TestCaseClass qualifiedName.
}.

template TestCaseTestInstanceFactory(TC: Type, TS: _LiteralSymbol)
    := sealed class superclass: TestCaseTestFactory; definition: {

    compileTime constant TestCaseClass := TC.
    compileTime constant TestSelector := TS.

    global Factory mutable type: SelfType.

    method initialize => Void := {
        TestCaseInstanceFactory(TC) Factory addTestFactory: self address.
    }.

    override method name => StringLiteral
        := TestSelector.

    override method execute => Void := {
        let testCase mutable := TestCaseClass sharedNew.
        testCase _ perform: TestSelector

    }.
}.

#**
 * I a class that takes care of running tests.
 *#
class TestRunner superclass: Object; definition: {
    meta definition: {
        let defaultInstance mutable type: TestRunner uniquePointer.
        let defaultInstanceOnceCreation mutable type: Stdn OnceFlag.

        method defaultInstance => TestRunner ref := {
            defaultInstanceOnceCreation do: {
                defaultInstance reset: TestRunner nativeNew
            }.

            defaultInstance _
        }.

        macro method registerTestCase: TestCaseClass testNamed: testName := ``{
            Stdn Testing TestCaseTestInstanceFactory(`,TestCaseClass, `,testName)
        }.
    }.

    field testRunnerMutex type: Stdn Mutex.
    field testCaseFactories type: Stdn Collections Vector(TestCaseFactory pointer).

    public field errorTestCount type: UInt32.
    public field failingTestCount type: UInt32.
    public field passingTestCount type: UInt32.
    public field skippedTestCount type: UInt32.
    field isCurrentTestPassing type: Boolean8.

    method runningTestCount => UInt32
        := errorTestCount + failingTestCount + passingTestCount.

    method registerTestCaseFactory: (factory: TestCaseFactory pointer) ::=> Void := {
        testRunnerMutex withLock: {
            testCaseFactories add: factory
        }.
    }.

    method unregisterTestCaseFactory: (factory: TestCaseFactory pointer) ::=> Void := {
        testRunnerMutex withLock: {
            testCaseFactories remove: factory
        }
    }.

    method runAllTests => Boolean8 := {
        let casesToRun mutable type: Stdn Collections Vector(TestCaseFactory pointer).
        testRunnerMutex withLock: {
            casesToRun := testCaseFactories
        }.

        casesToRun do: {:testCase :: Void |
            self runTestCase: testCase
        }.

        Stdn stdout << "==============================================="; nl.
        Stdn stdout << "Test execution report:"; nl.
        Stdn stdout << "==============================================="; nl.
        Stdn stdout << "Running test count: " << self runningTestCount; nl.
        self skippedTestCount > 0 ifTrue: {
            Stdn stdout << "Skipped test count: " << self skippedTestCount; nl.
        }.
        self failingTestCount > 0 ifTrue: {
            Stdn stdout << "Failing test count: " << self failingTestCount; nl.
        }.
        self errorTestCount > 0 ifTrue: {
            Stdn stdout << "Error test count: " << self errorTestCount; nl.
        }.
        Stdn stdout << "Passing test count: " << self passingTestCount; nl.

        self failingTestCount == 0 && self errorTestCount == 0.
    }.

    method runTestCase: (factory: TestCaseFactory pointer) ::=> Void := {
        Stdn stdout << "--- Running test case " << factory _ name; nl.
        factory _ testFactories do: {:testCaseTestFactory :: Void |
            self runTestCaseTest: testCaseTestFactory
        }
    }.

    method runTestCaseTest: (factory: TestCaseTestFactory pointer) ::=> Void := {
        Stdn stdout << factory _ name << "... ".
        Stdn stdout flush.

        isCurrentTestPassing := true.
        self runTestCaseCatchingSmalltalkExceptions: factory.
        isCurrentTestPassing ifTrue: {
            Stdn stdout << "Passing."; nl.
        }.

        self countPassingTest.
    }.

    method runTestCaseCatchingSmalltalkExceptions: (factory: TestCaseTestFactory pointer) ::=> Void := {
        self runTestCaseCatchingNativeExceptions: factory.
    }.

    method runTestCaseCatchingNativeExceptions: (factory: TestCaseTestFactory pointer) ::=> Void := {
        try: {
            try: {
                try: {
                    factory _ execute
                } catch: TestSkipException doing: {:exception :: Void |
                    self countSkippedTest.
                    Stdn stdout << "Skipped."; nl.
                }
            } catch: Stdn AssertionFailure doing: {:exception :: Void |
                self countFailingTest.
                Stdn stdout << "Failure:"; nl.
                Stdn stdout << exception; nl.
            }
        } catch: Stdn Error doing: {:exception :: Void |
            self countErrorTest.
            Stdn stdout << "Error:"; nl.
            Stdn stdout << exception; nl.
        }
    }.

    method countPassingTest => Void := {
        isCurrentTestPassing ifTrue: {
            passingTestCount := passingTestCount + 1
        }
    }.

    method countErrorTest => Void := {
        errorTestCount := errorTestCount + 1.
        isCurrentTestPassing  := false.
    }.

    method countFailingTest => Void := {
        failingTestCount := failingTestCount + 1.
        isCurrentTestPassing  := false.
    }.

    method countSkippedTest => Void := {
        skippedTestCount := skippedTestCount + 1.
        isCurrentTestPassing  := false.
    }.
}.

} ## End of namespace Testing
} ## End of namespace Stdn
