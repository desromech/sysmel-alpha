namespace Std definition: {
namespace Testing definition: {

#**
 * I am a class that is used for writing tests for native code
 *#
class TestCase superclass: TestAsserter; definition: {
    meta macro method test: testIdentifier with: body := {
        let testIdentifierSymbol := testIdentifier asLiteralSymbolNodeFor: Compiler compilationTarget.

        ``{
            ## Create the test method.
            method `,testIdentifierSymbol => Void := `,body.

            ## Register the test case and the test method with the TestRunner.
            Std Testing TestRunner registerTestCase: `,self instanceType testNamed: `,testIdentifierSymbol
        }.
    }.

    override method initialize => Void := {
        self setUp.
    }.

    override method finalize => Void := {
        self tearDown.
    }.

    method skip => Void := {
        let exception mutable type: TestSkipException.
        exception signal
    }.

    #**
     * This is the place for setting up resources specific for a test case. This method is automatically called by the initializer.
     *#
    virtual method setUp => Void := {
    }.

    #**
     * This is the place for setting up resources specific for a test case. This method is automatically called by the finalizer.
     *#
    virtual method tearDown => Void := {
    }.

}.


} ## End of namespace Testing
} ## End of namespace Std
