namespace Std definition: {
namespace Graphics definition: {
namespace GUI definition: {

useNamespace: Std Graphics Core.

#**
 * I represent an interface into a window system window.
 *#
class Window superclass: Std RCObject; definition: {
    public field eventHandler type: EventHandler rcRef.
    public field animated type: Boolean8.
    public field vsyncDisabled type: Boolean8.

    virtual method windowSystem => WindowSystemRef
        := WindowSystemRef nil.

    #**
     * This method closes the window.
     *#
    virtual method close => Void
        := void.

    #**
     * This method delivers an event into an event handler that is present in the window.
     *#
    virtual method deliverEvent: (event: Event ref) ::=> Void := {
        eventHandler ifNotNil: {
            eventHandler processEvent: event
        }
    }.

    abstract method extent => UInt32x2.

    #**
     * This method creates gets or creates a default rendering device.
     *#
    abstract method renderingDevice => RenderingDeviceRef.

    #**
     * This method sets a particular rendering device that should be used with this window.
     * This rendering device is used for creating a swap chain suitable for this window.
     *#
    abstract method renderingDevice: (theRenderingDevice: RenderingDeviceRef const ref) ::=> Void.

    #**
     * This method creates a swap chain with the specified properties for the
     * rendering framebuffer. This method is free to actually resize the swap chain
     * into the actual size of the window.
     * The client is responsible on creating a new swap chain if the swap chain becomes out of date.
     *#
    abstract method createSwapChain: (swapChainCreationInfo: SwapChainCreationInfo const ref) for: (renderingQueue: CommandQueueRef const ref) ::=> SwapChainRef.

    #**
     * This method creates a scene 2D graph renderer specific for this window.
     * The windowing backend will choose a backend that is compatible with the current window rendering device.
     *#
    abstract method createScene2DRenderer => WindowScene2DRendererRef.

    #**
     * This method takes capture of grabbing a mouse capture.
     *#
    virtual method grabMouseCapture => Void := {

    }.

    #**
     * This method takes capture of grabbing a mouse capture.
     *#
    virtual method releaseMouseCapture => Void := {

    }.

    #**
     * This method sets the cursor that is active on the window.
     *#
    virtual method setCursor: (cursor: Cursor rcPointer const ref) ::=> Void := {

    }.

    #**
     * This method gets the fullscreen state of the window.
     *#
    virtual method fullscreen => Boolean8
        := false.

    #**
     * This method sets the fullscreen state of the window.
     *#
    virtual method fullscreen: (newValue: Boolean8) ::=> Void := {

    }.

    #**
     * This method toggles the fullscreen state of the window.
     *#
    virtual method toggleFullscreen => Void := {

    }.
}.

compileTime constant WindowRef := Window rcRef.
compileTime constant WindowWeakRef := Window weakRCRef.

}. ## End of namespace GUI
}. ## End of namespace Graphics
}. ## End of namespace Std
