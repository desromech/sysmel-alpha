namespace Std definition: {
namespace Graphics definition: {
namespace GUI definition: {

class Window.
class WindowCreationInfo.

#**
 * I represent an interface into a window system window.
 *#
class WindowSystem superclass: Std RCObject; definition: {
    protected field globalEventHandlers type: Std Collections Vector(EventHandlerPtr).

    meta definition: {
        global MainWindowSystem mutable type: WindowSystemRef.

        static method activeWindowSystem: (aWindowSystem: WindowSystemRef const ref) ::=> Void
            := MainWindowSystem := aWindowSystem.

        static method activeWindowSystem => WindowSystemRef
            := MainWindowSystem.

        static method mainLoopOfStarted: (windowSystem: WindowSystem ref) ::=> Void := {
            MainWindowSystem ifNil: {
                MainWindowSystem := windowSystem asRCRef
            }
        }.

        static method mainLoopOfEnded: (windowSystem: WindowSystem ref) ::=> Void := {
            MainWindowSystem __rcPointer__ getPointer == windowSystem address ifTrue: {
                MainWindowSystem := WindowSystemRef nil
            }
        }.
    }.

    method registerGlobalEventHandler: (globalHandler: EventHandlerRef const ref) ::=> Void := {
        globalEventHandlers add: globalHandler asRCPointer
    }.

    method unregisterGlobalEventHandler: (globalHandler: EventHandlerRef const ref) ::=> Void := {
        globalEventHandlers remove: globalHandler asRCPointer
    }.

    virtual method createWindow: (description: WindowCreationInfo const ref) ::=> Window rcRef
        := Window rcRef nil.

    virtual method createWindowWithTitle: (title: Std String const ref) extent: (extent: Int32x2) ::=> Window rcRef := {
        self createWindow: (WindowCreationInfo()
            title: title;
            extent: extent;
            yourself).
    }.

    virtual method createWindowWithTitle: (title: Std String const ref) position: (position: Int32x2) extent: (extent: Int32x2) ::=> Window rcRef := {
        self createWindow: (WindowCreationInfo()
            title: title;
            position: position;
            extent: extent;
            yourself).
    }.

    ## Do we have to finish the main loop?
    virtual method isQuitting => Boolean8
        := false.

    protected field mainLoopOldTicks type: Std Chrono Time.
    protected field mainLoopAccumulatedTicks type: Std Chrono Time.
    protected field mainLoopFrameStartTicks type: Std Chrono Time.
    protected field mainLoopStartTicks type: Std Chrono Time.
    protected field mainLoopDeterministicsTicks type: Std Chrono Time.
    protected field mainLoopFrameCount type: UInt32.

    const method mainLoopFrameCount => UInt32
        := mainLoopFrameCount.

    ## Run the default main loop.
    virtual method runMainLoop => Int32 := {
        try: {
            SelfType mainLoopOfStarted: self.
            mainLoopOldTicks := Std Chrono now().
            mainLoopAccumulatedTicks := 0.
            mainLoopStartTicks := Std Chrono now().

            compileTime if: Compiler compilationTarget isWebAssembly then: {
                Emscripten emscripten_set_main_loop_arg(windowSystemMainLoopCallback address, self address, 0, 1).
            } else: {

                until: self isQuitting do: {
                    self mainLoopIteration.

                    self sleepUntilNextFrame.
                }.
            }.
        }
        finally: {
            SelfType mainLoopOfEnded: self
        }.

        return: 0
    }.

    virtual method hasAnimatedWindow => Boolean8
        := false.

    virtual method sleepUntilNextFrame => Void := {
        self hasAnimatedWindow ifTrue: {
            self waitForVSync
        } ifFalse: {
            self waitForNextEventOrTimeout.
        }.
    }.

    #**
     * A single iteration of the main loop.
     *#
    virtual method mainLoopIteration => Void := {
        mainLoopFrameStartTicks := Std Chrono now().
        self pollAndPumpEvents.

        let deltaTicks mutable := mainLoopFrameStartTicks - mainLoopOldTicks.

        ## Send the tick events
        {
            let event mutable type: TickEvent.
            event
                ticks: mainLoopFrameStartTicks - mainLoopStartTicks;
                mainLoopFrameCount: mainLoopFrameCount;
                delta: deltaTicks.
            self broadcastEvent: event.
        }.

        mainLoopFrameCount := mainLoopFrameCount + 1.
        mainLoopOldTicks := mainLoopFrameStartTicks.
    }.

    #**
     * Poll for events non-blockingly and then pump the events into the actual windows.
     *#
    virtual method pollAndPumpEvents => Void := {

    }.

    #**
     * Wait for vsync.
     *#
    virtual method waitForVSync => Void := {

    }.

    #**
     * Wait and pump the next, or until something times out.
     *#
    virtual method waitForNextEventOrTimeout => Void := {

    }.

    #**
     * Broadcast and event into all of the windows.
     *#
    virtual method broadcastEvent: (event: Event ref) ::=> Void := {
        globalEventHandlers do: {:each :: Void |
            each _ processEvent: event.
        }
    }.
}.

compileTime if: Compiler compilationTarget isWebAssembly then: {
function windowSystemMainLoopCallback(windowSystemPointer: Void pointer) => Void := {
    (windowSystemPointer reinterpretCastTo: WindowSystem pointer) _ mainLoopIteration
}.
}.

compileTime constant WindowSystemRef := WindowSystem rcRef.
compileTime constant WindowSystemWeakRef := WindowSystem weakRCRef.

## The main global window system. This one is used by the Smalltalk style IDE tools.

}. ## End of namespace GUI
}. ## End of namespace Graphics
}. ## End of namespace Std
