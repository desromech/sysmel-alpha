namespace Stdn definition: {
namespace Graphics definition: {
namespace FT2Bindings definition: {

useNamespace: Stdn Graphics Core.
useNamespace: FreeType2.

class FT2FontFace.

class FT2FontFaceSize superclass: FontFaceSize; definition: {
    public field handle type: FT_Size.
    public field face type: FT2FontFace pointer.
    private field glyphs type: Stdn Collections Dictionary(Char32, BitmapGlyph sharedPointer).

    override method finalize => Void := {
        self releaseHandle.
    }.

    method releaseHandle => Void := {
        handle ifNotNil: {
            FT_Done_Size(handle).
            handle := nil.
        }
    }.

    method createGlyphForIndex: (glyphIndex: UInt32) ::=> BitmapGlyph sharedPointer := {
        Stdn stdout << "Glyph index " << glyphIndex; nl.
        let error mutable := FT_Load_Glyph(face _ handle, glyphIndex, 0).
        convertError(error) ifTrue: {
            return: BitmapGlyph sharedPointer nil
        }.

        let glyphSlot := face _ handle _ glyph.
        error := FT_Render_Glyph(glyphSlot, FT_Render_Mode Normal).
        convertError(error) ifTrue: {
            return: BitmapGlyph sharedPointer nil
        }.

        let glyphBitmap ref := glyphSlot _ bitmap.

        ## Create glyph form.
        let form mutable := Form extent: UInt32x2(glyphBitmap width, glyphBitmap rows) pixelFormat: PixelFormat A8_UNorm.
        {
            let destRow mutable := form _ makeBlitter makeUnsafePixelIterator.
            let sourceRow mutable := glyphBitmap buffer reinterpretCastTo: UInt8 pointer.
            let sourcePitch := glyphBitmap pitch.
            0 until: glyphBitmap rows do: {:(UInt32)y :: Void |
                Stdn memcpy(destRow pixels, sourceRow, glyphBitmap width).
                destRow advanceRow.
                sourceRow := sourceRow + sourcePitch
            }.
        }.

        ## Create the bitmap glyph form.
        let bitmapGlyph mutable := BitmapGlyph sharedNew.
        bitmapGlyph _
            extent: form _ extent;
            form: form.

        bitmapGlyph
    }.

    method createGlyphForCodePoint: (codePoint: Char32) ::=> BitmapGlyph sharedPointer := {
        self createGlyphForIndex: FT_Get_Char_Index(face _ handle, codePoint)
    }.

    method getOrCreateGlyphForCodePoint: (codePoint: Char32) ::=> BitmapGlyph sharedPointer := {
        glyphs at: codePoint ifAbsentPut: { :: (BitmapGlyph sharedPointer) |
            self createGlyphForCodePoint: codePoint
        }
    }.
}

}. ## End of namespace Text
}. ## End of namespace Graphics
}. ## End of namespace Stdn
