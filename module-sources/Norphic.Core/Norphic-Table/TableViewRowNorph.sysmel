namespace Norphic definition: {

useNamespace: Std Math Geometry.

#**
 * I am a table row view norph. I am a container for a single row in the table.
 *#
class TableViewRowNorph superclass: Norph; definition: {
    compileTime constant Columns := TableViewNorph Columns.
    compileTime constant Cells := Std Collections Vector(Norph rcRef).

    public field rowIndex type: UIntPointer.
    protected field cells type: Cells.

    const method tableViewNorph => TableViewNorph rcRef
        := self owner owner downCastFor: TableViewNorph.

    const method dataSource => DataSourceRef const ref
        := self tableViewNorph dataSource.

    const method columns => Columns const ref
        := self tableViewNorph columns.

    override method defaultColor => Float32x4
        := Float32x4 zeros.

    override method initialize => Void := {
        self autolayout: true
    }.

    override method color => Float32x4 := {
        self isSelected ifTrue: {
            self theme tableRowSelectedColor
        } ifFalse: {
            self hasMouseFocus ifTrue: {
                self theme tableRowHighlightColor
            } ifFalse: {
                super color.
            }
        }
    }.

    override method onMouseEnterEvent: (event: NorphMouseEnterEvent ref) ::=> Void := {
        super onMouseEnterEvent: event.
        self changed.
    }.

    override method onMouseLeaveEvent: (event: NorphMouseLeaveEvent ref) ::=> Void := {
        super onMouseLeaveEvent: event.
        self changed.
    }.

    override method onMouseButtonPressedEvent: (event: NorphMouseButtonPressedEvent ref) ::=> Void := {
        super onMouseButtonPressedEvent: event.
        event isLeftButton && event wasHandled not ifTrue: {
            self tableViewNorph rowClicked: rowIndex
        }.
    }.

    method isSelected => Boolean8
        := self tableViewNorph isRowSelected: rowIndex.

    override method updateLayout => Void := {
        let cellX mutable := 0.0f.
        let cellHeight := self extent y.
        self columns doWithIndex: {:each :cellIndex :: Void |
            let cellWidth := each width.
            cells[cellIndex] bounds: (RectangleF32 min: Float32x2(cellX, 0.0f) extent: Float32x2(cellWidth, cellHeight)).

            cellX := cellX + cellWidth.
        }.
    }.

    method updateContent => Void := {
        let dataSource ref := self dataSource.
        dataSource ifNil: {
            return: void.
        }.

        let element := dataSource elementAtRow: rowIndex.
        self columns doWithIndex: {:each :cellIndex :: Void |
            each updateCellNorph: cells[cellIndex] withElement: element
        }
    }.

    method createCells => Void := {
        self columns do: {:each :: Void |
            let cell := each createCellNorph.
            self addSubnorph: (cell upCastFor: Norph).
            cells add: cell.
        }.
    }.
}.

compileTime constant TableViewRowNorphRef := TableViewRowNorph rcRef.

}. ## End of namespace Norphic
