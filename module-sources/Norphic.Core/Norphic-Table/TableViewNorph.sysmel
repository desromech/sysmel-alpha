namespace Norphic definition: {

#**
 * I am a table view norph.
 *#
class TableViewNorph superclass: BorderedNorph; definition: {
    compileTime constant Columns := Std Collections Vector(TableViewColumnRef).
    compileTime constant RowSelection := Std Collections Vector(UIntPointer).

    protected field dataSource type: DataSourceRef.
    protected field columns type: Columns.
    protected field headerNorph type: TableViewHeaderNorph rcRef.
    protected field contentNorph type: TableViewContentNorph rcRef.
    protected field minimalRowExtent type: Float32x2.
    protected field selectedRows type: RowSelection.

    override method initialize => Void := {
        contentNorph := TableViewContentNorph new.
        self addSubnorph: (contentNorph upCastFor: Norph).

        self
            sizer: (VerticalBoxSizer new
                element: contentNorph with: {:(SizerElementRef const ref)constraints :: Void |
                    constraints expanded; allBorders; borderSize: 2; proportion: 1.0.
                };
                upCastFor: Sizer);
            autolayout: true;
            updateLayout.
    }.

    override method handlesKeyboardEvents => Boolean8
        := true.

    method withColumnHeaders => Void := {
        headerNorph ifNotNil: { return: void. }.

        headerNorph := TableViewHeaderNorph new.
        self addSubnorph: (headerNorph upCastFor: Norph).

        self sizer
            startElement: headerNorph with: {:(SizerElementRef const ref)constraints :: Void |
                constraints expanded.
            }.
        self updateLayout.
    }.

    const method dataSource => DataSourceRef const ref
        := dataSource.

    const method columns => Columns const ref
        := columns.

    const method rowHeight => Float32
        := minimalRowExtent y max: 1. ## To avoid a division by zero

    method dataSource: (newDataSource: DataSourceRef const ref) ::=> Void := {
        dataSource := newDataSource.
    }.

    method computeNewColumnWidths => Void := {
        columns do: {:each :: Void |
            each width: (self extent x / (columns size castTo: Float32))
        }.
    }.

    override method updateLayout => Void := {
        self computeNewColumnWidths.
        super updateLayout.
    }.

    method addColumn: (newColumn: TableViewColumn rcRef) ::=> Void := {
        columns add: newColumn.

        let minimalCellExtent := newColumn minimalCellExtent.
        minimalRowExtent := Float32x2(minimalRowExtent x + minimalCellExtent x, minimalRowExtent y max: minimalCellExtent y).
    }.

    const method selectedRows => RowSelection const ref
        := selectedRows.

    method selectedRows: (newSelection: RowSelection const ref) ::=> Void
        := selectedRows := newSelection.

    method rowClicked: (rowIndex: UIntPointer) ::=> Void := {
        (selectedRows includes: rowIndex) ifTrue: {
            selectedRows removeAll
        } ifFalse: {
            selectedRows removeAll.
            selectedRows add: rowIndex
        }.

        self selectionChanged.
    }.

    method selectionChanged => Void := {
        self raiseEvent: (NorphSelectionChangedEvent new upCastFor: NorphEvent).
        self changed.
    }.

    method isRowSelected: (rowIndex: UIntPointer) ::=> Boolean8
        := selectedRows includes: rowIndex.
}.

compileTime constant TableViewNorphRef := TableViewNorph rcRef.

}. ## End of namespace Norphic
