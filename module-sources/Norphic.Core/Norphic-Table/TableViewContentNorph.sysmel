namespace Norphic definition: {

useNamespace: Std Math Geometry.

#**
 * I am a table view content norph. I am a container for the scrollable rows in the table view.
 *#
class TableViewContentNorph superclass: Norph; definition: {
    compileTime constant Columns := TableViewNorph Columns.
    compileTime constant Rows := Std Collections Vector(TableViewRowNorphRef).
    protected field visibleRows type: Rows.

    const method tableViewNorph => TableViewNorph rcRef
        := self owner downCastFor: TableViewNorph.

    const method dataSource => DataSourceRef const ref
        := self tableViewNorph dataSource.

    const method columns => Columns const ref
        := self tableViewNorph columns.

    override method isClipped => Boolean8
        := true.

    override method defaultColor => Float32x4
        := Float32x4 zeros.

    override method validSubnorphs => Subnorphs const ref := {
        self ensureThatVisibleRowsExist.
        super validSubnorphs
    }.

    const method rowHeight => Float32
        := self tableViewNorph rowHeight.

    method computeVisibleRowRange => (UIntPointer -- UIntPointer) := {
        let visibleBounds := self localBounds.
        let rowHeight := self rowHeight.

        let firstVisibleRow := ((visibleBounds min y / rowHeight) floor max: 0) castTo: UIntPointer.
        let lastVisibleRow := ((visibleBounds max y / rowHeight) ceiling max: 0) castTo: UIntPointer.

        (firstVisibleRow min: self dataSource numberOfElements, lastVisibleRow + 1 min: self dataSource numberOfElements)
    }.

    method updateContent => Void := {
        self ensureThatVisibleRowsExist.
        visibleRows do: {:each :: Void |
            each updateContent
        }
    }.

    override method updateLayout => Void := {
        let rowHeight := self rowHeight.
        let rowExtent := Float32x2(self extent x, rowHeight).
        visibleRows do: {:each :: Void |
            let position := Float32x2(0, rowHeight * (each rowIndex castTo: Float32)).
            each bounds: (RectangleF32 min: position extent: rowExtent)
        }
    }.

    method ensureThatVisibleRowsExist => Void := {
        self dataSource ifNil: {
            return: void
        }.

        let (let startRange, let endRange) := self computeVisibleRowRange.

        let createdRowsStart := visibleRows isNotEmpty ifTrue: {
            visibleRows first rowIndex
        } ifFalse: {
            endRange
        }.
        let createdRowsEnd := visibleRows isNotEmpty ifTrue: {
            visibleRows last rowIndex + 1
        } ifFalse: {
            endRange
        }.

        startRange == createdRowsStart && endRange == createdRowsEnd ifTrue: {
            return: void.
        }.

        let newRows mutable type: Rows.

        let overlappedStartRange := startRange max: createdRowsStart.
        let overlappedEndRange := endRange min: createdRowsEnd.

        ## Remove the old non-visible rows.
        visibleRows do: {:each :: Void |
            let rowIndex := each rowIndex.
            startRange <= rowIndex && rowIndex < endRange ifFalse: {
                ##Std stdout << "Destroy invisible row " << rowIndex; nl.
                each destroy
            }.
        }.

        ## Create the new list of rows.
        startRange until: endRange do: {:rowIndex :: Void |
            overlappedStartRange <= rowIndex && rowIndex < overlappedEndRange ifTrue: {
                newRows add: visibleRows[rowIndex - createdRowsStart]
            } ifFalse: {
                ##Std stdout << "Create new row " << rowIndex; nl.
                let newRow := TableViewRowNorph new.
                self addSubnorph: (newRow upCastFor: Norph).
                newRows add: newRow.

                newRow
                    rowIndex: rowIndex;
                    createCells;
                    updateContent.
            }
        }.

        visibleRows swapWith: newRows.
        self updateLayout.
    }.
}.

}. ## End of namespace Norphic
