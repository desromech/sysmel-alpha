namespace Norphic definition: {

#**
 * I am a menu popup norph.
 *#
class MenuNorph superclass: PopupNorph; definition: {
    protected field items type: Std Collections Vector(MenuItemNorph rcRef).
    protected field activeItem type: MenuItemNorphRef.
    protected field changingActiveItem type: Boolean8.

    override method defaultColor => Float32x4
        := self theme menuBackground.

    override method initialize => Void := {
        self
            sizer: (VerticalBoxSizer new upCastFor: Sizer);
            autolayout: true
    }.

    method activeItem => MenuItemNorphRef const ref
        := activeItem.

    override method ownedPopupKilled: (popup: PopupNorph rcRef const ref) ::=> Void := {
        changingActiveItem ifFalse: {
            self itemActivate: MenuItemNorphRef nil
        }
    }.

    method addMenu: (label: Std String const ref) ::=> MenuNorph rcRef := {
        let menuItem := self addItem: label.

        ## Create the menu itself.
        let menu := MenuNorph new.
        menuItem menu: menu.
        menu
    }.

    method addItem: (label: Std String const ref) ::=> MenuItemNorphRef := {
        ## Create the menu item
        let menuItem := MenuItemNorph new
            label: label;
            yourself.
        self addSubnorph: (menuItem upCastFor: Norph).
        items add: menuItem.

        self sizer
            element: menuItem with: {:(SizerElementRef const ref)constraints :: Void |
                constraints expanded
            }.

        self fit.
        menuItem
    }.

    method addSeparator => Void := {
        let separator := MenuItemSeparatorNorph new.
        self addSubnorph: (separator upCastFor: Norph).

        self sizer
            element: separator with: {:(SizerElementRef const ref)constraints :: Void |
                constraints expanded
            }.

        self fit.
    }.

    method itemClicked: (item: MenuItemNorphRef const ref) ::=> Void := {
        item menu ifNil: {
            self rootNorph ifNotNil: {:r :: Void |
                r killAllPopups.
            }.
            item raiseActivatedEvent.
        } ifNotNil: {
            item activated
        }
    }.

    override method onPopupStarted => Void := {
        self itemActivate: MenuItemNorphRef nil
    }.

    override method onPopupKilled => Void := {
        self itemActivate: MenuItemNorphRef nil
    }.

    method itemActivate: (newActiveItem: MenuItemNorphRef const ref) ::=> Void := {
        changingActiveItem ifTrue: { return: void }.
        changingActiveItem := true.

        try: {
            let oldActiveItem := activeItem.
            activeItem := newActiveItem.

            oldActiveItem ifNotNil: {
                oldActiveItem deactivated.
            }.

            activeItem ifNotNil: {
                activeItem activated.
            }.
        } finally: {
            changingActiveItem := false.
        }
    }.

    method itemMouseEnter: (item: MenuItemNorphRef const ref) ::=> Void := {
        item ~~ activeItem ifTrue: {
            self itemActivate: item.
        }
    }.

    macro method addItem: menuName doing: aBlock :=
        ``((`,self addItem: `,menuName) when: Norphic NorphActivatedEvent do: `,aBlock).

    macro method addMenu: menuName with: aBlock :=
        ``(`,aBlock __macroInlineBlock: (`,self addMenu: `,menuName)).
}.

compileTime constant MenuNorphRef := MenuNorph rcRef.

}. ## End of namespace Norphic
