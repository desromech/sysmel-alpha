namespace Norphic definition: {

#**
 * I am a menu bar norph.
 *#
class MenuBarNorph superclass: Norph; definition: {
    protected field items type: Std Collections Vector(MenuBarItemNorph rcPointer).
    protected field activeItem type: MenuBarItemNorph pointer.
    protected field changingActiveItem type: Boolean8.

    override method defaultColor => Float32x4
        := self theme _ menuBarBackground.

    override method initialize => Void := {
        self
            sizer: (HorizontalBoxSizer rcNew upCastFor: Sizer);
            autolayout: true
    }.

    override method ownedPopupKilled: (popup: PopupNorph rcPointer const ref) ::=> Void := {
        changingActiveItem ifFalse: {
            self itemClicked: nil
        }
    }.

    method addMenu: (label: Std String const ref) ::=> MenuNorph rcPointer := {
        ## Create the menu item
        let menuItem := MenuBarItemNorph rcNew.
        menuItem _ label: label.
        self addSubnorph: (menuItem upCastFor: Norph).
        items add: menuItem.

        self sizer _
            element: menuItem with: {:constraints :: Void |
            }.

        ## Create the menu itself.
        let menu := MenuNorph rcNew.
        menuItem _ menu: menu.
        menu
    }.

    method activeItem => MenuBarItemNorph pointer
        := activeItem.

    method itemClicked: (item: MenuBarItemNorph pointer) ::=> Void := {
        changingActiveItem ifTrue: {return: void }.
        changingActiveItem := true.

        try: {
            let newActiveItem := activeItem == item ifTrue: nil ifFalse: item.

            let oldActiveItem := activeItem.
            activeItem := newActiveItem.

            oldActiveItem ifNotNil: {
                oldActiveItem _ deactivated.
            }.
            activeItem ifNotNil: {
                activeItem _ activated.
            }.

        } finally: {
            changingActiveItem := false.
        }.
    }.

    method itemMouseEnter: (item: MenuBarItemNorph pointer) ::=> Void := {
        activeItem isNotNil && item ~~ activeItem ifTrue: {
            self itemClicked: item.
        }
    }.

    macro method addMenu: menuName with: aBlock :=
        ``(`,aBlock __macroInlineBlock: (`,self addMenu: `,menuName) _).
}.

compileTime constant MenuBarNorphPtr := MenuBarNorph rcPointer.

}. ## End of namespace Norphic
