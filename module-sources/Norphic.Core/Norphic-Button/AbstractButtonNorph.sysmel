namespace Norphic definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Graphics GUI.
useNamespace: Stdn Math Geometry.

#**
 * I am an abstract button widget norph.
 *#
class AbstractButtonNorph superclass: BorderedNorph; definition: {
    protected field isDown type: Boolean8.

    override method defaultColor => Float32x4
        := self theme _ buttonColor.

    override method onKeyPressedEvent: (event: NorphKeyPressedEvent ref) ::=> Void := {
        event isRepeat not &&
        event symbol == KeySymbol Return ifTrue: {
            isDown := true.
            self changed.
            event wasHandled: true
        }.

        super onKeyPressedEvent: event
    }.

    override method onKeyReleasedEvent: (event: NorphKeyReleasedEvent ref) ::=> Void := {
        event isRepeat not &&
        event symbol == KeySymbol Return ifTrue: {
            isDown ifTrue: {
                isDown := false.
                self changed.
                self raiseActivatedEvent
            }.
            event wasHandled: true
        }.

        super onKeyReleasedEvent: event
    }.

    override method onLostFocusEvent: (event: NorphLostFocusEvent ref) ::=> Void := {
        isDown ifTrue: {
            isDown := false.
        }.
        super onLostFocusEvent: event
    }.

    override method onMouseEnterEvent: (event: NorphMouseEnterEvent ref) ::=> Void := {
        super onMouseEnterEvent: event.
        self changed.
    }.

    override method onMouseLeaveEvent: (event: NorphMouseLeaveEvent ref) ::=> Void := {
        super onMouseLeaveEvent: event.
        self changed.
    }.

    override method handlesKeyboardEvents => Boolean8
        := true.

    override method onMouseButtonPressedEvent: (event: NorphMouseButtonPressedEvent ref) ::=> Void := {
        super onMouseButtonPressedEvent: event.

        event isLeftButton ifFalse: {
            return: void.
        }.

        isDown := true.
        self changed.
        event wasHandled: true.
        self grabMouseCapture.
    }.

    override method onMouseButtonReleasedEvent: (event: NorphMouseButtonReleasedEvent ref) ::=> Void := {
        super onMouseButtonReleasedEvent: event.

        event isLeftButton ifFalse: {
            return: void.
        }.

        isDown := false.
        self changed.
        event wasHandled: true.
        self releaseMouseCapture.

        (self localBounds includesPoint: event position) ifTrue: {
            self raiseActivatedEvent
        }
    }.

    virtual method currentColor => Float32x4 := {
        self hasMouseFocus ifTrue: {
            self color lighter lighter
        } ifFalse: {
            self color
        }
    }.

    override method buildSceneGraphWith: (builder: NorphSceneBuilder ref) ::=> NorphSceneNodePtr := {
        let baseColor := self currentColor.
        let topColor mutable := baseColor.
        let bottomColor mutable := baseColor muchDarker.
        isDown ifTrue: {
            Stdn swapValue: topColor with: bottomColor
        }.

        let localBounds := self localBounds.

        let filling := builder fillRectangle: localBounds verticalGradientStart: topColor end: bottomColor.
        let border := builder borderRectangle: localBounds color: self currentBorderColor.
        filling _ -- (border upCastFor: NorphSceneNode)
    }.
}.

}. ## End of namespace Norphic
