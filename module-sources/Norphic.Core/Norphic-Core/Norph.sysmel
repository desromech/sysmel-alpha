namespace Norphic definition: {

useNamespace: Std Graphics Core.
useNamespace: Std Math Geometry.

class Sizer.
class SizerElement.

compileTime constant EventHandlerFunctionType := (NorphEvent ref) => Void.
compileTime constant NorphSceneNode := Std Graphics Scene2D Node.
compileTime constant NorphSceneNodeRef := Std Graphics Scene2D NodeRef.
compileTime constant NorphSceneBuilder := Std Graphics Scene2D Builder.
compileTime constant NorphSceneBuilderRef := Std Graphics Scene2D BuilderRef.

#**
 * I am a norph, my name comes from Native (M)orph in honor to the old
 * Smalltalk morph.
 *#
class Norph superclass: NorphEventHandler; definition: {
    compileTime constant Subnorphs := Std Collections Vector(Norph rcRef).
    protected field bounds type: RectangleF32.
    protected field color type: Float32x4.

    protected field owner type: Norph weakRCRef.
    protected field subnorphs type: Subnorphs.
    protected field eventSubscriptions type: Std Collections Vector(NorphEventSubscription rcRef).

    private field isDirtyInThisFrame type: Boolean8.
    private field isUpdatingLayout type: Boolean8.

    public field sizer type: Sizer rcRef.
    public field autolayout type: Boolean8.

    inline method extent => Float32x2
        := bounds extent.

    virtual method extent: (newExtent: Float32x2) ::=> Void := {
        self bounds: (RectangleF32 min: self position extent: newExtent)
    }.

    virtual method isClipped => Boolean8
        := false.

    const inline method position => Float32x2
        := bounds min.

    const virtual method rootLocalPosition => Float32x2 := {
        let result mutable := self position.
        self owner ifNotNil: {:o :: Void |
            result := result + o rootLocalPosition
        }.
        result
    }.

    virtual method position: (newPosition: Float32x2) ::=> Void := {
        self bounds: (RectangleF32 min: newPosition extent: self extent)
    }.

    virtual method movedInto: (newPosition: Float32x2) ::=> Void := {
        bounds := RectangleF32 min: newPosition extent: bounds extent.
        self positionChanged.
    }.

    virtual method extentChangedInto: (newExtent: Float32x2) ::=> Void := {
        bounds := RectangleF32 min: bounds min extent: newExtent.
        self extentChanged.
    }.

    virtual method bounds => RectangleF32
        := bounds.

    virtual method bounds: (theNewBounds: RectangleF32 const ref) ::=> Void := {
        bounds = theNewBounds ifTrue: {
            return: void.
        }.

        bounds extent = theNewBounds extent ifTrue: {
            bounds := theNewBounds.
            self positionChanged.
        } ifFalse: {
            bounds min = theNewBounds min ifTrue: {
                bounds := theNewBounds.
                self extentChanged.
            } ifFalse: {
                bounds := theNewBounds.
                self boundsChanged.
            }
        }
    }.

    inline method localBounds => RectangleF32
        := RectangleF32 min: Float32x2 zeros extent: self extent.

    override method initialize => Void := {
        bounds := self defaultBounds.
        color := self defaultColor.
    }.

    override method finalize => Void := {
        self destroy
    }.

    virtual method defaultExtent => Float32x2
        := Float32x2(50, 40).

    virtual method defaultBounds => RectangleF32
        := RectangleF32 min: Float32x2 zeros extent: self defaultExtent.

    virtual method defaultColor => Float32x4
        := Float32x4(0.25f, 0.8f, 0.25f, 1.0f).

    virtual method minimalContentExtent => Float32x2
        := Float32x2 zeros.

    virtual method minimalExtent => Float32x2 := {
        let result mutable := self minimalContentExtent.
        sizer ifNotNil: {
            result := result max: sizer minimalExtent
        }.

        result.
    }.

    virtual method color => Float32x4
        := color.

    virtual method color: (theNewColor: Float32x4 const ref) ::=> Void := {
        color := theNewColor.
        self changed.
    }.

    virtual method buildFullSceneGraphWith: (builder: NorphSceneBuilderRef const ref) ::=> NorphSceneNodeRef := {
        let content := self buildContentSceneGraphWith: builder.
        let clippedContent mutable := content.
        self isClipped ifTrue: {
            clippedContent := (builder clipRectangle: self localBounds node: content) asNode
        }.

        (builder translate: bounds min node: clippedContent) asNode
    }.

    virtual method buildContentSceneGraphWith: (builder: NorphSceneBuilderRef const ref) ::=> NorphSceneNodeRef := {
        let myNode := self buildSceneGraphWith: builder.
        let myPostChildrenNode := self buildPostChildrenSceneGraphWith: builder.
        self validSubnorphs ifEmpty: {
            return: myNode -- myPostChildrenNode
        }.

        let result := builder container.
        result add: myNode.

        self validSubnorphs do: {:child :: Void |
            result add: (child buildFullSceneGraphWith: builder)
        }.

        result add: myPostChildrenNode.

        result upCastFor: NorphSceneNode
    }.

    virtual method buildSceneGraphWith: (builder: NorphSceneBuilderRef const ref) ::=> NorphSceneNodeRef
        := (builder fillRectangle: self localBounds color: self color) asNode.

    virtual method buildPostChildrenSceneGraphWith: (builder: NorphSceneBuilderRef const ref) ::=> NorphSceneNodeRef
        := NorphSceneNodeRef nil.

    virtual method childChanged ::=> Void := {
        self changed
    }.

    virtual method childBoundsChanged ::=> Void := {
        autolayout ifTrue: {
            self updateLayout
        }
    }.

    virtual method changed ::=> Void := {
        isDirtyInThisFrame ifTrue: {
            return: void
        }.

        self owner ifNotNil: { :theOwner :: Void |
            theOwner childChanged.
        }.
    }.

    virtual method invalidateLayout => Void := {
        ## TODO: Delay this layout revalidation.
        autolayout ifTrue: {
            self updateLayout.
        }.
    }.

    virtual method extentChanged ::=> Void := {
        self changed.
        self invalidateLayout.

        self owner ifNotNil: { :theOwner :: Void |
            theOwner childBoundsChanged.
        }.
    }.

    virtual method positionChanged ::=> Void := {
        self owner ifNotNil: { :theOwner :: Void |
            theOwner childBoundsChanged.
        }.
    }.

    virtual method boundsChanged ::=> Void := {
        self changed.

        autolayout ifTrue: {
            self updateLayout.
        }.

        self owner ifNotNil: { :theOwner :: Void |
            theOwner childBoundsChanged.
        }.
    }.

    virtual method fit => Void := {
        self
            extent: self minimalExtent;
            updateLayout
    }.

    virtual method doUpdateLayout => Void := {
        sizer ifNotNil: {
            sizer applyIntoBounds: self localBounds
        }
    }.

    virtual method updateLayout => Void := {
        isUpdatingLayout ifTrue: { return: void }.
        isUpdatingLayout := true.
        try: {
            self doUpdateLayout
        } finally: {
            isUpdatingLayout := false.
        }
    }.

    virtual method destroy ::=> Void := {
        self owner ifNotNil: { :o :: Void |
            o removeSubnorph: self asRCRef
        }.
    }.

    virtual method validSubnorphs => Subnorphs const ref
        := subnorphs.

    virtual method addedToOwner: (newOwner: Norph ref) ::=> Void := {
        owner := newOwner asWeakRCRef.
    }.

    virtual method removedFromOwner: (oldOwner: Norph ref) ::=> Void := {
        owner := nil
    }.

    virtual method removeSubnorph: (childSubnorph: Norph rcRef const ref) ::=> Void := {
        childSubnorph ifNil: { return: void }.

        subnorphs remove: childSubnorph.
        childSubnorph removedFromOwner: self.
        self changed.
    }.

    virtual method addSubnorph: (newSubnorph: Norph rcRef const ref) ::=> Void := {
        newSubnorph ifNil: { return: void }.

        subnorphs add: newSubnorph.
        newSubnorph addedToOwner: self.
        self changed.
    }.

    const virtual method globalPosition => Float32x2 := {
        self owner ifNotNil: {:owner :: Void |
            return: bounds min + owner globalPosition
        }.

        bounds min
    }.

    const virtual method keyboardFocusNorph => Norph pointer := {
        self owner ifNotNil: {:owner :: Void |
            return: owner keyboardFocusNorph
        }.

        nil
    }.

    const virtual method mouseFocusNorph => Norph pointer := {
        self owner ifNotNil: {:owner :: Void |
            return: owner mouseFocusNorph
        }.

        nil
    }.

    const virtual method mouseCaptureNorph => Norph pointer := {
        self owner ifNotNil: {:owner :: Void |
            return: owner mouseCaptureNorph
        }.

        nil
    }.

    virtual method rootNorph => RootNorph rcRef := {
        self owner ifNotNil: {:owner :: Void |
            return: owner rootNorph
        }.

        RootNorphRef nil
    }.

    method grabMouseCapture => Void := {
        self rootNorph ifNotNil: {:root :: Void |
            root setMouseCaptureNorph: self asRCRef
        }
    }.

    method releaseMouseCapture => Void := {
        self hasMouseCapture ifFalse: {
            return: void
        }.

        self rootNorph ifNotNil: {:root :: Void |
            root setMouseCaptureNorph: NorphRef nil
        }
    }.

    const inline method owner => Norph rcRef
        := owner asRCRef.

    virtual method handlesKeyboardEvents => Boolean8
        := false.

    virtual method handlesTextInputEvents => Boolean8
        := false.

    virtual method canHaveKeyboardFocus => Boolean8
        := self handlesKeyboardEvents.

    virtual method canReceiveKeyboardEvents => Boolean8
        := self handlesKeyboardEvents && (self canHaveKeyboardFocus ifTrue: {
            self hasKeyboardFocus
        } ifFalse: {
            self owner ifNotNil: { :o :: Boolean8 |
                o canReceiveKeyboardEvents
            } ifNil: {
                false
            }
        }).

    method acquireKeyboardFocus => Void := {
        self rootNorph ifNotNil: {:root :: Void |
            root setNewKeyboardFocus: self address
        }
    }.

    inline method theme => Theme rcRef const ref
        := ThemeRegistry uniqueInstance defaultTheme.

    inline method asSizerElement => SizerElement rcRef
        := (SizerNorphElement for: self) upCastFor: SizerElement.

    const inline method hasMouseFocus => Boolean8
        := self mouseFocusNorph == self address.

    const inline method hasMouseCapture => Boolean8
        := self mouseCaptureNorph == self address.

    virtual method handlesMouseEvents => Boolean8
        := true.

    virtual method currentMouseCursor => CursorRef := {
        self owner ifNotNil: {:owner :: Void |
            return: owner currentMouseCursor
        }.

        SystemCursor arrow upCastFor: Cursor.
    }.

    virtual method currentCursorChanged => Void := {
        self hasMouseFocus ifTrue: {
            self rootNorph currentActiveMouseCursorChanged.
        }
    }.

    override method onMouseButtonReleasedEvent: (event: NorphMouseButtonReleasedEvent ref) ::=> Void := {
        event isLeftButton && event wasHandled not && self canHaveKeyboardFocus ifTrue: {
            self acquireKeyboardFocus.
            event wasHandled: true.
        }.
    }.

    virtual method dispatchMouseEventToChildren: (event: NorphMouseEvent ref) ::=> Void := {
        let mousePosition := event position.
        self validSubnorphs reverseDo: {:child :: Void |
            let childBounds := child bounds.
            child handlesMouseEvents && (childBounds includesPoint: event position) ifTrue: {
                event position: mousePosition - childBounds min.
                try: {
                    child dispatchMouseEvent: event
                } finally: {
                    event position: mousePosition
                }.

                event wasHandled ifTrue: {
                    return: void
                }
            }
        }.
    }.

    virtual method dispatchMouseEvent: (event: NorphMouseEvent ref) ::=> Void := {
        self dispatchMouseEventToChildren: event.

        event targetNorph ifNil: {
            event targetNorph: self asRCRef.

            self rootNorph ifNotNil: {:rootNorph :: Void |
                rootNorph mouseEventHasFoundItsTarget: event
            }.
        }.

        self handlesMouseEvents ifTrue: {
            self processEvent: event.
        }.
    }.

    virtual method dispatchKeyboardEventFromParent: (event: NorphKeyboardEvent ref) ::=> Void := {
        self
            dispatchKeyboardEventToChildren: event;
            dispatchKeyboardHereEvent: event.
    }.

    virtual method dispatchKeyboardEventToChildren: (event: NorphKeyboardEvent ref) ::=> Void := {
        self validSubnorphs do: {:each :: Void |
            each canHaveKeyboardFocus ifFalse: {
                each dispatchKeyboardEventFromParent: event.
                event wasHandled ifTrue: {return: void}.
            }.
        }.
    }.

    virtual method dispatchKeyboardHereEvent: (event: NorphKeyboardEvent ref) ::=> Void := {
        event wasHandled ifTrue: {return: void}.
        self handlesKeyboardEvents ifTrue: {
            self processEvent: event.
        }.
    }.

    virtual method dispatchKeyboardEvent: (event: NorphKeyboardEvent ref) ::=> Void := {
        self dispatchKeyboardEventFromParent: event.

        self hasKeyboardFocus ifTrue: {
            self owner ifNotNil: {:parent :: Void |
                parent dispatchPropagatedKeyboardEvent: event
            }.
        }.
    }.

    virtual method dispatchPropagatedKeyboardEvent: (event: NorphKeyboardEvent ref) ::=> Void := {
        self dispatchKeyboardHereEvent: event.

        self owner ifNotNil: {:parent :: Void |
            parent dispatchPropagatedKeyboardEvent: event
        }.
    }.

    virtual method dispatchTextInputEventFromParent: (event: NorphTextInputEvent ref) ::=> Void := {
        self
            dispatchTextInputEventToChildren: event;
            dispatchTextInputHereEvent: event.
    }.

    virtual method dispatchTextInputEventToChildren: (event: NorphTextInputEvent ref) ::=> Void := {
        self validSubnorphs do: {:each :: Void |
            each canHaveKeyboardFocus ifFalse: {
                each dispatchTextInputEventFromParent: event.
                event wasHandled ifTrue: {return: void}.
            }.
        }.
    }.

    virtual method dispatchTextInputHereEvent: (event: NorphTextInputEvent ref) ::=> Void := {
        event wasHandled ifTrue: {return: void}.
        self handlesTextInputEvents ifTrue: {
            self processEvent: event.
        }.
    }.

    virtual method dispatchTextInputEvent: (event: NorphTextInputEvent ref) ::=> Void := {
        self dispatchTextInputEventFromParent: event.

        self hasKeyboardFocus ifTrue: {
            self owner ifNotNil: {:parent :: Void |
                parent dispatchPropagatedTextInputEvent: event
            }.
        }.
    }.

    virtual method dispatchPropagatedTextInputEvent: (event: NorphTextInputEvent ref) ::=> Void := {
        self dispatchTextInputHereEvent: event.

        self owner ifNotNil: {:parent :: Void |
            parent dispatchPropagatedTextInputEvent: event
        }.
    }.

    const inline method hasKeyboardFocus => Boolean8
        := self keyboardFocusNorph == self address.

    method addEventSubscription: (subscription: NorphEventSubscription rcRef const ref) ::=> Void := {
        eventSubscriptions add: subscription
    }.

    method registerEventHandler: (eventHandler: EventHandlerFunctionType nativeBlockClosure) forClassInfo: (eventClassInfo: Std Reflection TypeInformationMetadata const pointer) ::=> Void := {
        self addEventSubscription: (NorphEventFunctionSubscription new
            handlingFunction: eventHandler;
            expectedEventTypeInfo: eventClassInfo;
            upCastFor: NorphEventSubscription)
    }.

    macro method when: aClass do: aBlock
        := ``(`,self registerEventHandler: `,aBlock forClassInfo: (`,aClass asTypeInformationMetadata)
    ).

    method raiseEvent: (event: NorphEvent rcRef) ::=> Void := {
        self processEvent: event.

        eventSubscriptions do: {:each :: Void |
            (each handlesEvent: event) ifTrue: {
                each handleEvent: event
            }.
        }.
    }.

    method raiseActivatedEvent => Void := {
        self raiseEvent: (NorphActivatedEvent new upCastFor: NorphEvent).
    }.

    virtual method ownedPopupCreated: (popup: PopupNorph rcRef const ref) ::=> Void := {

    }.

    virtual method ownedPopupKilled: (popup: PopupNorph rcRef const ref) ::=> Void := {

    }.

    const virtual method isPopupNorph => Boolean8
        := false.
}.

compileTime constant NorphRef := Norph rcRef.

}. ## End of namespace Norphic
