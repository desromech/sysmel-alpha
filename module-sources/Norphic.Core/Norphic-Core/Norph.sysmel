namespace Norphic definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math Geometry.

class Sizer.
class SizerElement.

#**
 * I am a norph, my name comes from Native (M)orph in honor to the old
 * Smalltalk morph.
 *#
class Norph superclass: NorphEventHandler; definition: {
    protected field bounds type: RectangleF32.
    protected field color type: Float32x4.

    protected field owner type: Norph weakPointer.
    protected field subnorphs type: Stdn Collections Vector(Norph sharedPointer).

    private field isDirtyInThisFrame type: Boolean8.
    private field isUpdatingLayout type: Boolean8.

    public field sizer type: Sizer sharedPointer.
    public field autolayout type: Boolean8.

    inline method extent => Float32x2
        := bounds extent.

    virtual method extent: (newExtent: Float32x2) ::=> Void := {
        self bounds: (RectangleF32 min: self position extent: newExtent)
    }.

    inline method position => Float32x2
        := bounds min.

    virtual method position: (newPosition: Float32x2) ::=> Void := {
        self bounds: (RectangleF32 min: newPosition extent: self extent)
    }.

    virtual method bounds => RectangleF32
        := bounds.

    virtual method bounds: (theNewBounds: RectangleF32 const ref) ::=> Void := {
        bounds := theNewBounds.
        self boundsChanged.
    }.

    inline method localBounds => RectangleF32
        := RectangleF32 min: Float32x2 zeros extent: self extent.

    override method initialize => Void := {
        bounds := self defaultBounds.
        color := self defaultColor.
    }.

    override method finalize => Void := {
        self destroy
    }.

    virtual method defaultExtent => Float32x2
        := Float32x2(50, 40).

    virtual method defaultBounds => RectangleF32
        := RectangleF32 min: Float32x2 zeros extent: self defaultExtent.

    virtual method defaultColor => Float32x4
        := Float32x4(0.0f, 0.0f, 1.0f, 1.0f).

    virtual method minimalContentExtent => Float32x2
        := Float32x2 zeros.

    virtual method minimalExtent => Float32x2 := {
        let result mutable := self minimalContentExtent.
        sizer ifNotNil: {
            result max: sizer _ minimalExtent
        }.

        result.
    }.

    virtual method color => Float32x4
        := color.

    virtual method color: (theNewColor: Float32x4 const ref) ::=> Void := {
        color := theNewColor.
        self changed.
    }.

    virtual method renderOn: (canvas: Canvas ref) ::=> Void := {
        canvas
            color: self color;
            fillRectangle: self localBounds
    }.

    virtual method renderSubnorphsOn: (canvas: Canvas ref) ::=> Void := {
        subnorphs do: {:(Norph sharedPointer const ref)child :: Void |
            child _ fullRenderOn: canvas
        }
    }.

    virtual method fullRenderOn: (canvas: Canvas ref) ::=> Void := {
        canvas transform restoreAfter: {
            canvas transform translateBy: bounds min.
            self
                renderOn: canvas;
                renderSubnorphsOn: canvas.
        }.

        isDirtyInThisFrame := false.
    }.

    virtual method childChanged ::=> Void := {
        self changed
    }.

    virtual method childBoundsChanged ::=> Void := {
        autolayout ifTrue: {
            self updateLayout
        }
    }.

    virtual method changed ::=> Void := {
        isDirtyInThisFrame ifTrue: {
            return: void
        }.

        self owner ifNotNil: { :theOwner :: Void |
            theOwner _ childChanged.
        }.
    }.

    virtual method boundsChanged ::=> Void := {
        self changed.

        autolayout ifTrue: {
            self updateLayout.
        }.

        self owner ifNotNil: { :theOwner :: Void |
            theOwner _ childBoundsChanged.
        }.
    }.

    virtual method updateLayout => Void := {
        isUpdatingLayout ifTrue: { return: void }.
        isUpdatingLayout := true.
        try: {
            sizer ifNotNil: {
                sizer _ applyIntoBounds: self localBounds
            }
        } finally: {
            isUpdatingLayout := false.
        }
    }.

    virtual method destroy ::=> Void := {

    }.

    virtual method addedToOwner: (newOwner: Norph ref) ::=> Void := {
        owner := newOwner asWeakPointer.
    }.

    virtual method removedFromOwner: (newOwner: Norph ref) ::=> Void := {
        owner reset
    }.

    virtual method addSubnorph: (newSubnorph: Norph sharedPointer const ref) ::=> Void := {
        newSubnorph ifNil: { return: void }.

        subnorphs add: newSubnorph.
        newSubnorph _ addedToOwner: self
    }.

    const inline method owner => Norph sharedPointer
        := owner lock.

    inline method theme => Theme sharedPointer const ref
        := ThemeRegistry uniqueInstance defaultTheme.

    inline method asSizerElement => SizerElement sharedPointer
        := (SizerNorphElement for: self) upCastFor: SizerElement.
}.

}. ## End of namespace Norphic
