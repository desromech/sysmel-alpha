namespace Norphic definition: {

useNamespace: Stdn Graphics GUI.

class NorphEventHandler.
class Norph.

class NorphEvent superclass: Stdn Object; definition: {
    public field wasHandled type: Boolean8.
    public field targetNorph type: Norph sharedPointer.

    virtual method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
    }.
}.

class NorphKeyboardEvent superclass: NorphEvent; definition: {
    public field symbol type: KeySymbol.
    public field modifiers type: KeyModifiers.
    public field isRepeat type: Boolean8.

}.

class NorphKeyPressedEvent superclass: NorphKeyboardEvent; definition: {
    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onKeyPressedEvent: self
    }.
}.

class NorphKeyReleasedEvent superclass: NorphKeyboardEvent; definition: {
    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onKeyReleasedEvent: self
    }.
}.

class NorphTextInputEvent superclass: NorphEvent; definition: {
    public field text type: Stdn String.

    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onTextInputEvent: self
    }.
}.

class NorphMouseEvent superclass: NorphEvent; definition: {
    public field mouseId type: UInt32.
    public field position type: Float32x2.
    public field modifiers type: KeyModifiers.

    method setFrom: (other: NorphMouseEvent const ref) ::=> Void := {
        mouseId := other mouseId.
        position := other position.
        modifiers := other modifiers.
    }.
}.

class NorphMouseButtonEvent superclass: NorphMouseEvent; definition: {
    public field button type: MouseButton.
    public field clickCount type: UInt8.

    const inline method isLeftButton => Boolean8
        := button == MouseButton Left.

    const inline method isMiddleButton => Boolean8
        := button == MouseButton Middle.

    const inline method isRightButton => Boolean8
        := button == MouseButton Right.
}.

class NorphMouseButtonPressedEvent superclass: NorphMouseButtonEvent; definition: {
    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onMouseButtonPressedEvent: self
    }.
}.

class NorphMouseButtonReleasedEvent superclass: NorphMouseButtonEvent; definition: {
    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onMouseButtonReleasedEvent: self
    }.
}.

class NorphMouseMoveEvent superclass: NorphMouseEvent; definition: {
    public field buttonState type: MouseButtonMask.
    public field delta type: Float32x2.

    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onMouseMoveEvent: self
    }.
}.

class NorphMouseWheelEvent superclass: NorphMouseEvent; definition: {
    public field scrollDelta type: Float32x2.
    public field isFlipped type: Boolean8.

    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onMouseWheelEvent: self
    }.
}.

class NorphMouseFocusEvent superclass: NorphMouseEvent; definition: {
}.

class NorphMouseEnterEvent superclass: NorphMouseFocusEvent; definition: {
    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onMouseEnterEvent: self
    }.
}.

class NorphMouseLeaveEvent superclass: NorphMouseFocusEvent; definition: {
    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onMouseLeaveEvent: self
    }.
}.

class NorphKeyboardFocusEvent superclass: NorphEvent; definition: {
}.


class NorphGotFocusEvent superclass: NorphKeyboardFocusEvent; definition: {
    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onGotFocusEvent: self
    }.
}.

class NorphLostFocusEvent superclass: NorphKeyboardFocusEvent; definition: {
    override method acceptEventHandler: (eventHandler: NorphEventHandler ref) ::=> Void := {
        eventHandler onLostFocusEvent: self
    }.
}.
}.
