namespace Norphic definition: {

useNamespace: Std Graphics Core.
useNamespace: Std Math Geometry.

#**
 * I am a root norph that roughly corresponds to a window in a Window system.
 *#
class RootNorph superclass: Norph; definition: {
    protected field mouseFocusNorph type: Norph rcRef.
    protected field mouseCaptureNorph type: Norph rcRef.
    protected field keyboardFocusNorph type: Norph rcRef.
    protected field activePopupLeaf type: PopupNorph rcRef.

    const override method mouseFocusNorph => Norph pointer
        := mouseFocusNorph rcObjectAddress.

    const override method mouseCaptureNorph => Norph pointer
        := mouseCaptureNorph rcObjectAddress.

    const override method keyboardFocusNorph => Norph pointer
        := keyboardFocusNorph rcObjectAddress.

    override method rootNorph => RootNorph rcRef
        := self asRCRef.

    const override method rootLocalPosition => Float32x2
        := Float32x2 zeros.

    override method initialize => Void := {

    }.

    override method finalize => Void := {

    }.

    method killAllPopups ::=> Void := {
        let chainStart := activePopupLeaf.
        self killPopupChain: chainStart.
    }.

    method killPopupChain: (popup: PopupNorphRef const ref) ::=> Void := {
        popup ifNil: {return: void}.

        let parent := popup parentPopup.
        self killPopup: popup.
        self killPopupChain: parent
    }.

    method killPopup: (thePopup: PopupNorphRef const ref) ::=> Void := {
        ## Make a copy in case thePopup points to activePopupLeaf.
        let popup := thePopup.

        popup owner ifNil: {
            return: void
        } ifNotNil: {:o :: Void |
            activePopupLeaf = popup ifTrue: {
                activePopupLeaf := popup parentPopup
            }.

            o removeSubnorph: (popup upCastFor: Norph).
            popup killed.
        }.
    }.

    method activatePopup: (popup: PopupNorphRef const ref) at: (popupPosition: Float32x2) withParent: (newParent: NorphRef const ref) ::=> Void := {
        popup owner ifNotNil: {
            self killPopup: popup
        }.

        activePopupLeaf isNotNil && activePopupLeaf ~~ popup ifTrue: {
            self killPopup: activePopupLeaf
        }.

        activePopupLeaf := popup.
        self addSubnorph: (popup upCastFor: Norph).
        popup
            position: popupPosition;
            activatedWithParent: newParent
    }.

    virtual method setMouseCaptureNorph: (norph: NorphRef const ref) ::=> Void := {
        norph ifNil: {
            mouseCaptureNorph := nil.
            void
        } ifNotNil: {
            mouseCaptureNorph := norph
        }
    }.

    virtual method currentActiveMouseCursorChanged => Void := {

    }.

    virtual method mouseFocusNorphCursor => CursorRef := {
        mouseFocusNorph ifNotNil: {
            mouseFocusNorph currentMouseCursor
        } ifNil: {
            self currentMouseCursor
        }
    }.

    method mouseEventHasFoundItsTarget: (event: NorphMouseEvent ref) ::=> Void := {
        mouseFocusNorph == event targetNorph ifTrue: {
            return: void.
        }.

        mouseFocusNorph ifNotNil: {
            let leaveEvent mutable type: NorphMouseLeaveEvent.
            leaveEvent setFrom: event.
            mouseFocusNorph processEvent: leaveEvent
        }.

        mouseFocusNorph := event targetNorph.

        mouseFocusNorph ifNotNil: {
            let enterEvent mutable type: NorphMouseEnterEvent.
            enterEvent setFrom: event.
            mouseFocusNorph processEvent: enterEvent.
        }.

        self currentActiveMouseCursorChanged.
    }.


    override method dispatchMouseEventToChildren: (event: NorphMouseEvent ref) ::=> Void := {
        mouseCaptureNorph ifNil: {
            super dispatchMouseEventToChildren: event
        } ifNotNil: {
            let oldPosition := event position.
            try: {
                event position: oldPosition - (mouseCaptureNorph globalPosition - self globalPosition).
                mouseCaptureNorph dispatchMouseEvent: event
            } finally: {
                event position: oldPosition
            }
        }
    }.

    virtual method setNewKeyboardFocus: (newKeyboardFocus: Norph pointer) ::=> Void := {
        keyboardFocusNorph rcObjectAddress == newKeyboardFocus ifTrue: {
            return: void
        }.

        keyboardFocusNorph ifNotNil: {
            let lostFocusEvent mutable type: NorphLostFocusEvent.
            keyboardFocusNorph processEvent: lostFocusEvent
        }.

        keyboardFocusNorph := newKeyboardFocus _ asRCRef.

        keyboardFocusNorph ifNotNil: {
            let gotFocusEvent mutable type: NorphGotFocusEvent.
            keyboardFocusNorph processEvent: gotFocusEvent.
        }.
    }.

    override method dispatchKeyboardEvent: (event: NorphKeyboardEvent ref) ::=> Void := {
        keyboardFocusNorph ifNotNil: {
            keyboardFocusNorph dispatchKeyboardEvent: event.
            return: void
        }.

        super dispatchKeyboardEvent: event.
    }.

    override method dispatchPropagatedKeyboardEvent: (event: NorphKeyboardEvent ref) ::=> Void := {
        ## Do nothing
    }.

    override method dispatchTextInputEvent: (event: NorphTextInputEvent ref) ::=> Void := {
        keyboardFocusNorph ifNotNil: {
            keyboardFocusNorph dispatchTextInputEvent: event.
            return: void
        }.

        super dispatchTextInputEvent: event.
    }.

    override method dispatchPropagatedTextInputEvent: (event: NorphTextInputEvent ref) ::=> Void := {
        ## Do nothing
    }.
}.

compileTime constant RootNorphRef := RootNorph rcRef.

}. ## End of namespace Norphic
