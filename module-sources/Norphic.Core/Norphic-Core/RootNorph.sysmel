namespace Norphic definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math Geometry.

#**
 * I am a root norph that roughly corresponds to a window in a Window system.
 *#
class RootNorph superclass: Norph; definition: {
    protected field mouseFocusNorph type: Norph sharedPointer.
    protected field mouseCaptureNorph type: Norph sharedPointer.
    protected field keyboardFocusNorph type: Norph sharedPointer.

    const override method mouseFocusNorph => Norph pointer
        := mouseFocusNorph getPointer.

    const override method mouseCaptureNorph => Norph pointer
        := mouseCaptureNorph getPointer.

    const override method keyboardFocusNorph => Norph pointer
        := keyboardFocusNorph getPointer.

    const override method rootNorph => RootNorph pointer
        := self address reinterpretCastTo: SelfType pointer.

    override method initialize => Void := {

    }.

    override method finalize => Void := {

    }.

    virtual method setMouseCaptureNorph: (norph: Norph pointer) ::=> Void := {
        norph ifNil: {
            mouseCaptureNorph reset
        } ifNotNil: {
            mouseCaptureNorph := norph _ asSharedPointer
        }
    }.

    virtual method currentActiveMouseCursorChanged => Void := {

    }.

    virtual method mouseFocusNorphCursor => Cursor sharedPointer := {
        mouseFocusNorph ifNotNil: {
            mouseFocusNorph _ currentMouseCursor
        } ifNil: {
            self currentMouseCursor
        }
    }.

    method mouseEventHasFoundItsTarget: (event: NorphMouseEvent ref) ::=> Void := {
        mouseFocusNorph == event targetNorph ifTrue: {
            return: void.
        }.

        mouseFocusNorph ifNotNil: {
            let leaveEvent mutable type: NorphMouseLeaveEvent.
            leaveEvent setFrom: event.
            mouseFocusNorph _ processEvent: leaveEvent
        }.

        mouseFocusNorph := event targetNorph.

        mouseFocusNorph ifNotNil: {
            let enterEvent mutable type: NorphMouseEnterEvent.
            enterEvent setFrom: event.
            mouseFocusNorph _ processEvent: enterEvent.
        }.

        self currentActiveMouseCursorChanged.
    }.


    override method dispatchMouseEventToChildren: (event: NorphMouseEvent ref) ::=> Void := {
        mouseCaptureNorph ifNil: {
            super dispatchMouseEventToChildren: event
        } ifNotNil: {
            let oldPosition := event position.
            try: {
                event position: oldPosition - (mouseCaptureNorph _ globalPosition - self globalPosition).
                mouseCaptureNorph _ dispatchMouseEvent: event
            } finally: {
                event position: oldPosition
            }
        }
    }.

    virtual method setNewKeyboardFocus: (newKeyboardFocus: Norph pointer) ::=> Void := {
        keyboardFocusNorph getPointer == newKeyboardFocus ifTrue: {
            return: void
        }.

        keyboardFocusNorph ifNotNil: {
            let lostFocusEvent mutable type: NorphLostFocusEvent.
            mouseFocusNorph _ processEvent: lostFocusEvent
        }.

        keyboardFocusNorph := newKeyboardFocus _ asSharedPointer.

        keyboardFocusNorph ifNotNil: {
            let gotFocusEvent mutable type: NorphGotFocusEvent.
            mouseFocusNorph _ processEvent: gotFocusEvent.
        }.
    }.

    override method dispatchKeyboardEvent: (event: NorphKeyboardEvent ref) ::=> Void := {
        keyboardFocusNorph ifNotNil: {
            keyboardFocusNorph _ dispatchKeyboardEvent: event.

            event wasHandled ifTrue: {
                return: void
            }.
        }.

        super dispatchKeyboardEvent: event.
    }.

    override method dispatchPropagatedKeyboardEvent: (event: NorphKeyboardEvent ref) ::=> Void := {
        ## Do nothing
    }.

    override method dispatchTextInputEvent: (event: NorphTextInputEvent ref) ::=> Void := {
        keyboardFocusNorph ifNotNil: {
            keyboardFocusNorph _ dispatchTextInputEvent: event.

            event wasHandled ifTrue: {
                return: void
            }.
        }.

        super dispatchTextInputEvent: event.
    }.

    override method dispatchPropagatedTextInputEvent: (event: NorphTextInputEvent ref) ::=> Void := {
        ## Do nothing
    }.
}.

}. ## End of namespace Norphic
