namespace Norphic definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Graphics GUI.
useNamespace: Stdn Math Geometry.

#**
 * I am an abstract text editor norph.
 *#
class AbstractTextEditorNorph superclass: BorderedNorph; definition: {
    public field textModel type: TextModel sharedPointer.
    public field textCursor type: TextModelCursor sharedPointer.

    override method initialize => Void := {
        self createTextModel
    }.

    virtual method createTextModel => Void := {
        let simpleTextModel := SimpleTextModel sharedNew.
        simpleTextModel _
            color: self theme _ textColor;
            fontFaceWithSize: self theme _ normalFontFaceWithSize.

        textModel := simpleTextModel upCastFor: TextModel.
        textCursor := textModel _ newCursor.
    }.

    override method defaultColor => Float32x4
        := self theme _ textEditorBackground.

    override method handlesKeyboardEvents => Boolean8
        := true.

    override method onMouseButtonPressedEvent: (event: NorphMouseButtonPressedEvent ref) ::=> Void := {
        super onMouseButtonPressedEvent: event.

        event isLeftButton ifFalse: {
            return: void.
        }.

        textCursor ifNotNil: {
            textCursor _ setAtDrawingPosition: event position.
            self changed.
        }.

        event wasHandled: true.
    }.

    override method onKeyPressedEvent: (event: NorphKeyPressedEvent ref) ::=> Void := {
        super onKeyPressedEvent: event.
        event isSuppressed || textCursor isNil ifTrue: {
            return: void.
        }.

        event symbol selectCase: #{
        KeySymbol Backspace : {
            textCursor _ deletePrevious.
            self changed.
            event wasHandled: true.
        }.

        KeySymbol Delete : {
            textCursor _ deleteNext.
            self changed.
            event wasHandled: true.
        }.
        KeySymbol Left : {
            textCursor _ advanceCharacters: -1.
            self changed.
            event wasHandled: true.
        }.
        KeySymbol Right : {
            textCursor _ advanceCharacters: 1.
            self changed.
            event wasHandled: true.
        }.
        _ : {}
        }.
    }.

    override method onTextInputEvent: (event: NorphTextInputEvent ref) ::=> Void := {
        super onTextInputEvent: event.
        event isSuppressed ifTrue: {
            return: void.
        }.

        textCursor ifNotNil: {
            textCursor _ insertString: event text.
            self changed
        }
    }.

    override method renderOn: (canvas: Canvas ref) ::=> Void := {
        super renderOn: canvas.

        textModel ifNil: { return: void }.

        canvas
            color: Float32x4 blue;
            fillRectangle: (RectangleF32 min: textCursor _ drawingPosition extent: Float32x2(1.0f, textCursor _ drawingHeight)).

        textModel _
            textSpansInRectangle: self localBounds do: {:(TextModelSpan ref)span :: Void |
                canvas
                    fontFaceWithSize: span fontFaceWithSize;
                    color: span color;
                    drawUTF8String: span utf8StringPointer size: span utf8StringSize withState: span textDrawingState
            }.
    }.

}.

}. ## End of namespace Norphic
