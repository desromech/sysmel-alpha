namespace Norphic definition: {

useNamespace: Std Math Geometry.

class SizerElement.

#**
 * I am a norph sizer. My job is to size and align different norphs.
 *#
class Sizer superclass: Std RCObject; definition: {
    protected field elements type: Std Collections Vector(SizerElement rcRef).

    abstract method minimalExtent => Float32x2.
    abstract method applyIntoBounds: (newBounds: RectangleF32) ::=> Void.

    virtual method extent => Float32x2 := {
        self minimalExtent
    }.

    inline method asSizerElement => SizerElement rcRef
        := (SizerSubSizerElement for: self) upCastFor: SizerElement.

    method add: (newElement: SizerElement rcRef const ref) ::=> Void := {
        elements add: newElement
    }.

    method addFirst: (newElement: SizerElement rcRef const ref) ::=> Void := {
        elements add: newElement
    }.

    macro method element: aWidgetOrASizer with: aBlock :=  {
        let sizerElement := __astBuilder gensym: #sizerElement.
        (``{
            let `,sizerElement mutable := `,aWidgetOrASizer asSizerElement.
            `,aBlock __macroInlineBlock: `,sizerElement.
            `,self add: `,sizerElement
        }) asSequenceWithoutLexicalScope
    }.

    macro method startElement: aWidgetOrASizer with: aBlock :=  {
        let sizerElement := __astBuilder gensym: #sizerElement.
        (``{
            let `,sizerElement mutable := `,aWidgetOrASizer asSizerElement.
            `,aBlock __macroInlineBlock: `,sizerElement .
            `,self addFirst: `,sizerElement
        }) asSequenceWithoutLexicalScope
    }.
}.

compileTime constant SizerRef := Sizer rcRef.

}. ## End of namespace Norphic
