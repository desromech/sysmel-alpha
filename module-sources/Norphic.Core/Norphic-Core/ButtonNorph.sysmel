namespace Norphic definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math Geometry.

#**
 * I am an abstract button widget norph.
 *#
class AbstractButtonMorph superclass: BorderedNorph; definition: {
    protected field isDown type: Boolean8.

    override method defaultColor => Float32x4
        := self theme _ buttonColor.

    override method onMouseEnterEvent: (event: NorphMouseEnterEvent ref) ::=> Void := {
        self changed.
    }.

    override method onMouseLeaveEvent: (event: NorphMouseLeaveEvent ref) ::=> Void := {
        self changed.
    }.

    override method onMouseButtonPressedEvent: (event: NorphMouseButtonPressedEvent ref) ::=> Void := {
        event isLeftButton ifFalse: {
            return: void.
        }.

        isDown := true.
        self changed.
        event wasHandled: true.
        self grabMouseCapture.
    }.

    override method onMouseButtonReleasedEvent: (event: NorphMouseButtonReleasedEvent ref) ::=> Void := {
        event isLeftButton ifFalse: {
            return: void.
        }.

        isDown := false.
        self changed.
        event wasHandled: true.
        self releaseMouseCapture.

        (self localBounds includesPoint: event position) ifTrue: {
            Stdn stdout << "TODO: Button activated"; nl.
        }
    }.

    override method color => Float32x4 := {
        let baseColor := super color.

        isDown ifTrue: {
            baseColor muchDarker.
        } ifFalse: {
            self hasMouseFocus ifTrue: {
                baseColor lighter lighter
            } ifFalse: {
                baseColor
            }
        }
    }.
}.

#**
 * I am a button widget norph with a text label.
 *#
class SimpleButtonMorph superclass: AbstractButtonMorph; definition: {
    protected field label type: StringNorph sharedPointer.

    method initialize => Void := {
        label := StringNorph sharedNew.

        let labelRef := label upCastFor: Norph.
        self addSubnorph: labelRef.

        let sizer := HorizontalBoxSizer sharedNew.
        sizer _ element: label do: {:constraints :: Void |
            constraints centered; allBorders; borderSize: 2.
        }.

        self
            sizer: (sizer upCastFor: Sizer);
            autolayout: true
    }.

    method text => Stdn String const ref := {
        label _ text.
    }.

    method text: (newLabel: Stdn String const ref) ::=> Void := {
        label _ text: newLabel
    }.
}.

}. ## End of namespace Norphic
