namespace Norphic definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Graphics GUI.
useNamespace: Stdn Math Geometry.

#**
 * I am a root norph that is a wrapper for a window created by a Window system.
 *#
class SystemWindowNorph superclass: RootNorph; definition: {
    protected field windowSystem type: WindowSystem sharedPointer.
    protected field window type: Window sharedPointer.
    protected field sceneRenderer type: WindowScene2DRenderer sharedPointer.
    protected field hasChanged type: Boolean8.

    override method defaultColor => Float32x4
        := self theme _ systemWindowBackground.

    meta definition: {
        method createFor: (windowSystem: WindowSystem sharedPointer const ref)
            title: (theTitle: Stdn String const ref) extent: (theExtent: Int32x2) ::=> InstanceType sharedPointer := {

            let creationInfo mutable type: WindowCreationInfo.
            creationInfo
                resizable: true;
                extent: theExtent;
                title: theTitle.
            self createFor: windowSystem  creationInfo: creationInfo
        }.

        method createFor: (windowSystem: WindowSystem sharedPointer const ref) creationInfo: (creationInfo: WindowCreationInfo const ref) ::=> InstanceType sharedPointer := {

            let window := windowSystem _ createWindow: creationInfo.
            window ifNil: {
                return: InstanceType sharedPointer nil
            }.

            ## Create the drawing surface.
            let renderer := window _ createScene2DRenderer.
            renderer ifNil: {
                return: InstanceType sharedPointer nil
            }.

            ## Create the system window norph.
            let result := SystemWindowNorph sharedNew.
            result _
                bounds: (RectangleF32 min: Float32x2 zeros extent: (creationInfo extent castTo: Float32x2));
                initializeWithWindowSystem: windowSystem window: window renderer: renderer.

            ## Create the event handler
            let eventHandler := SystemWindowNorphEventHandler sharedNew.
            eventHandler _ norph: result getPointer.
            window _ eventHandler: (eventHandler upCastFor: EventHandler).

            return: result
        }.
    }.

    inline method initializeWithWindowSystem: (theWindowSystem: WindowSystem sharedPointer const ref)
        window: (theWindow: Window sharedPointer const ref)
        renderer: (theRenderer: WindowScene2DRenderer sharedPointer const ref) ::=> Void := {

        windowSystem := theWindowSystem.
        window := theWindow.
        sceneRenderer := theRenderer.
    }.

    method render => Void := {
        sceneRenderer _
            clearColor: self color;
            renderScene: (self buildContentSceneGraphWith: sceneRenderer _ newSceneBuilder _);
            present
    }.

    override method setMouseCaptureNorph: (norph: Norph pointer) ::=> Void := {
        super setMouseCaptureNorph: norph.

        norph ifNil: {
            window _ releaseMouseCapture
        } ifNotNil: {
            window _ grabMouseCapture
        }
    }.

    override method destroy => Void := {
        window ifNotNil: {
            window _ close.
        }.
        window reset.
        windowSystem reset.

        super destroy.
    }.

    override method changed => Void := {
        hasChanged := true.
    }.

    inline method onTick => Void := {
        hasChanged ifTrue: {
            hasChanged := false.
            self render
        }
    }.

    override method currentActiveMouseCursorChanged => Void := {
        window _ setCursor: self mouseFocusNorphCursor
    }.
}.

class SystemWindowNorphEventHandler superclass: EventHandler; definition: {
    public field norph type: SystemWindowNorph pointer.

    override method onTickEvent: (event: TickEvent ref) ::=> Void := {
        norph _ onTick
    }.

    override method onExposeEvent: (event: ExposeEvent ref) ::=> Void := {
        norph _ render
    }.

    override method onWindowMovedEvent: (event: WindowMovedEvent ref) ::=> Void := {
        norph _ movedInto: event newPosition.
    }.

    override method onWindowResizingEvent: (event: WindowResizingEvent ref) ::=> Void := {
        norph _ extentChangedInto: event newSize.
    }.

    override method onWindowSizeChangedEvent: (event: WindowSizeChangedEvent ref) ::=> Void := {
        norph _ extentChangedInto: event newSize.
    }.

    override method onWindowCloseRequestEvent: (event: WindowCloseRequestEvent ref) ::=> Void := {
        norph _ destroy
    }.

    override method onKeyPressedEvent: (event: KeyPressedEvent ref) ::=> Void := {
        let convertedEvent mutable := NorphKeyPressedEvent()
            symbol: event symbol;
            modifiers: event modifiers;
            isRepeat: event isRepeat;
            yourself.
        norph _ dispatchKeyboardEvent: convertedEvent.
    }.

    override method onKeyReleasedEvent: (event: KeyReleasedEvent ref) ::=> Void := {
        let convertedEvent mutable := NorphKeyReleasedEvent()
            symbol: event symbol;
            modifiers: event modifiers;
            isRepeat: event isRepeat;
            yourself.
        norph _ dispatchKeyboardEvent: convertedEvent.
    }.

    override method onTextInputEvent: (event: TextInputEvent ref) ::=> Void := {
        let convertedEvent mutable := NorphTextInputEvent()
            text: event text;
            yourself.
        norph _ dispatchTextInputEvent: convertedEvent.
    }.

    override method onMouseMoveEvent: (event: MouseMoveEvent ref) ::=> Void := {
        let convertedEvent mutable := NorphMouseMoveEvent()
            mouseId: event mouseId;
            position: (event position castTo: Float32x2);
            modifiers: event modifiers;
            buttonState: event buttonState;
            delta: (event delta castTo: Float32x2);
            yourself.
        norph _ dispatchMouseEvent: convertedEvent
    }.

    override method onMouseButtonPressedEvent: (event: MouseButtonPressedEvent ref) ::=> Void := {
        let convertedEvent mutable := NorphMouseButtonPressedEvent()
            mouseId: event mouseId;
            position: (event position castTo: Float32x2);
            modifiers: event modifiers;
            button: event button;
            clickCount: event clickCount;
            yourself.
        norph _ dispatchMouseEvent: convertedEvent
    }.

    override method onMouseButtonReleasedEvent: (event: MouseButtonReleasedEvent ref) ::=> Void := {
        let convertedEvent mutable := NorphMouseButtonReleasedEvent()
            mouseId: event mouseId;
            position: (event position castTo: Float32x2);
            modifiers: event modifiers;
            button: event button;
            clickCount: event clickCount;
            yourself.
        norph _ dispatchMouseEvent: convertedEvent
    }.
}.

}. ## End of namespace Norphic
