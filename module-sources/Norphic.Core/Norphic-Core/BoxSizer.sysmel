namespace Norphic definition: {

useNamespace: Std Math Geometry.

#**
 * I am box sizer that packs its elements in a linear fashion.
 *#
class BoxSizer superclass: FullSizer; definition: {
    abstract method direction => Float32x2.

    inline method oppositeDirection => Float32x2
        := Float32x2 ones - self direction.

    override method minimalExtent => Float32x2 := {
        let directionExtentSum mutable := Float32x2 zeros.
        let maxOpppositeDirectionExtent mutable := Float32x2 zeros.

        let direction := self direction.
        let oppositeDirection := self oppositeDirection.

        elements do: {:each :: Void |
            let elementExtent := each minimalExtent.
            directionExtentSum := directionExtentSum + elementExtent*direction.
            maxOpppositeDirectionExtent := maxOpppositeDirectionExtent max: elementExtent * oppositeDirection.
        }.
        directionExtentSum + maxOpppositeDirectionExtent
    }.

    override method applyIntoBounds: (newBounds: RectangleF32) ::=> Void := {
        ## If there is only a single element, then fallback into the behavior of a full sizer.
        elements size <= 1 ifTrue: {
            return: (super applyIntoBounds: newBounds)
        }.

        let direction := self direction.
        let oppositeDirection := self oppositeDirection.
        let boundsExtent := newBounds extent.

        ## Compute the required extent and the total proportion sum.
        let requiredExtent mutable := 0.0f.
        let proportionSum mutable := 0.0f.
        elements do: {:each :: Void |
            let proportion := each proportion.
            proportion <= 0.0f ifTrue: {
                requiredExtent := requiredExtent + (each layoutComputationExtent dot: direction).
            } ifFalse: {
                proportionSum := proportionSum + proportion.
            }.
        }.

        ## Lay out the different elements
        let remainingDirectionExtent := ((boundsExtent dot: direction) - requiredExtent max: 0.0f)*direction.
        let oppositeExtent := boundsExtent * oppositeDirection.
        let currentPosition mutable := newBounds min.

        elements do: {:each :: Void |
            let proportion := each proportion.

            let elementExtent := proportion <= 0.0f ifTrue: {
                each layoutComputationExtent * direction + oppositeExtent.
            } ifFalse: {
                remainingDirectionExtent * proportion / proportionSum + oppositeExtent.
            }.

            let elementBounds := RectangleF32 min: currentPosition extent: elementExtent.
            each applyIntoBounds: elementBounds.
            currentPosition := currentPosition + elementExtent*direction.
        }
    }.
}.

#**
 * I am box sizer that packs its elements in a vertical linear fashion.
 *#
class VerticalBoxSizer superclass: BoxSizer; definition: {
    override method direction => Float32x2
        := Float32x2(0, 1).
}.

#**
 * I am box sizer that packs its elements in a vertical linear fashion.
 *#
class HorizontalBoxSizer superclass: BoxSizer; definition: {
    override method direction => Float32x2
        := Float32x2(1, 0).
}.

}. ## End of namespace Norphic
