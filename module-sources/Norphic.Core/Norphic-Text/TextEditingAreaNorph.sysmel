namespace Norphic definition: {

useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.
useNamespace: Std Math Geometry.

#**
 * I am norph whose task is to displaying a text model.
 *#
class TextEditingAreaNorph superclass: TextModelNorph; definition: {
    protected field textCursor type: TextModelCursor rcRef.
    public field isMultiLineEditor type: Boolean8.

    override method canHaveKeyboardFocus => Boolean8
        := false.
    override method handlesKeyboardEvents => Boolean8
        := true.
    override method handlesTextInputEvents => Boolean8
        := true.

    override method textModelChanged => Void := {
        textModel ifNil: {
            textCursor := nil.
            void
        } ifNotNil: {
            textCursor := textModel newCursor
        }.
        super textModelChanged.
    }.

    override method currentMouseCursor => CursorRef
        := SystemCursor Ibeam upCastFor: Cursor.

    override method onMouseButtonPressedEvent: (event: NorphMouseButtonPressedEvent ref) ::=> Void := {
        super onMouseButtonPressedEvent: event.

        event isLeftButton ifFalse: {
            return: void.
        }.

        textCursor ifNotNil: {
            textCursor setAtDrawingPosition: event position.
            self changed.
        }.
    }.

    override method onKeyPressedEvent: (event: NorphKeyPressedEvent ref) ::=> Void := {
        super onKeyPressedEvent: event.

        event isSuppressed || textCursor isNil ifTrue: {
            return: void.
        }.

        event symbol selectCase: #{
        KeySymbol Backspace : {
            textCursor deletePrevious.
            self changed.
            event wasHandled: true.
        }.

        KeySymbol Delete : {
            textCursor deleteNext.
            self changed.
            event wasHandled: true.
        }.
        KeySymbol Left : {
            textCursor advanceCharacters: -1.
            self changed.
            event wasHandled: true.
        }.
        KeySymbol Right : {
            textCursor advanceCharacters: 1.
            self changed.
            event wasHandled: true.
        }.
        _ : {}
        }.

        isMultiLineEditor ifTrue: {
            event symbol selectCase: #{
            (KeySymbol Return, KeySymbol KpEnter) asValueInSetPattern  : {
                textCursor insertString: textModel newLineString.
                self changed.
            }.
            KeySymbol Up : {
                textCursor advanceLines: -1.
                self changed.
                event wasHandled: true.
            }.
            KeySymbol Down : {
                textCursor advanceLines: 1.
                self changed.
                event wasHandled: true.
            }.
            _ : {}
            }.
        }.
    }.

    override method onTextInputEvent: (event: NorphTextInputEvent ref) ::=> Void := {
        super onTextInputEvent: event.
        event isSuppressed ifTrue: {
            return: void.
        }.

        textCursor ifNotNil: {
            textCursor insertString: event text.
            self changed
        }
    }.

    override method buildSceneGraphWith: (builder: NorphSceneBuilderRef const ref) ::=> NorphSceneNodeRef := {
        let textNode := super buildSceneGraphWith: builder.
        let result mutable := textNode.
        self canReceiveKeyboardEvents && textCursor isNotNil && textModel isNotNil ifTrue: {
            let caret := builder fillRectangle: (RectangleF32 min: textCursor drawingPosition extent: Float32x2(1.0f, textCursor drawingHeight)) color: Float32x4 blue.
            result := caret -- textNode
        }.

        result.

    }.
}.

}. ## End of namespace Norphic
