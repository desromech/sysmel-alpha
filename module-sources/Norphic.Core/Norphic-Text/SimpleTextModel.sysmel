namespace Norphic definition: {

useNamespace: Std Graphics Core.
useNamespace: Std Math Geometry.

class SimpleTextModelCursor.

#**
 * Simplistic and slow text model.
 *#
class SimpleTextModel superclass: TextModel; definition: {
    public field fontFaceWithSize type: FontFaceWithSizeRef.
    public field color type: Float32x4.
    public field textBuffer type: Std Collections Vector(Char8).

    override method text => Std String := {
        Std String fromUTF8: textBuffer data size: textBuffer size
    }.

    override method text: (newText: Std String const ref) ::=> Void := {
        textBuffer removeAll.
        textBuffer resizeTo: newText size.
        0 until: newText size do: {:i :: Void |
            textBuffer[i] := newText[i]
        }
    }.

    override method newCursor => TextModelCursor rcPointer := {
        let result := SimpleTextModelCursor rcNew.
        result _ model: self asRCPointer.
        result upCastFor: TextModelCursor
    }.

    override method textSpansInRectangle: (rectangle: RectangleF32) do: (iterationBlock: TextModelSpanIterationBlock) ::=> Void := {
        textBuffer isEmpty ifTrue: { return: void }.

        let span mutable := TextModelSpan ().
        span
            color: color;
            fontFaceWithSize: fontFaceWithSize;
            utf8String: textBuffer asArraySlice;
            textDrawingState: (TextDrawingState position: Float32x2(0, fontFaceWithSize ascender)).

        iterationBlock(span).
    }.

    method topPositionOfCharacterAt: (bufferPosition: UIntPointer) ::=> Float32x2 := {

        let currentState mutable := TextDrawingState().

        0 until: (bufferPosition + 1 min: textBuffer size) do: {:i :: Void |
            let character := textBuffer[i].
            currentState character: character.

            currentState := fontFaceWithSize computeNewDrawingState: currentState.
        }.

        bufferPosition < textBuffer size ifTrue: {
            currentState previousPosition
        } ifFalse: {
            currentState currentPosition
        }
    }.

    method bufferPositionForDrawingPosition: (drawingPosition: Float32x2) ::=> UIntPointer := {

        let currentState mutable := TextDrawingState position: Float32x2(0, fontFaceWithSize ascender).
        let bestBufferPosition mutable type: UIntPointer := 0.
        let bestBufferPositionDistance mutable := Float32 infinity.

        0 until: textBuffer size do: {:i :: Void |
            let character := textBuffer[i].
            currentState character: character.

            currentState := fontFaceWithSize computeNewDrawingState: currentState.

            let distance := (currentState previousPosition - drawingPosition) length.
            distance < bestBufferPositionDistance ifTrue: {
                bestBufferPositionDistance := distance.
                bestBufferPosition := i.
            }.
        }.

        {
            let distance := (currentState currentPosition - drawingPosition) length.
            distance < bestBufferPositionDistance ifTrue: {
                bestBufferPositionDistance := distance.
                bestBufferPosition := textBuffer size.
            }.
        }.

        bestBufferPosition
    }.
}.

#**
 * Simplistic and slow text model cursor.
 *#
class SimpleTextModelCursor superclass: TextModelCursor; definition: {
    protected field model type: SimpleTextModel rcPointer.
    private field bufferPosition type: UIntPointer.

    method model: (theModel: SimpleTextModel rcPointer const ref) ::=> Void := {
        model := theModel
    }.

    override method drawingPosition => Float32x2
        := model _ topPositionOfCharacterAt: bufferPosition.

    override method drawingHeight => Float32
        := model _ fontFaceWithSize height.

    override method model => TextModel ref
        := model _.

    override method nextCharacter ::=> Int32 := {
        let textBuffer ref := model _ textBuffer.
        bufferPosition < textBuffer size ifTrue: {
            return: textBuffer[bufferPosition]
        }.

        -1
    }.

    override method previousCharacter ::=> Int32 := {
        let textBuffer ref := model _ textBuffer.
        bufferPosition > 0 ifTrue: {
            return: textBuffer[bufferPosition - 1]
        }.

        -1
    }.

    override method moveIntoNextCharacter ::=> Void := {
        bufferPosition := bufferPosition + 1 min: model _ textBuffer size
    }.

    override method moveIntoPreviousCharacter ::=> Void := {
        bufferPosition > 0 ifTrue: {
            bufferPosition := bufferPosition - 1
        }
    }.

    override method deleteNext ::=> Boolean8 := {
        let textBuffer ref := model _ textBuffer.
        bufferPosition := bufferPosition min: textBuffer size.
        bufferPosition < textBuffer size ifTrue: {
            bufferPosition until: textBuffer size - 1 do: {:i :: Void |
                textBuffer[i] := textBuffer[i + 1]
            }.
            textBuffer removeLast.
        }.

        return: false.
    }.

    override method deletePrevious ::=> Boolean8 := {
        bufferPosition > 0 ifFalse: {
            return: false.
        }.

        bufferPosition := bufferPosition - 1.
        self deleteNext.
    }.

    override method setAtDrawingPosition: (position: Float32x2) ::=> Void := {
        bufferPosition := model _ bufferPositionForDrawingPosition: position
    }.

    override method insertString: (text: Std String const ref) ::=> Void := {
        let textBuffer ref := model _ textBuffer.

        bufferPosition := bufferPosition min: textBuffer size.
        textBuffer addAll: text asArraySlice beforeIndex: bufferPosition.
        bufferPosition := bufferPosition + text size min: textBuffer size.
    }.

}.

}. ## End of namespace Norphic
