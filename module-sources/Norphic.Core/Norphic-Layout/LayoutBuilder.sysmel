namespace Norphic definition: {

useNamespace: Std Math Geometry.

compileTime constant LayoutBuilderBlock := (LayoutBuilder ref => Void) nativeStackBlockClosure.
compileTime constant SizerLayoutBuilderBlock := (SizerLayoutBuilder ref => Void) nativeStackBlockClosure.
compileTime constant PanedLayoutBuilderBlock := (PanedNorphLayoutBuilder ref => Void) nativeStackBlockClosure.
compileTime constant LayoutConstraintsBlock := (SizerElement rcRef const ref => Void) nativeStackBlockClosure.

class LayoutBuilder definition: {
    public field owner type: NorphRef.

    virtual method ownerForSizer => NorphRef
        := owner.

    method verticalBoxWith: (buildBlock: SizerLayoutBuilderBlock) constraints: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        self addSubBuilderResult: (SizerLayoutBuilder()
            owner: self ownerForSizer;
            forVerticalBox;
            buildWith: buildBlock;
            yourself) with: constraintsBlock
    }.

    method verticalBoxWith: (buildBlock: SizerLayoutBuilderBlock) ::=> Void
        := self verticalBoxWith: buildBlock constraints: nil.

    method horizontalBoxWith: (buildBlock: SizerLayoutBuilderBlock) constraints: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        self addSubBuilderResult: (SizerLayoutBuilder()
            owner: self ownerForSizer;
            forHorizontalBox;
            buildWith: buildBlock;
            yourself) with: constraintsBlock
    }.

    method horizontalBoxWith: (buildBlock: SizerLayoutBuilderBlock) ::=> Void
        := self horizontalBoxWith: buildBlock constraints: nil.

    method horizontalPanedWith: (buildBlock: PanedLayoutBuilderBlock) constraints: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        let builder mutable := PanedNorphLayoutBuilder()
            forHorizontalPaned;
            buildWith: buildBlock;
            yourself.
        self addSubBuilderResult: builder with: constraintsBlock
    }.

    method horizontalPanedWith: (buildBlock: PanedLayoutBuilderBlock) ::=> Void
        := self horizontalPanedWith: buildBlock constraints: nil.

    method verticalPanedWith: (buildBlock: PanedLayoutBuilderBlock) constraints: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        let builder mutable := PanedNorphLayoutBuilder()
            forVerticalPaned;
            buildWith: buildBlock;
            yourself.
        self addSubBuilderResult: builder with: constraintsBlock
    }.

    method verticalPanedWith: (buildBlock: PanedLayoutBuilderBlock) ::=> Void
        := self verticalPanedWith: buildBlock constraints: nil.

    abstract method addSubBuilderResult: (subBuilder: SizerLayoutBuilder ref) with: (constraintsBlock: LayoutConstraintsBlock) ::=> Void.
    abstract method addSubBuilderResult: (subBuilder: NorphLayoutBuilder ref) with: (constraintsBlock: LayoutConstraintsBlock) ::=> Void.

}.

class SizerLayoutBuilder superclass: LayoutBuilder; definition: {
    public field sizer type: SizerRef.

    method forVerticalBox => Void := {
        sizer := VerticalBoxSizer new upCastFor: Sizer
    }.

    method forHorizontalBox => Void := {
        sizer := HorizontalBoxSizer new upCastFor: Sizer
    }.

    method buildWith: (aBlock: SizerLayoutBuilderBlock) ::=> Void := {
        aBlock(self)
    }.

    method norphElement: (norph: NorphRef const ref) with: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        sizer element: norph with: constraintsBlock.
        owner addSubnorph: norph.
    }.

    macro method element: anElement with: constraintsBlock := ``(`,self norphElement: (`,anElement upCastFor: Norphic Norph) with: `,constraintsBlock).

    override method addSubBuilderResult: (subBuilder: SizerLayoutBuilder ref) with: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        constraintsBlock ifNil: {
            sizer element: subBuilder sizer with: {:(SizerElementRef const ref)c :: Void | c expanded}.
        } ifNotNil: {
            sizer element: subBuilder sizer with: constraintsBlock.
        }.
    }.

    override method addSubBuilderResult: (subBuilder: NorphLayoutBuilder ref) with: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        constraintsBlock ifNil: {
            sizer element: subBuilder owner with: {:(SizerElementRef const ref)c :: Void | c expanded}.
        } ifNotNil: {
            sizer element: subBuilder owner with: constraintsBlock.
        }.
        owner addSubnorph: subBuilder owner
    }.
}.

class NorphLayoutBuilder superclass: LayoutBuilder; definition: {
    method on: (anOwner: NorphRef const ref) buildWith: (aBlock: LayoutBuilderBlock) ::=> Void := {
        owner := anOwner.
        aBlock(self)
    }.

    override method addSubBuilderResult: (subBuilder: SizerLayoutBuilder ref) with: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        let fullSizer mutable := subBuilder sizer.
        constraintsBlock ifNotNil: {
            fullSizer := VerticalBoxSizer new
                element: fullSizer with: constraintsBlock;
                upCastFor: Sizer
        }.

        owner sizer: fullSizer
    }.

    override method addSubBuilderResult: (subBuilder: NorphLayoutBuilder ref) with: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        let fullSizer := VerticalBoxSizer new.
        constraintsBlock ifNotNil: {
            fullSizer element: subBuilder owner with: constraintsBlock.
        } ifNil: {
            fullSizer element: subBuilder owner with: {:(SizerElementRef const ref)c :: Void | c expanded}.
        }.

        owner
            sizer: (fullSizer upCastFor: Sizer);
            addSubnorph: subBuilder owner.
    }.
}.

class PanedNorphLayoutBuilder superclass: NorphLayoutBuilder; definition: {
    field panedNorph type: PanedNorphRef.

    override method ownerForSizer => NorphRef := {
        Norph new
            color: Float32x4 transparent;
            yourself
    }.

    method buildWith: (aBlock: PanedLayoutBuilderBlock) ::=> Void := {
        aBlock(self)
    }.

    method forHorizontalPaned => Void := {
        panedNorph := HorizontalPanedNorph new upCastFor: PanedNorph.
        owner := panedNorph upCastFor: Norph.
    }.

    method forVerticalPaned => Void := {
        panedNorph := VerticalPanedNorph new upCastFor: PanedNorph.
        owner := panedNorph upCastFor: Norph.
    }.

    method norphElement: (norph: NorphRef const ref) ::=> Void
        := self norphElement: norph proportion: 1.

    method norphElement: (norph: NorphRef const ref) proportion: (proportion: Float32) ::=> Void := {
        panedNorph addElement: norph proportion: proportion.
    }.

    macro method element: anElement := ``(`,self norphElement: (`,anElement upCastFor: Norphic Norph)).
    macro method element: anElement proportion: proportion := ``(`,self norphElement: (`,anElement upCastFor: Norphic Norph) proportion: `,proportion).

    override method addSubBuilderResult: (subBuilder: SizerLayoutBuilder ref) with: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        subBuilder owner
            sizer: subBuilder sizer;
            autolayout: true.
        self norphElement: subBuilder owner
    }.

    override method addSubBuilderResult: (subBuilder: NorphLayoutBuilder ref) with: (constraintsBlock: LayoutConstraintsBlock) ::=> Void := {
        self norphElement: subBuilder owner
    }.
}.

Norph extend: {
    method buildLayoutWith: (aBlock: LayoutBuilderBlock) ::=> Void := {
        NorphLayoutBuilder()
            on: self asRCRef buildWith: aBlock
    }.
}.

}. ## End of namespace Norphic
