namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Std Math Geometry.

#**
 * I am a handle for a texture.
 *#
class Texture superclass: RenderingDriverObjectHandle; definition: {
    abstract method description => TextureDescription.

    abstract method mapLevel: (level: UIntPointer) layer: (layer: UIntPointer) accessMask: (access: MappingAccessMask) region: (region: RectangleI32 const pointer) ::=> Void pointer.
    abstract method unmapLevel => Void.

    virtual method readTextureLevel: (level: UIntPointer) layer: (layer: UIntPointer) pitch: (pitch: IntPointer) slicePitch: (slicePitch: IntPointer) buffer: (buffer: Void pointer) ::=> Void := {
        self readTextureLevel: level layer: layer pitch: pitch slicePitch: slicePitch sourceRegion: nil destExtent: nil buffer: buffer
    }.

    abstract method readTextureLevel: (level: UIntPointer) layer: (layer: UIntPointer) pitch: (pitch: IntPointer) slicePitch: (slicePitch: IntPointer)
        sourceRegion: (sourceRegion: RectangleI32 const pointer) destExtent: (destExtent: UInt32x3 pointer) buffer: (buffer: Void pointer) ::=> Void.

    virtual method uploadTextureLevel: (level: UIntPointer) layer: (layer: UIntPointer) pitch: (pitch: IntPointer) slicePitch: (slicePitch: IntPointer) data: (data: Void const pointer) ::=> Void := {
        self uploadTextureLevel: level layer: layer pitch: pitch slicePitch: slicePitch sourceRegion: nil destExtent: nil data: data
    }.

    abstract method uploadTextureLevel: (level: UIntPointer) layer: (layer: UIntPointer) pitch: (pitch: IntPointer) slicePitch: (slicePitch: IntPointer)
        sourceRegion: (sourceRegion: RectangleI32 const pointer) destExtent: (destExtent: UInt32x3 pointer) data: (data: Void const pointer) ::=> Void.

    abstract method getFullViewDescription => TextureViewDescription.
    abstract method createView: (viewDescription: TextureViewDescription const ref) ::=> TextureViewPtr.
    abstract method getOrCreateFullView => TextureViewPtr.

    virtual method uploadTextureData: (textureData: TextureDataRef const ref) ::=> Void := {
        let dataLevelIndex mutable := 0u.
        0 until: textureData layers do: {:layerIndex :: Void |
            0 until: textureData miplevels do: {:levelIndex :: Void |
                let levelData ref := textureData levelsData[dataLevelIndex].
                self uploadTextureLevel: levelIndex layer: layerIndex pitch: (levelData pitch castTo: IntPointer) slicePitch: (levelData slicePitch castTo: IntPointer) data: textureData pixels getPointer + levelData dataOffset.
                dataLevelIndex := dataLevelIndex + 1.
            }
        }.
    }.

    virtual method asTextureWithView => TextureWithView rcPointer := {
        let mainView := self getOrCreateFullView.
        mainView ifNil: {return: TextureWithViewPtr nil}.

        let result := TextureWithView rcNew.
        result _
            texture: self asRCPointer;
            textureView: mainView.
        result
    }.
}.

compileTime constant TexturePtr := Texture rcPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
