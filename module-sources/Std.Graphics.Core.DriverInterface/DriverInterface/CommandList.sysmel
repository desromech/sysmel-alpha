namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Std Math Geometry.

#**
 * I am a handle for a command list.
 *#
class CommandList superclass: RenderingDriverObjectHandle; definition: {
    virtual method asRenderingDeviceCommandList => CommandList pointer := nil.

    abstract method resetFor: (allocator: CommandListAllocatorRef const ref) initialPipelineState: (initialPipeline: PipelineStateRef const ref) ::=> Void.
    abstract method close => Void.

    abstract method useShaderSignature: (shaderSignature: ShaderSignatureRef const ref) ::=> Void.
    abstract method setViewport: (rectangle: RectangleI32) ::=> Void.
    abstract method setScissor: (rectangle: RectangleI32) ::=> Void.
    abstract method usePipelineState: (pipelineState: PipelineStateRef const ref) ::=> Void.
    abstract method useVertexBinding: (vertexBinding: VertexBindingRef const ref) ::=> Void.
    abstract method useIndexBuffer: (buffer: BufferRef const ref) ::=> Void.
    abstract method useIndexBuffer: (buffer: BufferRef const ref) at: (offset: UIntPointer) stride: (stride: UIntPointer) ::=> Void.
    abstract method useDrawIndirectBuffer: (buffer: BufferRef const ref) ::=> Void.
    abstract method useComputeDispatchIndirectBuffer: (buffer: BufferRef const ref) ::=> Void.
    abstract method useGraphicShaderBindings: (resourcesBinding: ShaderResourceBindingsRef const ref) ::=> Void.
    abstract method useComputeShaderBindings: (resourcesBinding: ShaderResourceBindingsRef const ref) ::=> Void.
    abstract method drawArrays: (vertexCount: UInt32) instanceCount: (instanceCount: UInt32) firstVertex: (firstVertex: UInt32) baseInstance: (baseInstance: UInt32) ::=> Void.
    abstract method drawArraysIndirect: (offset: UIntPointer) drawCount: (drawCount: UIntPointer) ::=> Void.
    abstract method drawElements: (indexCount: UInt32) instanceCount: (instanceCount: UInt32) firstIndex: (firstVertex: UInt32) baseVertex: (baseVertex: UInt32) baseInstance: (baseInstance: UInt32) ::=> Void.
    abstract method drawElementsIndirect: (offset: UIntPointer) drawCount: (drawCount: UIntPointer) ::=> Void.
    abstract method dispatchCompute: (groupCount: UInt32x3) ::=> Void.
    abstract method dispatchComputeIndirect: (offset: UInt32) ::=> Void.
    abstract method setStencilReference: (reference: UInt32) ::=> Void.
    abstract method executeBundle: (bundle: CommandList rcRef const ref) ::=> Void.

    abstract method beginRenderPass: (renderPass: RenderPassRef const ref) on: (framebuffer: FramebufferRef const ref) contentOnBundle: (contentOnBundle: Boolean8) ::=> Void.
    abstract method endRenderPass ::=> Void.

    abstract method resolveFramebuffer: (source: FramebufferRef const ref) into: (destination: FramebufferRef const ref) ::=> Void.
    abstract method resolveTexture: (source: TextureRef const ref) level: (sourceLevel: UInt32) layer: (sourceLayer: UInt32)
        into: (destination: TextureRef const ref) level: (destinationLevel: UInt32) layer: (destinationLayer: UInt32)
        levelCount: (levelCount: UInt32) layerCount: (layerCount: UInt32)
        aspect: (aspect: TextureAspect) ::=> Void.
    abstract method pushConstants: (values: UInt8 const pointer) size: (size: UInt32) at: (offset: UInt32) ::=> Void.
    abstract method memoryBarrierFrom: (sourceStage: PipelineStageMask) accesses: (sourceAccesses: AccessMask) to: (destStage: PipelineStageMask) accesses: (destAccesses: AccessMask) ::=> Void.
    abstract method buffer: (buffer: BufferRef const ref) offset: (offset: UIntPointer) size: (size: UIntPointer) memoryBarrierFrom: (sourceStage: PipelineStageMask) accesses: (sourceAccesses: AccessMask) to: (destStage: PipelineStageMask) accesses: (destAccesses: AccessMask) ::=> Void.
    abstract method texture: (texture: TextureRef const ref) subresourceRange: (subresourceRange: TextureSubResourceRange const ref) memoryBarrierFrom: (sourceStage: PipelineStageMask) accesses: (sourceAccesses: AccessMask) to: (destStage: PipelineStageMask) accesses: (destAccesses: AccessMask) transitionFrom: (oldUsageMode: TextureUsageMode) into: (newUsageMode: TextureUsageMode) ::=> Void.
    abstract method pushBuffer: (buffer: BufferRef const ref) transitionBarrierFrom: (oldUsageMode: BufferUsageMode) into: (newUsageMode: BufferUsageMode) ::=> Void.
    abstract method pushTexture: (texture: TextureRef const ref) subresourceRange: (subresourceRange: TextureSubResourceRange const ref) transitionBarrierFrom: (oldUsageMode: TextureUsageMode) into: (newUsageMode: TextureUsageMode) ::=> Void.
    abstract method popBufferTransitionBarrier ::=> Void.
    abstract method popTextureTransitionBarrier ::=> Void.
    abstract method copyFromBuffer: (sourceBuffer: BufferRef const ref) offset: (sourceOffset: UIntPointer) into: (destBuffer: BufferRef const ref) offset: (destOffset: UIntPointer) size: (copySize: UIntPointer) ::=> Void.
    abstract method copyFromBuffer: (sourceBuffer: BufferRef const ref) intoTexture: (destTexture: TextureRef const ref) region: (copyRegion: BufferImageCopyRegion const ref) ::=> Void.
    abstract method copyFromTexture: (sourceTexture: TextureRef const ref) intoBuffer: (destBuffer: BufferRef const ref) region: (copyRegion: BufferImageCopyRegion const ref) ::=> Void.
    abstract method copyFromTexture: (sourceTexture: TextureRef const ref) intoTexture: (destTexture: TextureRef const ref) region: (copyRegion: ImageCopyRegion const ref) ::=> Void.

    virtual method dumpToFileNamed: (fileName: Char8 const pointer) ::=> Void := {}.

    virtual method resetFor: (allocator: CommandListAllocatorRef const ref) ::=> Void
        := self resetFor: allocator initialPipelineState: PipelineStateRef nil.
}.

compileTime constant CommandListRef := CommandList rcRef.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
