namespace Std definition: {
namespace Math definition: {
namespace Geometry definition: {

sealed template GenericFrustum(ST: Type)
    := class superclass: GenericGeometricShape(ST); definition: {
    public field leftBottomNear type: Vector3.
    public field rightBottomNear type: Vector3.
    public field leftTopNear type: Vector3.
    public field rightTopNear type: Vector3.

    public field leftBottomFar type: Vector3.
    public field rightBottomFar type: Vector3.
    public field leftTopFar type: Vector3.
    public field rightTopFar type: Vector3.

    public field planes type: (Plane array: 6).

    const inline method hash => Std Hash
        := leftBottomNear hash ^ rightBottomNear hash ^ leftTopNear hash ^ rightTopNear hash ^
          leftBottomFar hash ^ rightBottomFar hash ^ leftTopFar hash ^ rightTopFar hash.

    const inline method = (other: SelfType const ref) ::=> Boolean8
        := leftBottomNear = other leftBottomNear &&
        rightBottomNear = other rightBottomNear &&
        leftTopNear = other leftTopNear &&
        rightTopNear = other rightTopNear &&

        leftBottomFar = other leftBottomFar &&
        rightBottomFar = other rightBottomFar &&
        leftTopFar = other leftTopFar &&
        rightTopFar = other rightTopFar.

    Std Utility NotEqualsMethodMixin.

    inline method makeFrustumFromStandardProjectionMatrix: (matrix: Matrix4x4) ::=> Void := {
        let inverseMatrix := matrix inverse.

        let point mutable := inverseMatrix * (Vector4 x: -1 y: -1 z: 0 w: 1).
        leftBottomNear := point xyz / point w.

        point := inverseMatrix * (Vector4 x: 1 y: -1 z: 0 w: 1).
        rightBottomNear := point xyz / point w.

        point := inverseMatrix * (Vector4 x: -1 y: 1 z: 0 w: 1).
        leftTopNear := point xyz / point w.

        point := inverseMatrix * (Vector4 x: 1 y: 1 z: 0 w: 1).
        rightTopNear := point xyz / point w.

        point := inverseMatrix * (Vector4 x: -1 y: -1 z: 1 w: 1).
        leftBottomFar := point xyz / point w.

        point := inverseMatrix * (Vector4 x: 1 y: -1 z: 1 w: 1).
        rightBottomFar := point xyz / point w.

        point := inverseMatrix * (Vector4 x: -1 y: 1 z: 1 w: 1).
        leftTopFar := point xyz / point w.

        point := inverseMatrix * (Vector4 x: 1 y: 1 z: 1 w: 1).
        rightTopFar := point xyz / point w.
    }.

    inline method makeFrustumLeft: (left: Scalar) right: (right: Scalar) bottom: (bottom: Scalar) top: (top: Scalar) near: (near: Scalar) far: (far: Scalar) ::=> Void := {
        leftBottomNear := Vector3 x: left y: bottom z: near negated.
        rightBottomNear := Vector3 x: right y: bottom z: near negated.
        leftTopNear := Vector3 x: left y: top z: near negated.
        rightTopNear := Vector3 x: right y: top z: near negated.

        let factor := far / near.
        leftBottomFar := leftBottomNear * factor.
        rightBottomFar := rightBottomNear * factor.
        leftTopFar := leftTopNear * factor.
        rightTopFar := rightTopNear * factor.

        self computePlanes.
    }.

    inline method makeOrthoLeft: (left: Scalar) right: (right: Scalar) bottom: (bottom: Scalar) top: (top: Scalar) near: (near: Scalar) far: (far: Scalar) ::=> Void := {
        leftBottomNear := Vector3 x: left y: bottom z: near negated.
        rightBottomNear := Vector3 x: right y: bottom z: near negated.
        leftTopNear := Vector3 x: left y: top z: near negated.
        rightTopNear := Vector3 x: right y: top z: near negated.

        leftBottomFar := Vector3 x: left y: bottom z: far negated.
        rightBottomFar := Vector3 x: right y: bottom z: far negated.
        leftTopFar := Vector3 x: left y: top z: far negated.
        rightTopFar := Vector3 x: right y: top z: far negated.

        self computePlanes.
    }.

    inline method makePerspectiveFovY: (fovy: Scalar) aspect: (aspect: Scalar) near: (near: Scalar) far: (far: Scalar) ::=> Void := {
        let fovyRad := fovy degreesToRadians * 0.5f.
        let top := near * fovyRad tan.
        let right := top * aspect.
        self makeFrustumLeft: right negated right: right bottom: top negated top: top near: near far: far
    }.

    const inline method normalizedPointInFarPlane: (normalizedPoint: Vector2) ::=> Vector3
        := (leftBottomFar interpolateTo: rightBottomFar at: normalizedPoint x) interpolateTo:
            (leftTopFar interpolateTo: rightTopFar at: normalizedPoint x) at: normalizedPoint y.

    const inline method normalizedPointInNearPlane: (normalizedPoint: Vector2) ::=> Vector3
        := (leftBottomNear interpolateTo: rightBottomNear at: normalizedPoint x) interpolateTo:
            (leftTopNear interpolateTo: rightTopNear at: normalizedPoint x) at: normalizedPoint y.

    const inline method rayForNormalizedPoint: (normalizedPoint: Vector2) ::=> Ray3d := {
        let nearPoint := self normalizedPointInNearPlane: normalizedPoint.
        let farPoint := self normalizedPointInFarPlane: normalizedPoint.

        Ray3d from: nearPoint to: farPoint
    }.

    const inline method transformedWith: (transform: ReversibleAffineTransform3d const ref) ::=> SelfType := {
        SelfType()
            leftBottomNear: (transform transformPosition: leftBottomNear);
            rightBottomNear: (transform transformPosition: rightBottomNear);
            leftTopNear: (transform transformPosition: leftTopNear);
            rightTopNear: (transform transformPosition: rightTopNear);
            leftBottomFar: (transform transformPosition: leftBottomFar);
            rightBottomFar: (transform transformPosition: rightBottomFar);
            leftTopFar: (transform transformPosition: leftTopFar);
            rightTopFar: (transform transformPosition: rightTopFar);
            computePlanes;
            yourself
    }.

    const inline method splitAtNearLambda: (splitNearLambda: Scalar) farLambda: (splitFarLambda: Scalar) ::=> SelfType := {
        SelfType()
            leftBottomNear: (leftBottomNear interpolateTo: leftBottomFar at: splitNearLambda);
            rightBottomNear: (rightBottomNear interpolateTo: rightBottomFar at: splitNearLambda);
            leftTopNear: (leftTopNear interpolateTo: leftTopFar at: splitNearLambda);
            rightTopNear: (rightTopNear interpolateTo: rightTopFar at: splitNearLambda);

            leftBottomFar: (leftBottomNear interpolateTo: leftBottomFar at: splitFarLambda);
            rightBottomFar: (rightBottomNear interpolateTo: rightBottomFar at: splitFarLambda);
            leftTopFar: (leftTopNear interpolateTo: leftTopFar at: splitFarLambda);
            rightTopFar: (rightTopNear interpolateTo: rightTopFar at: splitFarLambda);
            computePlanes;
            yourself
    }.

    const inline method corners => (Vector3 array: 8)
        := Vector3 array(leftBottomNear, rightBottomNear, leftTopNear, rightTopNear,
        leftBottomFar, rightBottomFar, leftTopFar, rightTopFar).

    const inline method boundingBox => Box := {
        let result mutable := Box point: leftBottomNear.
        result := result unionWith: rightBottomNear.
        result := result unionWith: leftTopNear.
        result := result unionWith: rightTopNear.

        result := result unionWith: leftBottomFar.
        result := result unionWith: rightBottomFar.
        result := result unionWith: leftTopFar.
        result unionWith: rightTopFar.
    }.

    const inline method nearPlane => Plane const ref
        := planes first.

    const inline method farPlane => Plane const ref
        := planes second.

    const inline method leftPlane => Plane const ref
        := planes third.

    const inline method rightPlane => Plane const ref
        := planes fourth.

    const inline method bottomPlane => Plane const ref
        := planes fifth.

    const inline method topPlane => Plane const ref
        := planes sixth.

    inline method computePlanes => Void := {
        planes := Plane array(
            ## Near plane
    		(Plane point: leftBottomNear point: rightBottomNear point: leftTopNear),
    		## Far plane
    		(Plane point: rightBottomFar point: leftBottomFar point: leftTopFar),

    		## Left
    		(Plane point: leftBottomNear point: leftTopNear point: leftTopFar),
    		## Right
    		(Plane point: rightTopNear point: rightBottomNear point: rightTopFar),

    		## Bottom
    		(Plane point: rightBottomNear point: leftBottomNear point: leftBottomFar),
    		## Top
    		(Plane point: leftTopNear point: rightTopNear point: leftTopFar)
        ).
    }.

    const inline method isBoxOutside: (box: Box const ref) ::=> Boolean8 := {
        ## This technique comes from this article: http://www.lighthouse3d.com/tutorials/view-frustum-culling/geometric-approach-testing-boxes-ii/
        planes do: {:each :: Void |
            (each isInFront: (box negativeVertex: each normal)) ifTrue: {
                return: true
            }
        }.

        false
    }.

    const inline method intersectsOrContainsBox: (box: Box const ref) ::=> Boolean8
        := (self isBoxOutside: box) not.
}.

compileTime constant FrustumF32 := GenericFrustum(Float32).
compileTime constant FrustumF64 := GenericFrustum(Float64).

} ## End of namespace Geometry
} ## End of namespace Math
} ## End of namespace Std
