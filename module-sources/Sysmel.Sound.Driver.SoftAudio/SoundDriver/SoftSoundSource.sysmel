namespace Stdn definition: {
namespace Sound definition: {

#**
 * I am a software based sound buffer.
 *#
class SoftSoundSource superclass: SoundSource; definition: {
    field description type: SoundSourceDescription.
    field generator type: SoundGeneratorPtr.
    field playbackDevice type: SoftPlaybackDevicePtr.
    field isPlaying type: Boolean8.
    field playbackPosition type: UIntPointer.

    method initializeWith: (theDescription: SoundSourceDescription const ref) playbackDevice: (theDevice: SoftPlaybackDevicePtr const ref) ::=> Void := {
        description := theDescription.
        playbackDevice := theDevice.
    }.

    method initializeWithGenerator: (theGenerator: SoundGeneratorPtr const ref) playbackDevice: (theDevice: SoftPlaybackDevicePtr const ref) ::=> Void := {
        generator := theGenerator.
        playbackDevice := theDevice.
    }.

    method resetPlaybackPosition => Void := {
        playbackPosition := 0.
        generator ifNotNil: {
            generator _ resetState.
        }.

    }.

    override method play => Void := {
        self resetPlaybackPosition.
        self resume.
    }.

    override method resume => Void := {
        isPlaying := true.
        playbackDevice _ activateSoundSource: self asSharedPointer.
    }.

    override method stop => Void := {
        self resetPlaybackPosition.
        self pause
    }.

    override method pause => Void := {
        isPlaying := false.
    }.

    method mixSamples: (sampleCount: UInt32) samplePeriod: (samplePeriod: Float32) ontoBuffer: (mixBuffer: Float32x2 pointer) ::=> Boolean8 := {
        isPlaying ifFalse: {return: false}.

        generator ifNil: {
            true
        } ifNotNil: {
            generator _ mixSamples: sampleCount samplePeriod: samplePeriod ontoBuffer: mixBuffer
        }.
    }.
}.

compileTime constant SoftSoundSourcePtr := SoftSoundSource sharedPointer.

} ## End of namespace Sound
} ## End of namespace Stdn
