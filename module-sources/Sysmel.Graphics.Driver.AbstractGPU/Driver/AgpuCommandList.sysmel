namespace Stdn definition: {
namespace Graphics definition: {
namespace DriverAGPU definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math Geometry.

#**
 * I am a agpu based shader signature builder.
 *#
class AgpuCommandList superclass: CommandList; definition: {
    public field handle type: AGPU CommandListRef.

    override method asRenderingDeviceCommandList => CommandList pointer
        := self address.

    override method resetFor: (allocator: CommandListAllocatorPtr const ref) initialPipelineState: (initialPipeline: PipelineStatePtr const ref) ::=> Void := {
        let agpuAllocator := allocator getPointer castTo: AgpuCommandListAllocator pointer.
        agpuAllocator ifNil: {
            return: void
        }.

        let agpuInitialPipeline mutable := AGPU PipelineStateRef().
        initialPipeline ifNotNil: {
            initialPipeline _ isGraphicsPipelineState ifTrue: {
                agpuInitialPipeline := (initialPipeline getPointer castTo: AgpuGraphicsPipelineState pointer) _ handle
            }.

            initialPipeline _ isComputePipelineState ifTrue: {
                agpuInitialPipeline := (initialPipeline getPointer castTo: AgpuGraphicsPipelineState pointer) _ handle
            }.
        }.

        handle _ reset: agpuAllocator _ handle initialPipelineState: agpuInitialPipeline
    }.

    override method close => Void := {
        handle _ close
    }.

    override method useShaderSignature: (shaderSignature: ShaderSignaturePtr const ref) ::=> Void := {
         let agpuShaderSignature := shaderSignature getPointer castTo: AgpuShaderSignature pointer.
         agpuShaderSignature ifNotNil: {
            handle _ setShaderSignature: agpuShaderSignature _ handle.
         }
    }.

    override method setViewport: (rectangle: RectangleI32) ::=> Void := {
        let extent := rectangle extent.
        handle _ setViewport: rectangle min x y: rectangle min y w: extent x h: extent y
    }.

    override method setScissor: (rectangle: RectangleI32) ::=> Void := {
        let extent := rectangle extent.
        handle _ setScissor: rectangle min x y: rectangle min y w: extent x h: extent y
    }.

    override method usePipelineState: (pipelineState: PipelineStatePtr const ref) ::=> Void := {
        pipelineState ifNil: {
            return: void
        }.

        pipelineState _ isGraphicsPipelineState ifTrue: {
            handle _ usePipelineState: (pipelineState getPointer castTo: AgpuGraphicsPipelineState pointer) _ handle.
            return: void.
        }.

        pipelineState _ isComputePipelineState ifTrue: {
            handle _ usePipelineState: (pipelineState getPointer castTo: AgpuComputePipelineState pointer) _ handle.
            return: void.
        }.
    }.

    override method useVertexBinding: (vertexBinding: VertexBindingPtr const ref) ::=> Void := {
        let agpuVertexBinding := vertexBinding getPointer castTo: AgpuVertexBinding pointer.
        agpuVertexBinding ifNotNil: {
            handle _ useVertexBinding: agpuVertexBinding _ handle
        }.
    }.

    override method useIndexBuffer: (buffer: BufferPtr const ref) ::=> Void := {
        let agpuIndexBuffer := buffer getPointer castTo: AgpuBuffer pointer.
        agpuIndexBuffer ifNotNil: {
            handle _ useIndexBuffer: agpuIndexBuffer _ handle
        }.

    }.

    override method useIndexBuffer: (buffer: BufferPtr const ref) at: (offset: UIntPointer) stride: (stride: UIntPointer) ::=> Void := {
        let agpuIndexBuffer := buffer getPointer castTo: AgpuBuffer pointer.
        agpuIndexBuffer ifNotNil: {
            handle _ useIndexBufferAt: agpuIndexBuffer _ handle offset: (offset castTo: UInt32) indexSize: (stride castTo: UInt32)
        }.
    }.

    override method useDrawIndirectBuffer: (buffer: BufferPtr const ref) ::=> Void := {

    }.

    override method useComputeDispatchIndirectBuffer: (buffer: BufferPtr const ref) ::=> Void := {

    }.

    override method useGraphicShaderBindings: (resourcesBinding: ShaderResourceBindingsPtr const ref) ::=> Void := {
        let agpuShaderResourceBindings := resourcesBinding getPointer castTo: AgpuShaderResourceBindings pointer.
        agpuShaderResourceBindings ifNotNil: {
            handle _ useShaderResources: agpuShaderResourceBindings _ handle.
        }.
    }.

    override method useComputeShaderBindings: (resourcesBinding: ShaderResourceBindingsPtr const ref) ::=> Void := {
        let agpuShaderResourceBindings := resourcesBinding getPointer castTo: AgpuShaderResourceBindings pointer.
        agpuShaderResourceBindings ifNotNil: {
            handle _ useComputeShaderResources: agpuShaderResourceBindings _ handle.
        }.
    }.

    override method drawArrays: (vertexCount: UInt32) instanceCount: (instanceCount: UInt32) firstVertex: (firstVertex: UInt32) baseInstance: (baseInstance: UInt32) ::=> Void := {
        handle _ drawArrays: vertexCount instanceCount: instanceCount firstVertex: firstVertex baseInstance: baseInstance
    }.

    override method drawArraysIndirect: (offset: UIntPointer) drawCount: (drawCount: UIntPointer) ::=> Void := {
        handle _ drawArraysIndirect: (offset castTo: UInt32) drawcount: (drawCount castTo: UInt32)
    }.

    override method drawElements: (indexCount: UInt32) instanceCount: (instanceCount: UInt32) firstIndex: (firstVertex: UInt32) baseVertex: (baseVertex: UInt32) baseInstance: (baseInstance: UInt32) ::=> Void := {
        handle _ drawElements: indexCount instanceCount: instanceCount firstIndex: firstVertex baseVertex: (baseVertex castTo: Int32) baseInstance: baseInstance
    }.

    override method drawElementsIndirect: (offset: UIntPointer) drawCount: (drawCount: UIntPointer) ::=> Void := {
        handle _ drawElementsIndirect: (offset castTo: UInt32) drawcount: (drawCount castTo: UInt32)
    }.

    override method dispatchCompute: (groupCount: UInt32x3) ::=> Void := {
        handle _ dispatchCompute: groupCount x groupCountY: groupCount y groupCountZ: groupCount z
    }.

    override method dispatchComputeIndirect: (offset: UInt32) ::=> Void := {
        handle _ dispatchComputeIndirect: offset
    }.

    override method setStencilReference: (reference: UInt32) ::=> Void := {
        handle _ setStencilReference: reference
    }.

    override method executeBundle: (bundle: CommandList sharedPointer const ref) ::=> Void := {

    }.

    override method beginRenderPass: (renderPass: RenderPassPtr const ref) on: (framebuffer: FramebufferPtr const ref) contentOnBundle: (contentOnBundle: Boolean8) ::=> Void := {
        let agpuRenderPass := renderPass getPointer castTo: AgpuRenderPass pointer.
        let agpuFramebuffer := framebuffer getPointer castTo: AgpuFramebuffer pointer.
        agpuRenderPass isNil || agpuFramebuffer isNil ifTrue: {
            return: void
        }.

        handle _ beginRenderPass: agpuRenderPass _ handle framebuffer: agpuFramebuffer _ handle bundleContent: (contentOnBundle castTo: Int32)
    }.

    override method endRenderPass ::=> Void := {
        handle _ endRenderPass
    }.

    override method resolveFramebuffer: (source: FramebufferPtr const ref) into: (destination: FramebufferPtr const ref) ::=> Void := {
        let agpuSourceFramebuffer := source getPointer castTo: AgpuFramebuffer pointer.
        let agpuDestFramebuffer := destination getPointer castTo: AgpuFramebuffer pointer.
        agpuSourceFramebuffer isNil || agpuDestFramebuffer isNil ifTrue: {
            return: void
        }.

        handle _ resolveFramebuffer: agpuDestFramebuffer _ handle sourceFramebuffer: agpuSourceFramebuffer _ handle
    }.

    override method resolveTexture: (source: TexturePtr const ref) level: (sourceLevel: UInt32) layer: (sourceLayer: UInt32)
        into: (destination: TexturePtr const ref) level: (destinationLevel: UInt32) layer: (destinationLayer: UInt32)
        levelCount: (levelCount: UInt32) layerCount: (layerCount: UInt32) aspect: (aspect: TextureAspect) ::=> Void := {
        let agpuSourceTexture := source getPointer castTo: AgpuTexture pointer.
        let agpuDestTexture := destination getPointer castTo: AgpuTexture pointer.
        agpuSourceTexture isNil || agpuSourceTexture isNil ifTrue: {
            return: void
        }.

        handle _ resolveTexture: agpuSourceTexture _ handle sourceLevel: sourceLevel sourceLayer: sourceLayer
            destTexture: agpuDestTexture _ handle destLevel: destinationLevel destLayer: destinationLayer
            levelCount: levelCount layerCount: layerCount
            aspect: (aspect castTo: AGPU TextureAspect)
    }.

    override method pushConstants: (values: UInt8 const pointer) size: (size: UInt32) at: (offset: UInt32) ::=> Void := {
        handle _ pushConstants: offset size: size values: (values reinterpretCastTo: Void pointer)
    }.

    override method memoryBarrierFrom: (sourceStage: PipelineStageMask) accesses: (sourceAccesses: AccessMask) to: (destStage: PipelineStageMask) accesses: (destAccesses: AccessMask) ::=> Void := {
        handle _ memoryBarrier: (sourceStage castTo: AGPU PipelineStageFlags) destStage: (destStage castTo: AGPU PipelineStageFlags) sourceAccesses: (sourceAccesses castTo: AGPU AccessFlags) destAccesses: (destAccesses castTo: AGPU AccessFlags)
    }.

    override method buffer: (buffer: BufferPtr const ref) offset: (offset: UIntPointer) size: (size: UIntPointer) memoryBarrierFrom: (sourceStage: PipelineStageMask) accesses: (sourceAccesses: AccessMask) to: (destStage: PipelineStageMask) accesses: (destAccesses: AccessMask) ::=> Void := {
        let agpuBuffer := buffer getPointer castTo: AgpuBuffer pointer.
        agpuBuffer ifNotNil: {
            handle _ bufferMemoryBarrier: (agpuBuffer _ handle) sourceStage: (sourceStage castTo: AGPU PipelineStageFlags) destStage: (destStage castTo: AGPU PipelineStageFlags) sourceAccesses: (sourceAccesses castTo: AGPU AccessFlags) destAccesses: (destAccesses castTo: AGPU AccessFlags) offset: (offset castTo: UInt32) size: (size castTo: UInt32)
        }.
    }.

    override method texture: (texture: TexturePtr const ref) subresourceRange: (subresourceRange: TextureSubResourceRange const ref) memoryBarrierFrom: (sourceStage: PipelineStageMask) accesses: (sourceAccesses: AccessMask) to: (destStage: PipelineStageMask) accesses: (destAccesses: AccessMask) ::=> Void := {

    }.

    override method pushBuffer: (buffer: BufferPtr const ref) transitionBarrierFrom: (oldUsageMode: BufferUsageMode) into: (newUsageMode: BufferUsageMode) ::=> Void := {
        let agpuBuffer := buffer getPointer castTo: AgpuBuffer pointer.
        agpuBuffer ifNotNil: {
            handle _ pushBufferTransitionBarrier: agpuBuffer _ handle oldUsage: (oldUsageMode castTo: AGPU BufferUsageMask) newUsage: (newUsageMode castTo: AGPU BufferUsageMask)
        }.
    }.

    override method pushTexture: (texture: TexturePtr const ref) subresourceRange: (subresourceRange: TextureSubResourceRange const ref) transitionBarrierFrom: (oldUsageMode: TextureUsageMode) into: (newUsageMode: TextureUsageMode) ::=> Void := {

    }.

    override method popBufferTransitionBarrier ::=> Void := {
        handle _ popBufferTransitionBarrier
    }.

    override method popTextureTransitionBarrier ::=> Void := {
        handle _ popTextureTransitionBarrier
    }.

    override method copyFromBuffer: (sourceBuffer: BufferPtr const ref) offset: (sourceOffset: UIntPointer) into: (destBuffer: BufferPtr const ref) offset: (destOffset: UIntPointer) size: (copySize: UIntPointer) ::=> Void := {

    }.

    override method copyFromBuffer: (sourceBuffer: BufferPtr const ref) intoTexture: (destTexture: TexturePtr const ref) region: (copyRegion: BufferImageCopyRegion const ref) ::=> Void := {

    }.

    override method copyFromTexture: (sourceTexture: TexturePtr const ref) intoBuffer: (destBuffer: BufferPtr const ref) region: (copyRegion: BufferImageCopyRegion const ref) ::=> Void := {

    }.

    override method copyFromTexture: (sourceTexture: TexturePtr const ref) intoTexture: (destTexture: TexturePtr const ref) region: (copyRegion: ImageCopyRegion const ref) ::=> Void := {

    }.

}.

compileTime constant AgpuCommandListPtr := AgpuCommandList sharedPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
