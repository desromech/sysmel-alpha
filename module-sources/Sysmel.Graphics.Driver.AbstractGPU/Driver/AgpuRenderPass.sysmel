namespace Stdn definition: {
namespace Graphics definition: {
namespace DriverAGPU definition: {

useNamespace: Stdn Graphics Core.

#**
 * I am a agpu based shader signature builder.
 *#
sealed class AgpuRenderPass superclass: RenderPass; definition: {
    public field handle type: AGPU RenderpassRef.
    public field colorAttachmentFormats type: Stdn Collections Vector(PixelFormat).
    public field theDepthStencilFormat type: PixelFormat.
    public field theSampleCount type: UInt32.
    public field theSampleQuality type: UInt32.

    override method setColorAttachment: (attachmentIndex: UInt32) clearValue: (clearValue: Float32x4) ::=> Void := {
        let convertedColor mutable := AGPU Color4f()
            r: clearValue r;
            g: clearValue g;
            b: clearValue b;
            a: clearValue a;
            yourself.

        ## FIXME: Fix this ABI issue in the compiler level.
        ## handle _ setColorClearValue: attachmentIndex value: convertedColor.
        handle _ setColorClearValueFrom: attachmentIndex value: convertedColor address.
    }.

    const override method colorAttachmentFormats => PixelFormat const arraySlice
        := colorAttachmentFormats asArraySlice.

    const override method depthStencilFormat => PixelFormat
        := theDepthStencilFormat.

    const override method sampleCount => UInt32
        := theSampleCount.

    const override method sampleQuality => UInt32
        := theSampleQuality.
}.

compileTime constant AgpuRenderPassPtr := AgpuRenderPass sharedPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
