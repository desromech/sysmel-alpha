namespace Smalltalk definition: {
useNamespace: Norphic.

gcclass SimpleBrowser definition: {
    protected field norphicWindow type: SystemWindowNorph rcPointer.
    protected field classBindings.
    protected field methodsBindings.

    protected field classesListView type: ListViewNorph rcPointer.
    protected field methodsView type: ListViewNorph rcPointer.
    protected field codeEditor type: TextAreaNorph rcPointer.

    meta definition: {
        method openOn: anObject
            := self new
                openOn: anObject;
                yourself
    }.

    method createWidgets := {
        classesListView := ListViewNorph rcNew.
        methodsView := ListViewNorph rcNew.
        codeEditor := TextAreaNorph rcNew.
        self
    }.

    method selectedClass: newClass := {
        methodsView _ removeAll.
        methodsBindings := newClass isNotNil && newClass methodDict isNotNil ifTrue: {
            newClass methodDict associations
        } ifFalse: {
            #()
        }.

        methodsBindings do: {:binding :: Void |
            methodsView _ addItem: binding key asStdnMutableString
        }.
        self
    }.

    method selectedMethod: newMethod := {
        codeEditor _ text: newMethod asStdnMutableString.
        self
    }.

    method initializePresentation := {
        let nspace := (__global Smalltalk castTo: ProtoObject) sharedNamespace.
        classBindings := nspace associations select: {:each :: ProtoObject | each value isClass}.

        classesListView _ when: NorphSelectionChangedEvent do: {:(NorphEvent ref)event :: Void |
            let newSelection ref := classesListView _ selectedRows.
            newSelection isNotEmpty && newSelection first < classBindings size ifTrue: {
                self selectedClass: (classBindings at: newSelection first + 1) value.
            }.
        }.

        methodsView _ when: NorphSelectionChangedEvent do: {:(NorphEvent ref)event :: Void |
            let newSelection ref := methodsView _ selectedRows.
            newSelection isNotEmpty && newSelection first < methodsBindings size ifTrue: {
                self selectedMethod: (methodsBindings at: newSelection first + 1) value.
            }.
        }.

        classBindings do: {:binding :: Void |
            classesListView _ addItem: binding name asStdnMutableString
        }.
        self
    }.

    method buildLayout := {
        norphicWindow _
            buildLayoutWith: {:b :: Void |
                b verticalPanedWith: {:b :: Void |
                    b
                        horizontalPanedWith: {:b :: Void |
                            b
                                element: classesListView;
                                element: methodsView
                        };
                        element: codeEditor
                }.
            };
            autolayout: true;
            updateLayout.
        self
    }.

    method openOn: anObject := {
        self open
    }.

    method open := {
        norphicWindow := SystemWindowNorph createFor: Std Graphics GUI WindowSystem activeWindowSystem
            title: "Browser" asMutableString extent: Int32x2(800, 400).
        self
            createWidgets;
            buildLayout;
            initializePresentation.
        self
    }.

    method close := {
        norphicWindow ifNotNil: {
            norphicWindow _ destroy.
            norphicWindow reset
        }.

        self
    }.
}.

Object definition: {
    method browse
        := SimpleBrowser openOn: self class
}.

Class definition: {
    method browse
        := SimpleBrowser openOn: self
}.

Metaclass definition: {
    method browse
        := SimpleBrowser openOn: self thisClass
}.

}.
