namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

#**
 * I am a font face loader
 *#
class FontFaceLoader superclass: Object; definition: {
    abstract method loadFromFileNamed: (fileName: Std String const ref) ::=> FontFace rcPointer.
}.

#**
 * I am a particular implementation for a font face loader.
 *#
template FontFaceLoaderFactory(FT: Type)
    := class definition: {
    compileTime constant FontFaceLoaderType := FT.

    private field faceLoaderInstance type: FontFaceLoaderType.

    method initialize => Void := {
        FontFaceLoaderRegistry uniqueInstance registerFontFaceLoader: faceLoaderInstance address
    }.

    method finalize => Void := {
        FontFaceLoaderRegistry uniqueInstance unregisterFontFaceLoader: faceLoaderInstance address
    }.
}.

#**
 * I am a registry for font face loaders.
 *#
class FontFaceLoaderRegistry definition: {
    private field loadersMutex type: Std Mutex.
    private field loaders type: Std Collections Vector(FontFaceLoader pointer).
    public field fallbackFontFace type: FontFace rcPointer.

    meta definition: {
        let uniqueInstance mutable type: FontFaceLoaderRegistry uniquePointer.
        let uniqueInstanceOnceCreation mutable type: Std OnceFlag.

        method uniqueInstance => FontFaceLoaderRegistry ref := {
            uniqueInstanceOnceCreation do: {
                uniqueInstance reset: FontFaceLoaderRegistry nativeNew.
            }.

            uniqueInstance _
        }.
    }.

    method registerFontFaceLoader: (loader: FontFaceLoader pointer) ::=> Void := {
        loadersMutex withLock: {
            loaders add: loader.
        }.
    }.

    method unregisterFontFaceLoader: (loader: FontFaceLoader pointer) ::=> Void := {
        loadersMutex withLock: {
            loaders remove: loader.
        }.
    }.

    method loadFontFaceFromFileNamed: (faceFileName: Std String const ref) ::=> FontFace rcPointer := {
        loadersMutex withLock: {
            loaders do: {:(FontFaceLoader pointer)faceLoader :: Void |
                let face mutable := faceLoader _ loadFromFileNamed: faceFileName.
                face ifNotNil: {
                    return: face
                }
            }.
        }.

        FontFace rcPointer nil
    }.

    method loadRequiredFontFaceFromFileNamed: (faceFileName: Std String const ref) ::=> FontFace rcPointer := {
        let result := self loadFontFaceFromFileNamed: faceFileName.
        result ifNotNil: {return: result}.

        self validFallbackFontFace
    }.

    method validFallbackFontFace => FontFace rcPointer := {
        fallbackFontFace ifNil: {
            fallbackFontFace := NullFontFace rcNew upCastFor: FontFace.
        }.

        fallbackFontFace
    }.
}.

compileTime constant FontFaceWithSizePtr := FontFaceWithSize rcPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
