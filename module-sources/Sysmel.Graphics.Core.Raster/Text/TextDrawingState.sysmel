namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Std Math LinearAlgebra.

struct TextDrawingState definition: {
    public field previousCharacter type: Char32.
    public field columnIndex type: UInt32.
    public field lineIndex type: UInt32.

    public field lineStartPosition type: Float32x2.
    public field previousPosition type: Float32x2.
    public field currentPosition type: Float32x2.
    public field tabSize type: UInt32.

    public field character type: Char32.
    public field isVisibleCharacter type: Boolean8.

    meta method position: (thePosition: Float32x2) ::=> SelfType
        := TextDrawingState newValue
            lineStartPosition: thePosition;
            currentPosition: thePosition;
            tabSize: 4;
            yourself.

    inline method carriageReturn => Void := {
        columnIndex := 0.
        previousCharacter := '\r'.
        currentPosition := lineStartPosition.
        isVisibleCharacter := false.
    }.

    inline method newlineWithAdvance: (lineAdvance: Float32x2) ::=> Void := {
        columnIndex := 0.
        previousCharacter := '\r'.
        lineIndex := lineIndex + 1.
        isVisibleCharacter := false.
        currentPosition := lineStartPosition.
        self advanceWith: lineAdvance.
        lineStartPosition := currentPosition.
    }.

    inline method tabWithSpaceAdvance: (spaceDelta: Float32x2) ::=> Void := {
        let validTabSize := tabSize max: 1u.
        let newColumnIndex := (columnIndex + validTabSize) / validTabSize * validTabSize.
        let paddingSpaces := newColumnIndex - columnIndex.

        isVisibleCharacter := false.
        previousCharacter := '\t'.
        columnIndex := newColumnIndex.
        self advanceWith: paddingSpaces*spaceDelta
    }.

    inline method advanceWith: (delta: Float32x2) ::=> Void := {
        currentPosition := currentPosition + delta
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
