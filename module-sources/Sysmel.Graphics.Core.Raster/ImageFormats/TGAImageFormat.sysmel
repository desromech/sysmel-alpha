namespace Stdn definition: {
namespace Graphics definition: {
namespace ImageFormats definition: {

useNamespace: Stdn Graphics Core.

struct TGAHeader packed definition: {
    public field idLength type: UInt8.
    public field colorMapType type: UInt8.
    public field imageType type: UInt8.
    public field colorMapFirstEntryIndex type: UInt16.
    public field colorMapLength type: UInt16.
    public field colorMapEntrySize type: UInt8.
    public field xOrigin type: UInt16.
    public field yOrigin type: UInt16.
    public field width type: UInt16.
    public field height type: UInt16.
    public field bitsPerPixel type: UInt8.
    public field imageDescriptor type: UInt8.
}.


class TGAImageReadWriter superclass: ImageReadWriter; definition: {
    const override method supportsExtension: (extension: Stdn String const ref) ::=> Boolean8
        := extension = "tga" asMutableString.

    const override method putForm: (form: Form ref) onStream: (outputStream: Stdn IO Stream ref) ::=> Void := {
        let header mutable type: TGAHeader.
        header
            imageType: 2; ## True color image.
            width: (form width castTo: UInt16);
            height: (form height castTo: UInt16);
            bitsPerPixel: (form pixelFormat bytesPerPixel*8 castTo: UInt8);
            imageDescriptor: 16r20.

        ## FIXME: Convert the pixels into a packed and flipped format that is supported by TGA file!.
        outputStream
            write: header address size: TGAHeader instanceSize;
            write: form pixels getPointer size: form height * form pitch.
    }.
}.

global TGAImageReadWriterRegistration mutable type: ImageReadWriterRegisterer(TGAImageReadWriter).

Form extend: {
    method writeTGAfileNamed: (fileName: Stdn String const ref) ::=> Boolean8 := {
        let readWriter := TGAImageReadWriter().
        readWriter putForm: self onFileNamed: fileName.
    }.
}.

} ## End of namespace ImageFormats
} ## End of namespace Graphics
} ## End of namespace Stdn
