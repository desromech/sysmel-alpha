namespace Stdn definition: {
namespace Graphics definition: {
namespace ImageFormats definition: {

useNamespace: Stdn Graphics Core.

class ImageReadWriterRegistry definition: {
    meta definition: {
        let singleton mutable type: ImageReadWriterRegistry uniquePointer.
        let singletonOnceCreation mutable type: Stdn OnceFlag.

        method uniqueInstance => ImageReadWriterRegistry ref := {
            singletonOnceCreation do: {
                singleton reset: ImageReadWriterRegistry nativeNew.
            }.

            singleton _
        }.
    }.

    private field mutex type: Stdn Mutex.
    private field registeredImageReadWriters type: Stdn Collections Vector(ImageReadWriter sharedPointer).

    method addImageReadWriter: (imageReadWriter: ImageReadWriter sharedPointer) ::=> Void := {
        mutex withLock: {
            registeredImageReadWriters add: imageReadWriter
        }
    }.

    method findForFileName: (fileName: Stdn String const ref) ::=> ImageReadWriter pointer := {
        ## FIXME: Move this computation into a library function.
        let extensionIndex := fileName lastIndexOf: '.'.

        let extension := fileName allButFirst: extensionIndex + 1.
        self findWithExtension: extension
    }.

    method findWithExtension: (extension: Stdn String const ref) ::=> ImageReadWriter pointer := {
        mutex withLock: {
            registeredImageReadWriters do: {:each :: Void |
                (each _ supportsExtension: extension) ifTrue: {
                    return: each getPointer
                }
            }
        }.

        nil
    }.
}.

template ImageReadWriterRegisterer(T: Type)
    := class definition: {

    method initialize => Void := {
        ImageReadWriterRegistry uniqueInstance addImageReadWriter: (T sharedNew upCastFor: ImageReadWriter)
    }.
}.


Form extend: {
    meta method readFromFileNamed: (fileName: Stdn String const ref) ::=> FormPtr := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findForFileName: fileName.
        readWriter ifNil: {return: FormPtr nil}.

        readWriter _ readFormFromFileNamed: fileName.
    }.

    method writeToFileNamed: (fileName: Stdn String const ref) ::=> Boolean8 := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findForFileName: fileName.
        readWriter ifNil: {return: false}.

        readWriter _ putForm: self onFileNamed: fileName.
    }.
}.

TextureData extend: {
    meta method readFromFileNamed: (fileName: Stdn String const ref) ::=> TextureDataPtr := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findForFileName: fileName.
        readWriter ifNil: {return: TextureDataPtr nil}.

        readWriter _ readTextureDataFromFileNamed: fileName.
    }.

    method writeToFileNamed: (fileName: Stdn String const ref) ::=> Boolean8 := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findForFileName: fileName.
        readWriter ifNil: {return: false}.

        readWriter _ putTextureData: self onFileNamed: fileName.
    }.
}.

} ## End of namespace ImageFormats
} ## End of namespace Graphics
} ## End of namespace Stdn
