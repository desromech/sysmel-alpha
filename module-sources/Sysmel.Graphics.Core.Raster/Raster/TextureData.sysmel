namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

enum TextureDataFlags bitMask valueType: UInt32; values: #{
    None: 0.
    OptimalTargetSpecificTiling: 1. ## For some embedded devices where the tiling layout is well known.
}.

class TextureDataHeader definition: {
    public field type type: TextureType.
    public field format type: PixelFormat.
    public field srgbFormat type: PixelFormat.

    public field width type: UInt32.
    public field height type: UInt32.
    public field depth type: UInt32.
    public field miplevels type: UInt32.
    public field layers type: UInt32.
    public field linearDataSize type: UInt32.
    public field flags type: TextureDataFlags.
    public field mainViewComponents type: ComponentsSwizzle.
}.

#**
 * I am a container for texture pixel dta.
 *#
class TextureData superclass: TextureDataHeader; definition: {
    public field pixels type: UInt8 uniquePointer.
    public field levelsData type: Stdn Collections Vector(TextureLevelData).

    method computeLinearPackedTextureLevelMetadata => Void := {
        levelsData
            removeAll;
            reserve: layers * miplevels.

        let currentDataOffset mutable := 0u.
        let extent := UInt32x3(width, height, depth).

        let compressedBlockSize := format compressedBlockSize.
        let compressedBlockExtent := format compressedBlockExtent.
        let uncompressedPixelSize := format bytesPerPixel.

        0 until: layers do: {:i :: Void |
            let currentExtent mutable := extent.
            0 until: miplevels do: {:j :: Void |
                let levelData mutable := TextureLevelData()
                    extent: currentExtent;
                    yourself.

                compressedBlockSize = 0 ifTrue: {
                    levelData
                        compressedExtent: currentExtent;
                        pitch: (currentExtent x * uncompressedPixelSize alignedTo: 4);
                        slicePitch: levelData pitch * currentExtent y.
                } ifFalse: {
                    ## Compute the width and height by separate to keep valgrind happy.
                    let compressedWidth := (currentExtent x + compressedBlockExtent x - 1) / compressedBlockExtent x max: 1u.
                    let compressedHeight := (currentExtent y + compressedBlockExtent y - 1) / compressedBlockExtent y max: 1u.
                    let compressedExtent := UInt32x3(compressedWidth, compressedHeight, currentExtent z).
                    levelData
                        compressedExtent: compressedExtent;
                        pitch: compressedExtent x * compressedBlockSize;
                        slicePitch: levelData pitch * compressedExtent y.
                }.

                levelData
                    dataOffset: currentDataOffset;
                    dataSize: levelData slicePitch * levelData compressedExtent z.
                levelsData add: levelData.

                currentExtent := currentExtent / 2u max: UInt32x3 ones.
                currentDataOffset := currentDataOffset + levelData dataSize.
            }
        }.

        linearDataSize := currentDataOffset
    }.

    const method expand24To32BitsWithFormat: (newFormat: PixelFormat) srgbFormat: (newSRGBFormat: PixelFormat) ::=> TextureData sharedPointer := {
        let result := TextureData sharedNew.
        result _
            type: type;
            format: newFormat;
            srgbFormat: newSRGBFormat;

            width: width;
            height: height;
            depth: depth;
            miplevels: miplevels;
            layers: layers;
            flags: flags;
            mainViewComponents: mainViewComponents;
            computeLinearPackedTextureLevelMetadata.
        Stdn assert: levelsData size = result _ levelsData size.
        result _ pixels reset: (Stdn zmalloc(result _ linearDataSize) reinterpretCastTo: UInt8 pointer).

        0 until: levelsData size do: {:i :: Void |
            let sourceLevel ref := levelsData[i].
            let destLevel ref := result _ levelsData[i].

            let sourceSlice mutable := pixels getPointer + sourceLevel dataOffset.
            let destSlice mutable := result _ pixels getPointer + destLevel dataOffset.
            0 until: sourceLevel extent z do: {:z :: Void |
                let sourceRow mutable := sourceSlice.
                let destRow mutable := destSlice.
                0 until: sourceLevel extent y do: {:y :: Void |
                    let sourcePixels mutable := sourceRow.
                    let destPixels mutable := destRow.
                    0 until: sourceLevel extent x do: {:x :: Void |
                        destPixels[0] := sourcePixels[0].
                        destPixels[1] := sourcePixels[1].
                        destPixels[2] := sourcePixels[2].
                        destPixels[3] := 16rff.

                        sourcePixels := sourcePixels + 3.
                        destPixels := destPixels + 4.
                    }.

                    sourceRow := sourceRow + sourceLevel pitch.
                    destRow := destRow + destLevel pitch.
                }.
                sourceSlice := sourceSlice + sourceLevel slicePitch.
                destSlice := destSlice + destLevel slicePitch.
            }.
        }.

        result
    }.

    const method asTextureDataWithExpandedUnalignedRGBFormats => TextureData sharedPointer := {
        format selectCase: #{
        PixelFormat R8G8B8_UNorm : (self expand24To32BitsWithFormat: PixelFormat R8G8B8A8_UNorm srgbFormat: PixelFormat R8G8B8A8_UNormSRGB).
        PixelFormat R8G8B8_UNormSRGB : (self expand24To32BitsWithFormat: PixelFormat R8G8B8A8_UNorm srgbFormat: PixelFormat R8G8B8A8_UNormSRGB).
        PixelFormat R8G8B8_SNorm : (self expand24To32BitsWithFormat: PixelFormat R8G8B8A8_SNorm srgbFormat: PixelFormat R8G8B8A8_SNorm).

        PixelFormat B8G8R8_UNorm : (self expand24To32BitsWithFormat: PixelFormat B8G8R8A8_UNorm srgbFormat: PixelFormat B8G8R8A8_UNormSRGB).
        PixelFormat B8G8R8_UNormSRGB : (self expand24To32BitsWithFormat: PixelFormat B8G8R8A8_UNorm srgbFormat: PixelFormat B8G8R8A8_UNormSRGB).

        _ : (TextureData sharedPointer nil)
        }
    }.
}.

compileTime constant TextureDataPtr := TextureData sharedPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
