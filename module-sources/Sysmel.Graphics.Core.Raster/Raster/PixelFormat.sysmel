namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

#**
 * I represent a pixel format.
 * These enum values are the same values that are present in the AbstractGPU. The
 * AbstractGPU values are also the same values that are used by the Windows DXGI API to facilitate conversions.
 *#
enum PixelFormat valueType: UInt32; values: #{
    Unknown: 0.
    R32G32B32A32_Typeless: 1.
    R32G32B32A32_Float: 2.
    R32G32B32A32_UInt: 3.
    R32G32B32A32_SInt: 4.
    R32G32B32_Typeless: 5.
    R32G32B32_Float: 6.
    R32G32B32_UInt: 7.
    R32G32B32_SInt: 8.
    R16G16B16A16_Typeless: 9.
    R16G16B16A16_Float: 10.
    R16G16B16A16_UNorm: 11.
    R16G16B16A16_UInt: 12.
    R16G16B16A16_SNorm: 13.
    R16G16B16A16_SInt: 14.
    R32G32_Typeless: 15.
    R32G32_Float: 16.
    R32G32_UInt: 17.
    R32G32_SInt: 18.
    R32G8X24_Typeless: 19.
    D32_Float_S8X24_UInt: 20.
    R32_Float_S8X24_Typeless: 21.
    X32_Typeless_G8X24_UInt: 22.
    R10G10B10A2_Typeless: 23.
    R10G10B10A2_UNorm: 24.
    R10G10B10A2_UInt: 25.
    R11G11B10_Float: 26.
    R8G8B8A8_Typeless: 27.
    R8G8B8A8_UNorm: 28.
    R8G8B8A8_UNormSRGB: 29.
    R8G8B8A8_UInt: 30.
    R8G8B8A8_SNorm: 31.
    R8G8B8A8_SInt: 32.
    R16G16_Typeless: 33.
    R16G16_Float: 34.
    R16G16_UNorm: 35.
    R16G16_UInt: 36.
    R16G16_SNorm: 37.
    R16G16_SInt: 38.
    R32_Typeless: 39.
    D32_Float: 40.
    R32_Float: 41.
    R32_UInt: 42.
    R32_SInt: 43.
    R24G8_Typeless: 44.
    D24_UnormS8_UInt: 45.
    R24_UnormX8_Typeless: 46.
    X24TG8_UInt: 47.
    R8G8_Typeless: 48.
    R8G8_UNorm: 49.
    R8G8_UInt: 50.
    R8G8_SNorm: 51.
    R8G8_SInt: 52.
    R16_Typeless: 53.
    R16_Float: 54.
    D16_UNorm: 55.
    R16_UNorm: 56.
    R16_UInt: 57.
    R16_SNorm: 58.
    R16_SInt: 59.
    R8_Typeless: 60.
    R8_UNorm: 61.
    R8_UInt: 62.
    R8_SNorm: 63.
    R8_SInt: 64.
    A8_UNorm: 65.
    R1_UNorm: 66.
    BC1_Typeless: 70.
    BC1_UNorm: 71.
    BC1_UNormSRGB: 72.
    BC2_Typeless: 73.
    BC2_UNorm: 74.
    BC2_UNormSRGB: 75.
    BC3_Typeless: 76.
    BC3_UNorm: 77.
    BC3_UNormSRGB: 78.
    BC4_Typeless: 79.
    BC4_UNorm: 80.
    BC4_SNorm: 81.
    BC5_Typeless: 82.
    BC5_UNorm: 83.
    BC5_SNorm: 84.
    B5G6R5_UNorm: 85.
    B5G5R5A1_UNorm: 86.
    B8G8R8A8_UNorm: 87.
    B8G8R8X8_UNorm: 88.
    B8G8R8A8_Typeless: 90.
    B8G8R8A8_UNormSRGB: 91.
    B8G8R8X8_Typeless: 92.
    B8G8R8X8_UNormSRGB: 93.
    ETC2_R8G8B8_UNorm: 200.
    ETC2_R8G8B8_UNormSRGB: 201.
    ETC2_R8G8B8A1_UNorm: 202.
    ETC2_R8G8B8A1_UNormSRGB: 203.
    ETC2_R8G8B8A8_UNorm: 204.
    ETC2_R8G8B8A8_UNormSRGB: 205.
    EAC_R11_UNorm: 206.
    EAC_R11_SNorm: 207.
    EAC_R11G11_UNorm: 208.
    EAC_R11G11_SNorm: 209.
    ASTC4X4_UNorm: 230.
    ASTC4X4_UNormSRGB: 231.
    ASTC5X4_UNorm: 232.
    ASTC5X4_UNormSRGB: 233.
    ASTC5X5_UNorm: 234.
    ASTC5X5_UNormSRGB: 235.
    ASTC6X5_UNorm: 236.
    ASTC6X5_UNormSRGB: 237.
    ASTC6X6_UNorm: 238.
    ASTC6X6_UNormSRGB: 239.
    ASTC8X5_UNorm: 240.
    ASTC8X5_UNormSRGB: 241.
    ASTC8X6_UNorm: 242.
    ASTC8X6_UNormSRGB: 243.
    ASTC8X8_UNorm: 244.
    ASTC8X8_UNormSRGB: 245.
    ASTC10X5_UNorm: 246.
    ASTC10X5_UNormSRGB: 247.
    ASTC10X6_UNorm: 248.
    ASTC10X6_UNormSRGB: 249.
    ASTC10X8_UNorm: 250.
    ASTC10X8_UNormSRGB: 251.
    ASTC10X10_UNorm: 252.
    ASTC10X10_UNormSRGB: 253.
    ASTC12X10_UNorm: 254.
    ASTC12X10_UNormSRGB: 255.
    ASTC12X12_UNorm: 256.
    ASTC12X12_UNormSRGB: 257.


    ## The following values do not have a matching value in AGPU. There provided
    ## for in memory image manipulation, and for some special targets.

    ExtensionStart: 16rff000000.
    R8G8B8_UNorm:.
    R8G8B8_UNormSRGB:.
    R8G8B8_SNorm:.

    B8G8R8_UNorm:.
    B8G8R8_UNormSRGB:.
    B4G4R4A4_UNorm:.
    B4G4R4A4_UNormSRGB:.

    ETC1_R8G8B8_UNorm:.
    ETC1_R8G8B8_UNormSRGB:.
    ETC1_R8G8B8A4_UNorm:.
    ETC1_R8G8B8A4_UNormSRGB:.

    R4_UNorm:.
    A4_UNorm:.
    R4G4_UNorm:.

    ## R8G8 for tangent space normal mapping. Z is automatically generated.
    HI8LO8_UNorm:.

}; definition: {

    method bitsPerPixel => UInt32 := {
        self selectCase: #{
        R1_UNorm : {return: 1}.
        R4_UNorm : {return: 4}.
        A4_UNorm : {return: 4}.
        _ : {return: self bytesPerPixel*8}
        }
    }.

    method bytesPerPixel => UInt32 := {
        self selectCase: #{

        ## 1 Bytes types.
        (
            R8_Typeless, R8_UNorm, R8_UInt, R8_SNorm, R8_SInt, A8_UNorm,

            R4G4_UNorm
        ) asValueInSetPattern : {
            return: 1
        }.

        ## 2 Bytes types.
        (
            R16_Typeless, R16_Float, D16_UNorm, R16_UNorm, R16_UInt, R16_SNorm, R16_SInt,

            R8G8_Typeless, R8G8_UNorm, R8G8_UInt, R8G8_SNorm, R8G8_SInt,

            B5G6R5_UNorm, B5G5R5A1_UNorm, B4G4R4A4_UNorm, B4G4R4A4_UNormSRGB,

            B4G4R4A4_UNorm, B4G4R4A4_UNormSRGB,

            HI8LO8_UNorm,
        ) asValueInSetPattern : {
            return: 2
        }.

        ## 3 Bytes types.
        (
        R8G8B8_UNorm, R8G8B8_UNormSRGB, R8G8B8_SNorm,
        B8G8R8_UNorm, B8G8R8_UNormSRGB,
        ) asValueInSetPattern : {
            return: 3
        }.

        ## 4 Bytes types.
        (
            R32_Typeless, R32_Float, R32_UInt, R32_SInt,

            D32_Float, R32_Float_S8X24_Typeless, X32_Typeless_G8X24_UInt, R10G10B10A2_Typeless,
            D24_UnormS8_UInt, R24_UnormX8_Typeless,
            R10G10B10A2_UNorm, R10G10B10A2_UInt, R11G11B10_Float,

            R8G8B8A8_Typeless, R8G8B8A8_UNorm, R8G8B8A8_UNormSRGB, R8G8B8A8_UInt,
            R8G8B8A8_SNorm, R8G8B8A8_SInt,

            B8G8R8A8_UNorm, B8G8R8X8_UNorm, B8G8R8A8_Typeless,
            B8G8R8A8_UNormSRGB, B8G8R8X8_Typeless, B8G8R8X8_UNormSRGB,

        ) asValueInSetPattern : {
            return: 4
        }.

        ## 8 Bytes.
        (
            R32G32_Typeless, R32G32_Float, R32G32_UInt, R32G32_SInt, D32_Float_S8X24_UInt, R32G8X24_Typeless,
        ) asValueInSetPattern : {
            return: 8
        }.

        ## 12 Bytes.
        (
            R32G32B32_Typeless, R32G32B32_Float, R32G32B32_UInt, R32G32B32_SInt
        ) asValueInSetPattern : {
            return: 12
        }.

        ## 16 Bytes.
        (
            R32G32B32A32_Typeless, R32G32B32A32_Float, R32G32B32A32_UInt, R32G32B32A32_SInt,
        ) asValueInSetPattern : {
            return: 16
        }.

        _ : {return: 0}.
        }.
    }.

    inline method swizzleLoadedUnorm8x4: (value: UInt8x4) ::=> UInt8x4 := {
        self selectCase: #{
        A8_UNorm : {return: UInt8x4(255, 255, 255, value r)}.

        ## BGRA types.
        (
            B8G8R8A8_UNorm, B8G8R8X8_UNorm, B8G8R8A8_Typeless, B8G8R8A8_UNormSRGB,
            B8G8R8X8_Typeless, B8G8R8X8_UNormSRGB,
        ) asValueInSetPattern : {
            return: value bgra
        }.

        _ : {return: value}.
        }.

        Stdn abort().
    }.

    inline method swizzleStoringUnorm8x4: (value: UInt8x4) ::=> UInt8x4 := {
        self selectCase: #{
        A8_UNorm : {return: value aaaa}.

        ## BGRA types.
        (
            B8G8R8A8_UNorm, B8G8R8X8_UNorm, B8G8R8A8_Typeless, B8G8R8A8_UNormSRGB,
            B8G8R8X8_Typeless, B8G8R8X8_UNormSRGB,
        ) asValueInSetPattern : {
            return: value bgra
        }.

        _ : {return: value}.
        }.

        Stdn abort().
    }.

    inline method isInSRGB => Boolean8 := {
        self selectCase: #{
        (
            R8G8B8A8_UNormSRGB, BC1_UNormSRGB, BC2_UNormSRGB, BC3_UNormSRGB,
            B8G8R8A8_UNormSRGB, B8G8R8X8_UNormSRGB, ETC2_R8G8B8_UNormSRGB,
            ETC2_R8G8B8A1_UNormSRGB, ETC2_R8G8B8A8_UNormSRGB, ASTC4X4_UNormSRGB,
            ASTC5X4_UNormSRGB, ASTC5X5_UNormSRGB, ASTC6X5_UNormSRGB, ASTC6X6_UNormSRGB,
            ASTC8X5_UNormSRGB, ASTC8X6_UNormSRGB, ASTC8X8_UNormSRGB, ASTC10X5_UNormSRGB,
            ASTC10X6_UNormSRGB, ASTC10X8_UNormSRGB, ASTC10X10_UNormSRGB, ASTC12X10_UNormSRGB,
            ASTC12X12_UNormSRGB,

            R8G8B8_UNormSRGB, B8G8R8_UNormSRGB, ETC1_R8G8B8_UNormSRGB,
            B4G4R4A4_UNormSRGB
        ) asValueInSetPattern : {
            true
        }.

        _ : false.
        }.
    }.

    inline method isIntegerFormat => Boolean8 := {
        self selectCase: #{
        (
        R32G32B32A32_SInt, R32G32B32_SInt, R16G16B16A16_SInt, R32G32_SInt,
        R8G8B8A8_SInt, R16G16_SInt, R32_SInt, R8G8_SInt, R16_SInt, R8_SInt
        ) asValueInSetPattern : {
            true
        }.
        _ : false.
        }.
    }.

    inline method isUnsignedIntegerFormat => Boolean8 := {
        self selectCase: #{
        (
        R32G32B32A32_UInt, R32G32B32_UInt, R16G16B16A16_UInt, R32G32_UInt,
        R10G10B10A2_UInt, R8G8B8A8_UInt, R16G16_UInt, R32_UInt, X24TG8_UInt,
        R8G8_UInt, R16_UInt, R8_UInt
        ) asValueInSetPattern : {
            true
        }.
        _ : false.
        }.
    }.

    inline method encodeColorSpace: (color: Float32x4) ::=> Float32x4 := {
        self isInSRGB ifTrue: {
            Stdn Math Color encodeSRGB(color)
        } ifFalse: {
            color
        }
    }.

    inline method decodeColorSpace: (color: Float32x4) ::=> Float32x4 := {
        self isInSRGB ifTrue: {
            Stdn Math Color decodeSRGB(color)
        } ifFalse: {
            color
        }
    }.

    inline method fetchUInt32x4FromMemory: (memory: UInt8 const pointer) ::=> UInt32x4 := {
        UInt32x4 zeros
    }.

    inline method fetchInt32x4FromMemory: (memory: UInt8 const pointer) ::=> Int32x4 := {
        Int32x4 zeros
    }.

    inline method fetchFromMemory: (memory: UInt8 const pointer) ::=> Float32x4 := {
        self selectCase: #{
        (R32G32B32A32_Typeless, R32G32B32A32_Float) asValueInSetPattern : {
            (memory reinterpretCastTo: Float32x4 const pointer) _
        }.

        (R32G32B32_Typeless, R32G32B32_Float) asValueInSetPattern : {
            ## Relax the alignment requirementes here.
            let source := memory reinterpretCastTo: Float32 const pointer.
            Float32x4(source[0], source[1], source[2], 1.0f)
        }.

        (R32G32_Typeless, R32G32_Float) asValueInSetPattern : {
            Float32x4((memory reinterpretCastTo: Float32x2 const pointer) _, 0.0f, 1.0f)
        }.

        (R32_Typeless, R32_Float) asValueInSetPattern : {
            Float32x4((memory reinterpretCastTo: Float32 const pointer) _, 0.0f, 0.0f, 1.0f)
        }.

        (R8_Typeless, R8_UNorm) asValueInSetPattern : {
            Float32x4(memory _ / 255.0f, 0.0f, 0.0f, 1.0f)
        }.
        R8_SNorm : {
            Float32x4((memory _ castTo: Int8)/127.0f, 0.0f, 0.0f, 1.0f)
        }.
        R8_UInt : {
            Float32x4(memory _ , 0.0f, 0.0f, 1.0f)
        }.
        R8_SInt : {
            Float32x4(memory _ castTo: Int8, 0.0f, 0.0f, 1.0f)
        }.
        A8_UNorm : {
            Float32x4(1.0f, 1.0f, 1.0f, memory _ / 255.0f)
        }.

        (R8G8B8A8_Typeless, R8G8B8A8_UNorm) asValueInSetPattern : {
            ((memory reinterpretCastTo: UInt8x4 pointer) _ castTo: Float32x4)/ 255.0f
        }.

        R8G8B8A8_UNormSRGB : {
            Stdn Math Color decodeSRGBUnorm8((memory reinterpretCastTo: UInt8x4 pointer) _)
        }.

        (B8G8R8A8_Typeless, B8G8R8X8_Typeless, B8G8R8A8_UNorm, B8G8R8X8_UNorm) asValueInSetPattern : {
            ((memory reinterpretCastTo: UInt8x4 pointer) _ bgra castTo: Float32x4) / 255.0f
        }.

        (B8G8R8A8_UNormSRGB, B8G8R8X8_UNormSRGB) asValueInSetPattern : {
            Stdn Math Color decodeSRGBUnorm8((memory reinterpretCastTo: UInt8x4 pointer) _ bgra)
        }.
        _ : {Float32x4 zeros }
        }.
    }.

    inline method store: (pixel: UInt8x4) intoMemory: (memory: UInt8 pointer) ::=> Void := {
        self selectCase: #{

        (R8G8B8A8_Typeless, R8G8B8A8_UNorm, R8G8B8A8_UNormSRGB) asValueInSetPattern : {
            (memory reinterpretCastTo: UInt8x4 pointer) _ := pixel
        }.

        (B8G8R8A8_Typeless, B8G8R8X8_Typeless, B8G8R8A8_UNorm, B8G8R8X8_UNorm, B8G8R8A8_UNormSRGB, B8G8R8X8_UNormSRGB) asValueInSetPattern : {
            (memory reinterpretCastTo: UInt8x4 pointer) _ := pixel bgra
        }.

        _ : {}
        }
    }.

    inline method store: (pixel: Float32x4) intoMemory: (memory: UInt8 pointer) ::=> Void := {
        self selectCase: #{

        (R8G8B8A8_Typeless, R8G8B8A8_UNorm) asValueInSetPattern : {
            (memory reinterpretCastTo: UInt8x4 pointer) _ := (pixel clampMin: 0.0f max: 1.0f) * 255.0f castTo: UInt8x4
        }.

        R8G8B8A8_UNormSRGB : {
            (memory reinterpretCastTo: UInt8x4 pointer) _ := Stdn Math Color encodeSRGBUnorm8(pixel clampMin: 0.0f max: 1.0f)
        }.

        (B8G8R8A8_Typeless, B8G8R8X8_Typeless, B8G8R8A8_UNorm, B8G8R8X8_UNorm) asValueInSetPattern : {
            (memory reinterpretCastTo: UInt8x4 pointer) _ := (pixel bgra clampMin: 0.0f max: 1.0f) * 255.0f castTo: UInt8x4
        }.

        (B8G8R8A8_UNormSRGB, B8G8R8X8_UNormSRGB) asValueInSetPattern : {
            (memory reinterpretCastTo: UInt8x4 pointer) _ := Stdn Math Color encodeSRGBUnorm8(pixel bgra clampMin: 0.0f max: 1.0f)
        }.
        _ : {}
        }
    }.

    inline method fetchFrom: (memory: UInt8 const pointer) intoShaderInput: (shaderInputLocation: Void pointer) ::=> Void := {
        self isIntegerFormat ifTrue: {
            let destination := shaderInputLocation reinterpretCastTo: Int32x4 pointer.
            destination _ := self fetchInt32x4FromMemory: memory.
            return: void.
        }.
        self isUnsignedIntegerFormat ifTrue: {
            let destination := shaderInputLocation reinterpretCastTo: UInt32x4 pointer.
            destination _ := self fetchUInt32x4FromMemory: memory.
            return: void.
        }.
        {
            let destination := shaderInputLocation reinterpretCastTo: Float32x4 pointer.
            destination _ := self fetchFromMemory: memory
        }
    }.

    inline method compressedBlockSize => UInt32 := {
        self selectCase: #{
        (BC1_Typeless, BC1_UNorm, BC1_UNormSRGB,
         BC4_Typeless, BC4_UNorm, BC4_SNorm,
         BC5_Typeless, BC5_UNorm, BC5_SNorm) asValueInSetPattern : 8u.

        (BC2_Typeless, BC2_UNorm, BC2_UNormSRGB,
        BC3_Typeless, BC3_UNorm, BC3_UNormSRGB) asValueInSetPattern : 16u.
        _ : 0u.
        }
    }.

    inline method compressedBlockExtent => UInt32x2 := {
        self selectCase: #{
        (BC1_Typeless, BC1_UNorm, BC1_UNormSRGB,
        BC2_Typeless, BC2_UNorm, BC2_UNormSRGB,
        BC3_Typeless, BC3_UNorm, BC3_UNormSRGB,
        BC4_Typeless, BC4_UNorm, BC4_SNorm,
        BC5_Typeless, BC5_UNorm, BC5_SNorm) asValueInSetPattern : UInt32x2(4, 4).

        _ : UInt32x2 zeros.
        }.
    }.

    inline method asLinearFormat => SelfType := {
        self selectCase: #{
        R8G8B8A8_UNormSRGB : R8G8B8A8_UNorm.
        BC1_UNormSRGB : BC1_UNorm.
        BC2_UNormSRGB : BC2_UNorm.
        BC3_UNormSRGB : BC3_UNorm.
        B8G8R8A8_UNormSRGB : B8G8R8A8_UNorm.
        B8G8R8X8_UNormSRGB : B8G8R8X8_UNorm.
        ETC2_R8G8B8_UNormSRGB : ETC2_R8G8B8_UNorm.
        ETC2_R8G8B8A1_UNormSRGB : ETC2_R8G8B8A1_UNorm.
        ETC2_R8G8B8A8_UNormSRGB : ETC2_R8G8B8A8_UNorm.
        ASTC4X4_UNormSRGB : ASTC4X4_UNorm.
        ASTC5X4_UNormSRGB : ASTC5X4_UNorm.
        ASTC5X5_UNormSRGB : ASTC5X5_UNorm.
        ASTC6X5_UNormSRGB : ASTC6X5_UNorm.
        ASTC6X6_UNormSRGB : ASTC6X6_UNorm.
        ASTC8X5_UNormSRGB : ASTC8X5_UNorm.
        ASTC8X6_UNormSRGB : ASTC8X6_UNorm.
        ASTC8X8_UNormSRGB : ASTC8X8_UNorm.
        ASTC10X5_UNormSRGB : ASTC10X5_UNorm.
        ASTC10X6_UNormSRGB : ASTC10X6_UNorm.
        ASTC10X8_UNormSRGB : ASTC10X8_UNorm.
        ASTC10X10_UNormSRGB : ASTC10X10_UNorm.
        ASTC12X10_UNormSRGB : ASTC12X10_UNorm.
        ASTC12X12_UNormSRGB : ASTC12X12_UNorm.
        R8G8B8_UNormSRGB : R8G8B8_UNorm.
        B8G8R8_UNormSRGB : B8G8R8_UNorm.
        B4G4R4A4_UNormSRGB : B4G4R4A4_UNorm.
        ETC1_R8G8B8_UNormSRGB : ETC1_R8G8B8_UNorm.
        ETC1_R8G8B8A4_UNormSRGB : ETC1_R8G8B8A4_UNorm.
        _ : self.
        }
    }.

    inline method asSRGBFormat => SelfType := {
        self selectCase: #{
        R8G8B8A8_UNorm : R8G8B8A8_UNormSRGB.
        BC1_UNorm : BC1_UNormSRGB.
        BC2_UNorm : BC2_UNormSRGB.
        BC3_UNorm : BC3_UNormSRGB.
        B8G8R8A8_UNorm : B8G8R8A8_UNormSRGB.
        B8G8R8X8_UNorm : B8G8R8X8_UNormSRGB.
        ETC2_R8G8B8_UNorm : ETC2_R8G8B8_UNormSRGB.
        ETC2_R8G8B8A1_UNorm : ETC2_R8G8B8A1_UNormSRGB.
        ETC2_R8G8B8A8_UNorm : ETC2_R8G8B8A8_UNormSRGB.
        ASTC4X4_UNorm : ASTC4X4_UNormSRGB.
        ASTC5X4_UNorm : ASTC5X4_UNormSRGB.
        ASTC5X5_UNorm : ASTC5X5_UNormSRGB.
        ASTC6X5_UNorm : ASTC6X5_UNormSRGB.
        ASTC6X6_UNorm : ASTC6X6_UNormSRGB.
        ASTC8X5_UNorm : ASTC8X5_UNormSRGB.
        ASTC8X6_UNorm : ASTC8X6_UNormSRGB.
        ASTC8X8_UNorm : ASTC8X8_UNormSRGB.
        ASTC10X5_UNorm : ASTC10X5_UNormSRGB.
        ASTC10X6_UNorm : ASTC10X6_UNormSRGB.
        ASTC10X8_UNorm : ASTC10X8_UNormSRGB.
        ASTC10X10_UNorm : ASTC10X10_UNormSRGB.
        ASTC12X10_UNorm : ASTC12X10_UNormSRGB.
        ASTC12X12_UNorm : ASTC12X12_UNormSRGB.
        R8G8B8_UNorm : R8G8B8_UNormSRGB.
        B8G8R8_UNorm : B8G8R8_UNormSRGB.
        B4G4R4A4_UNorm : B4G4R4A4_UNormSRGB.
        ETC1_R8G8B8_UNorm : ETC1_R8G8B8_UNormSRGB.
        ETC1_R8G8B8A4_UNorm : ETC1_R8G8B8A4_UNormSRGB.
        _ : self.
        }
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
