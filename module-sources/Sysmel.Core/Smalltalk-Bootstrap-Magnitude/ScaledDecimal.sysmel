namespace Smalltalk definition: {

ScaledDecimal extend: {
	field scale.

	meta definition: {
		method newFromNumber: aNumber scale: anInteger := {
			let aFraction := aNumber asFraction.
			aFraction isFraction
				ifTrue: {self new setNumerator: aFraction numerator denominator: aFraction denominator scale: anInteger }
				ifFalse: { self new setNumerator: aFraction denominator: 1 scale: anInteger}
		}.
	}.

	method isLiteral
		:= denominator = 1 || ((10 asProtoObject raisedTo: scale) \\ denominator) = 0.

	method reciprocal
		:= self class newFromNumber: super reciprocal scale: scale.

	method setNumerator: n denominator: d scale: s := {
		super setNumerator: n denominator: d.
		scale := s.
		self
	}.

	method negated
		:= self class newFromNumber: super negated scale: scale.
}.

}. ## End of namespace Smalltalk
