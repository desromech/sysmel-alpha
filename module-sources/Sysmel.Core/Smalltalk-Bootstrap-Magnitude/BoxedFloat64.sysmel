namespace Smalltalk definition: {

BoxedFloat64 extend: {
	method negated
		:= __float64Value negated.

	method sqrt := {
		__float64Value < 0 ifTrue: {
			return: (DomainError signal: "sqrt is undefined for negative numbers.")
		}.

		__float64Value sqrt.
	}.

	method abs
		:= __float64Value abs.

	method sign
		:= __float64Value sign castTo: IntPointer.

	method floor
		:= __float64Value floor castTo: Int64.

	method ceiling
		:= __float64Value ceiling castTo: Int64.

	method truncated
		:= __float64Value truncated castTo: Int64.

	method rounded
		:= __float64Value rounded castTo: Int64.

	method fract
		:= __float64Value fract castTo: Int64.

	method fractionPart
		:= __float64Value fract.

	method exp
		:= __float64Value exp.

	method exp2
		:= __float64Value exp2.

	method ln
		:= __float64Value ln.

	method log2
		:= __float64Value log2.

	method = aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a = b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a = b
		}.

		super = aNumber
	}.

	method ~= aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a ~= b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a ~= b
		}.

		super ~= aNumber
	}.

	method < aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a < b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a < b
		}.

		super < aNumber
	}.

	method <= aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a <= b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a <= b
		}.

		super <= aNumber
	}.

	method > aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a > b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a > b
		}.

		super > aNumber
	}.

	method >= aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a >= b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a >= b
		}.

		super >= aNumber
	}.

	method <=> aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a <=> b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a <=> b
		}.

		super <=> aNumber
	}.

	method + aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a + b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a + b
		}.

        super + aNumber
    }.

	method - aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a - b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a - b
		}.

        super - aNumber
    }.

	method * aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a * b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a * b
		}.

        super * aNumber
    }.

	method / aNumber := {
		aNumber __isSmallInteger ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallInteger.
			return: a / b
		}.

		aNumber __isSmallOrBoxedFloat ifTrue: {
			let a := __float64Value.
			let b := aNumber __decodeSmallOrBoxedFloat.
			return: a / b
		}.

        super / aNumber
    }.

	method printOn: aStream := {
        let floatPrinter mutable type: Stdn BasicValueFloatPrinter.
        floatPrinter nextPutDouble: self __float64Value.
        floatPrinter printOn: aStream.

        self
    }.

    method printOnNativeTextStreamWriter: (writer: Stdn IO TextStreamWriter ref) := {
        writer << self __float64Value.
		self
    }.
}.

}. ## End of namespace Smalltalk
