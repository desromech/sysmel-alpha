namespace Smalltalk definition: {

Fraction extend: {
	field numerator.
	field denominator.

    method isFraction := true.
	method asFraction := self.

	meta definition: {
		method numerator: newNumerator denominator: newDenominator
			:= self new setNumerator: newNumerator denominator: newDenominator; yourself.
	}.

	method setNumerator: newNumerator denominator: newDenominator := {
		newDenominator = 0 ifTrue: {return: (ZeroDivide dividend: newNumerator) signal}.

		numerator := newNumerator asInteger.
		denominator := newDenominator asInteger abs.
		newDenominator < 0 ifTrue: {
			numerator := numerator negated
		}.

		self
	}.

	method negated
		:= Fraction numerator: numerator negated denominator: denominator.

	method negative
		:= numerator < 0.

	method numerator
		:= numerator.

	method denominator
		:= denominator.

	method reciprocal := {
		numerator abs = 1 ifTrue: {return: numerator * denominator}.
		self class numerator: denominator denominator: numerator
	}.

	method reduced := {
		numerator = 0 ifTrue: {return: 0}.

		let gcd := numerator gdc: denominator.
		let n := numerator // gcd.
		let d := denominator // gcd.
		d = 1 ifTrue: {return: n}.
		Fraction numerator: n denominator: d
	}.
}.

}. ## End of namespace Smalltalk
