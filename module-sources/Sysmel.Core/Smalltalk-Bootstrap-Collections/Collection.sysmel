namespace Smalltalk definition: {
Object extend: {
	method isEmptyOrNil
		:= false.

	method isArray := false.
}.

UndefinedObject extend: {
	method isEmptyOrNil
		:= true.
}.

Collection definition: {
	meta definition: {
		method with: first := {
			self new
				add: first;
				yourself
		}.

		method with: first with: second := {
			self new
				add: first;
				add: second;
				yourself
		}.

		method with: first with: second with: third := {
			self new
				add: first;
				add: second;
				add: third;
				yourself
		}.

		method with: first with: second with: third with: fourth := {
			self new
				add: first;
				add: second;
				add: third;
				add: fourth;
				yourself
		}.

		method with: first with: second with: third with: fourth with: fifth := {
			self new
				add: first;
				add: second;
				add: third;
				add: fourth;
				add: fifth;
				yourself
		}.

		method with: first with: second with: third with: fourth with: fifth with: sixth := {
			self new
				add: first;
				add: second;
				add: third;
				add: fourth;
				add: fifth;
				add: sixth;
				yourself
		}.

		method withAll: other
			:= (self new: other size)
				addAll: other;
				yourself.
	}.

	method isEmpty
		:= self size == 0.

	method isNotEmpty
		:= self isEmpty not.

	method isEmptyOrNil
		:= self size == 0.

	method ifEmpty: aBlock := {
		self isEmpty ifTrue: {
			aBlock value
		} ifFalse: {
			self
		}
	}.

	method ifNotEmpty: aBlock := {
		self isEmpty ifTrue: {
			self
		} ifFalse: {
			aBlock cull: self
		}
	}.

	method ifEmpty: emptyBlock ifNotEmpty: notEmptyBlock := {
		self isEmpty ifTrue: {
			emptyBlock value
		} ifFalse: {
			notEmptyBlock cull: self
		}
	}.

	method ifNotEmpty: notEmptyBlock ifEmpty: emptyBlock := {
		self isEmpty ifTrue: {
			emptyBlock value
		} ifFalse: {
			notEmptyBlock cull: self
		}
	}.

	method addAll: otherCollection := {
		otherCollection do: {:each :: Void |
			self add: each
		}.
		self
	}.

	method asArray := {
		let result := Array new: self size.
		let index mutable := 1.
		self do: {:each :: Void |
			result at: index put: each.
			index := index + 1
		}.
		result
	}.

	method asDictionary
		:= self as: Dictionary.

	method asOrderedCollection
		:= self as: OrderedCollection.

	method asSet
		:= Set withAll: self.

	method asIdentitySet
		:= (Set new: self size) addAll: self.

	method anySatify: aPredicate := {
		self do: {:each :: Void |
			(aPredicate value: each) ifTrue: {
				return: true
			}.
		}.
		false
	}.

	method allSatify: aPredicate := {
		self do: {:each :: Void |
			(aPredicate value: each) ifFalse: {
				return: false
			}.
		}.
		true
	}.

	method includes: anElement
		:= self anySatify: {:each | each = anElement}.

	method collect: aBlock as: aClass
		:= (aClass new: self size) fillFrom: self with: aBlock.

	method associationsDo: aBlock
		:= self do: aBlock.

	method copyWithout: anElement
		:= self reject: {:each | each = anElement}.

	method detect: aBlock ifNone: exceptionBlock
		:= self detect: aBlock ifFound: {:element | element } ifNone: exceptionBlock.

	method detect: aBlock ifFound: foundBlock
		:= self detect: aBlock ifFound: foundBlock ifNone: {| nil }.

	method detect: aBlock ifFound: foundBlock ifNone: exceptionBlock := {
		self do: {:each :: Void |
			(aBlock value: each) ifTrue: {
				return: (foundBlock cull: each)
			}
		}.

		exceptionBlock value
	}.

	method detect: aBlock
		:= self detect: aBlock ifNone: {| self errorNotFound: aBlock}.

	method printNameOn: aStream
        := super printOn: aStream.

    method printOn: aStream := {
        self printNameOn: aStream.
        self printElementsOn: aStream.
    }.

    method printElementsOn: aStream := {
        aStream nextPut: '('.
        self do: {:each :: Void | each printOn: aStream} separatedBy: {:: Void | aStream space}.
        aStream nextPut: ')'.
    }.

    method do: aBlock separatedBy: separatorBlock := {
        let hasSeenFirst mutable := false.
        self do: {:each :: Void |
            hasSeenFirst ifTrue: {
                separatorBlock value.
            } ifFalse: {
                hasSeenFirst := true.
            }.

            aBlock value: each
        }.
    }.
}.

}. ## End of namespace Smalltalk.
