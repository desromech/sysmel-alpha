namespace Stdn definition: {

class BasicValueIntegerPrinter superclass: BasicValuePrinter; definition: {

    method nextPutHexDigit: (digit: Int32) ::=> Void := {
        if: 0 <= digit && digit <= 9 then: {
            self nextPut: '0' + digit
        } else: {
            self nextPut: 'a' + digit - 10
        }
    }.

    method nextPutLittleUInt32: (value: UInt32) ::=> Void := {
        0 until: 32 by: 4 do: {:(UInt32)i :: Void|
            self nextPutHexDigit: ((value >> i) & 16rF castTo: Int32)
        }.
    }.

    method nextPutHexUInt32: (value: UInt32) ::=> Void := {
        for: (let i mutable type: Int32 := 28) while: i >= 0 do: {
            self nextPutHexDigit: ((value >> (i castTo: UInt32)) & 16rF castTo: Int32)
        } continueWith: (i := i - 4).
    }.

    method nextPutHexUInt64: (value: UInt64) ::=> Void := {
        for: (let i mutable type: Int32 := 60) while: i >= 0 do: {
            self nextPutHexDigit: ((value >> (i castTo: UInt64)) & 16rF castTo: Int32)
        } continueWith: (i := i - 4).
    }.

    ## Integer formatting.
    method nextPutInteger: (value: Int64) ::=> Void := {
        value < 0 ifTrue: {
            self nextPut: '-'.
            self nextPutUnsignedInteger: (value negated castTo: UInt64).
        } ifFalse: {
            self nextPutUnsignedInteger: (value castTo: UInt64).
        }.
    }.

    method nextPutUnsignedInteger: (value: UInt64) ::=> Void := {
        ## Extract the digits, in reverse order.
        let currentValue mutable := value.
        let digitCount mutable := 0.
        let buffer mutable type: (UInt8 array: 32).

        do: {
            let digit := '0' + currentValue % 10.
            buffer[digitCount] := digit castTo: UInt8.

            digitCount := digitCount + 1.

            currentValue := currentValue / 10
        } while: (currentValue ~= 0).

        ## Print the digits in the correct order
        while: (digitCount > 0) do: {
            digitCount := digitCount - 1.
            self nextPut: buffer[digitCount]
        }.
    }.

    method nextPutInteger: (value: Int64) base: (base: UInt64) ::=> Void := {
        value < 0 ifTrue: {
            self nextPut: '-'.
            self nextPutUnsignedInteger: (value negated castTo: UIntPointer) base: base
        } ifFalse: {
            self nextPutUnsignedInteger: (value castTo: UIntPointer) base: base
        }
    }.

    method nextPutUnsignedInteger: (value: UInt64) base: (base: UInt64) ::=> Void := {
        Stdn assert: 2 <= base && base <= 36.

        base = 10 ifTrue: {
            return: (self nextPutUnsignedInteger: value)
        }.

        let alphabet := "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".

        ## Extract the digits, in reverse order.
        let currentValue mutable := value.
        let digitCount mutable := 0.
        let buffer mutable type: (Char8 array: BufferCapacity).

        do: {
            buffer[digitCount] := alphabet[currentValue % base].
            digitCount := digitCount + 1.

            currentValue := currentValue / base
        } while: (currentValue ~= 0).

        ## Print the digits in the correct order
        while: (digitCount > 0) do: {
            digitCount := digitCount - 1.
            self nextPut: buffer[digitCount]
        }.
    }.
}.

}. ## End of namespace Stdn
