namespace Stdn definition: {

enum MemoryOrder values: #{
    Relaxed: 0.
    Consume: 1.
    Acquire: 2.
    Release: 3.
    AcquireAndRelease: 4.
    SequentiallyConsistent: 5.
}.

struct AtomicFlag definition: {
    field flag private type: Boolean8.

    method loadWith: (ordering: MemoryOrder) ::=> Boolean8 := {
        <staticBinding>
        <intrinsic: #"atomic.load">
        flag
    }.

    method load ::=> Boolean8
        := self loadWith: MemoryOrder SequentiallyConsistent.

    method store: (newValue: Boolean8) with: (ordering: MemoryOrder) ::=> Void := {
        <staticBinding>
        <intrinsic: #"atomic.store">
        flag := newValue.
    }.

    method store: (value: Boolean8) ::=> Void
        := self store: value with: MemoryOrder SequentiallyConsistent.

    method testAndSet: (value: Boolean8) with: (ordering: MemoryOrder) ::=> Boolean8 := {
        <staticBinding>
        <intrinsic: #"atomic.test_and_set">
        flag := value.
        value
    }.

    method testAndSet: (value: Boolean8) ::=> Boolean8
        := self testAndSet: value with: MemoryOrder SequentiallyConsistent
}.

template Atomic(BaseType: Type)
    := struct definition: {
    field value private type: BaseType.

    method loadWith: (ordering: MemoryOrder) ::=> BaseType := {
        <staticBinding>
        <intrinsic: #"atomic.load">
        value
    }.

    method load ::=> BaseType
        := self loadWith: MemoryOrder SequentiallyConsistent.

    method store: (newValue: BaseType) with: (ordering: MemoryOrder) ::=> Void := {
        <staticBinding>
        <intrinsic: #"atomic.store">
        value := newValue
    }.

    method store: (newValue: BaseType) ::=> Void
        := self store: value with: MemoryOrder SequentiallyConsistent.

    method swap: (newValue: BaseType) with: (ordering: MemoryOrder) ::=> BaseType := {
        <compileTime>
        <staticBinding>
        <intrinsic: #"atomic.swap_value">
        let result := value.
        value := newValue.
        result
    }.

    method swap: (newValue: BaseType) ::=> BaseType
        := self swap: newValue with: MemoryOrder SequentiallyConsistent.

    method atomicCompare: (comparedValue: BaseType) andSet: (newValue: BaseType) with: (ordering: MemoryOrder) ::=> Boolean8 := {
        <compileTime>
        <staticBinding>
        <intrinsic: #"atomic.compare_and_swap">
        let result := value == comparedValue.
        if: result then: {
            value := newValue
        }.

        result
    }.

    method atomicCompare: (comparedValue: BaseType) andSet: (newValue: BaseType) ::=> Boolean8
        := self atomicCompare: comparedValue andSet: newValue with: MemoryOrder SequentiallyConsistent.

    method atomicCompare: (comparedValue: BaseType) andSwap: (newValue: BaseType) with: (ordering: MemoryOrder) ::=> BaseType := {
        <compileTime>
        <staticBinding>
        <intrinsic: #"atomic.compare_and_swap">
        let result := value.
        if: value == comparedValue then: {
            value := newValue
        }.
        result
    }.

    method atomicCompare: (comparedValue: BaseType) andSwap: (newValue: BaseType) ::=> BaseType
        := self atomicCompare: comparedValue andSwap: newValue with: MemoryOrder SequentiallyConsistent.

    compileTime if: BaseType isPrimitiveIntegerType then: {
        method fetchAndAdd: (operand: BaseType) with: (ordering: MemoryOrder) ::=> BaseType := {
            <compileTime>
            <staticBinding>
            <intrinsic: #"atomic.fetch_and_add">
            let result := value.
            value := value + operand.
            result
        }.

        method fetchAndAdd: (operand: BaseType) ::=> BaseType
            := self fetchAndAdd: operand with: MemoryOrder SequentiallyConsistent.

        method fetchAndSubtract: (operand: BaseType) with: (ordering: MemoryOrder) ::=> BaseType := {
            <compileTime>
            <staticBinding>
            <intrinsic: #"atomic.fetch_and_subtract">
            let result := value.
            value := value - operand.
            result
        }.

        method fetchAndSubtract: (operand: BaseType) ::=> BaseType
            := self fetchAndSubtract: operand with: MemoryOrder SequentiallyConsistent.
    }

}.

compileTime constant AtomicUIntPointer := Atomic(UIntPointer).
compileTime constant AtomicIntPointer := Atomic(IntPointer).

}.
