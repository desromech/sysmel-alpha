namespace Smalltalk definition: {
namespace __Internal definition: {

function callProcessEntryPoint(processPointer: Void pointer) => IntPointer := {
    (processPointer reinterpretCastTo: __global Smalltalk Process)
        nativeThreadEntryPoint
}.
}.

gcclass Process superclass: Object; definition: {
    field thread type: Stdn Thread.
    field threadResultValue.
    field entryPointBlock.

    meta method startForBlock: aBlock
        := self new startForBlock: aBlock.

    method startForBlock: aBlock := {
        entryPointBlock := aBlock.
        thread start: __Internal callProcessEntryPoint address with: (self reinterpretCastTo: Void pointer).
        self
    }.

    method join := {
        thread join.
        threadResultValue.
    }.

    method detach := {
        thread detach.
        self
    }.

    virtual method nativeThreadEntryPoint => IntPointer := {
        threadResultValue := entryPointBlock value.
        0
    }.
}.

BlockClosure extend: {
    method spawn := {
        Process startForBlock: self
    }.

    method fork := {
        (Process startForBlock: self)
            detach;
            yourself
    }.
}.

}. ## End of namespace Smalltalk
