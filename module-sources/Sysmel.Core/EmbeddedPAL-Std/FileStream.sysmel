namespace Std definition: {
namespace IO definition: {


#**
 * File stream class.
 *#
class UnbufferedFileStream superclass: Stream;
definition: {
    public field fd type: Int32.
    public field isOwner_ type: Boolean8.
    private field eofDetected_ private type: Boolean8.

    meta method fromFD: (handle: Int32) ::=> SelfType
        := SelfType basicNewValue
            fd: handle;
            yourself.

    override method finalize => Void := {
        isOwner_ ifTrue: {
            self close.
        }
    }.

    method open: (path: CTypes ConstString) mode: (mode: FileOpenMode) permissions: (permissions: FilePermissions) ::=> Boolean8 := {
        let convertedMode mutable type: Int32 := EmbeddedPAL O_RDONLY.
        (mode value anyMask: FileOpenMode Write value) ifTrue: {
            (mode value anyMask: FileOpenMode Read value) ifTrue: {
                convertedMode := EmbeddedPAL O_RDWR.
            } ifFalse: {
                convertedMode := EmbeddedPAL O_WRONLY.
            }.

            (mode value anyMask: FileOpenMode Existent value) ifFalse: {
                convertedMode := convertedMode | EmbeddedPAL O_CREAT
            }.

            (mode value anyMask: FileOpenMode Append value) ifTrue: {
                convertedMode := convertedMode | EmbeddedPAL O_APPEND
            }.

            (mode value anyMask: FileOpenMode Truncate value) ifTrue: {
                convertedMode := convertedMode | EmbeddedPAL O_TRUNC
            }.
        } ifFalse: {
            convertedMode := EmbeddedPAL O_RDONLY.
        }.

        fd := EmbeddedPAL sysmel_epal_open(path, convertedMode, permissions value).
        isOwner_ := true.
        return: fd >= 0
    }.

    method open: (path: String const ref) mode: (mode: FileOpenMode) permissions: (permissions: FilePermissions) ::=> Boolean8
        := self open: path asCString mode: mode permissions: permissions.

    method open: (path: CTypes ConstString) mode: (mode: FileOpenMode) ::=> Boolean8
        := self open: path mode: mode permissions: FilePermissions DefaultFilePermissions.

    method open: (path: String const ref) mode: (mode: FileOpenMode) ::=> Boolean8
        := self open: path asCString mode: mode permissions: FilePermissions DefaultFilePermissions.

    method open: (path: Char8 const arraySlice) mode: (mode: FileOpenMode) permissions: (permissions: FilePermissions) ::=> Boolean8
        := self open: path asMutableString mode: mode permissions: permissions.

    method open: (path: Char8 const arraySlice) mode: (mode: FileOpenMode) ::=> Boolean8
        := self open: path asMutableString mode: mode permissions: FilePermissions DefaultFilePermissions.

    method close => Void := {
        self isValid ifTrue: {
            EmbeddedPAL sysmel_epal_close(fd).
            fd := -1
        }.
    }.

    method isValid => Boolean8
        := fd >= 0.

    override method atEnd => Boolean8
        := eofDetected_.

    override method position => Int64
        := EmbeddedPAL sysmel_epal_lseek64(fd, 0, EmbeddedPAL SEEK_CUR).

    override method seek: (offset: Int64) mode: (mode: SeekMode) ::=> Boolean8 := {
        let nativeSeekMode mutable := EmbeddedPAL SEEK_SET.
        mode selectCase: #{
        SeekMode Set : nativeSeekMode := EmbeddedPAL SEEK_SET.
        SeekMode Current : nativeSeekMode := EmbeddedPAL SEEK_CUR.
        SeekMode End : nativeSeekMode := EmbeddedPAL SEEK_END.
        }.

        eofDetected_ := false.
        EmbeddedPAL sysmel_epal_lseek64(fd, offset, nativeSeekMode) ~= -1
    }.

    override method write: (buffer: Void const pointer) size: (size: UIntPointer) ::=> IntPointer := {
        eofDetected_ := false.
        EmbeddedPAL sysmel_epal_write(fd, buffer, size) castTo: IntPointer.
    }.

    override method read: (buffer: Void pointer) size: (size: UIntPointer) ::=> IntPointer := {
        let result := EmbeddedPAL sysmel_epal_read(fd, buffer, size) castTo: IntPointer.
        eofDetected_ := result = 0.
        result
    }.
}.

class FileStream definition: {
    meta method fromFD: (handle: Int32) bufferingMode: (mode: StreamBufferingMode) ::=> SelfType := {
        <notInCompileTime>
        SelfType basicNewValue
            fd: handle;
            initialize;
            bufferingMode: mode;
            yourself.
    }
}.

class AtomicFileStream definition: {
    meta method fromFD: (handle: Int32) bufferingMode: (mode: StreamBufferingMode) ::=> SelfType := {
        <notInCompileTime>
        SelfType basicNewValue
            fd: handle;
            initialize;
            bufferingMode: mode;
            yourself.
    }
}.

global stdinFile mutable := AtomicFileStream fromFD: EmbeddedPAL STDIN_FILENO bufferingMode: StreamBufferingMode Block.
global stdoutFile mutable := AtomicFileStream fromFD: EmbeddedPAL STDOUT_FILENO
    bufferingMode: (if: EmbeddedPAL isatty(EmbeddedPAL STDOUT_FILENO) == 1 then: StreamBufferingMode Line else: StreamBufferingMode Block).
global stderrFile mutable := AtomicFileStream fromFD: EmbeddedPAL STDERR_FILENO bufferingMode: StreamBufferingMode None.

}. ## End of namespace IO

global stdout mutable := IO TextStreamWriter for: IO stdoutFile address.
global stderr mutable := IO TextStreamWriter for: IO stderrFile address.
}. ## End of namespace Std
