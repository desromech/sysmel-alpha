namespace Smalltalk definition: {

Behavior definition: {
	method subclasses := #().

	method subclassesDo: aBlock
		:= Smalltalk Runtime withReflectionLockedRead: {self subclasses do: aBlock}.

	method allSubclassesDo: aBlock := {
		Smalltalk Runtime withReflectionLockedRead: {
			self subclassesDo: {:cls :: Void |
				aBlock value: cls.
				cls allSubclassesDo: aBlock
			}.
		}.
		self
	}.

	method withAllSubclassesDo: aBlock := {
		Smalltalk Runtime withReflectionLockedRead: {
			aBlock value: self.
			self allSubclassesDo: aBlock
		}
	}.

	method __manipulateInstance: instance gcSlotsWith: (manipulationBlock: ((ProtoObject pointer) => Void) nativeStackBlockClosure) ::=> Void := {
		instance __isImmediateValue ifTrue: {return: nil}.

		let fixedSlotCount := instanceDataSize / UIntPointer instanceSize.
		let fixedSlots := instance reinterpretCastTo: ProtoObject pointer.

		0 until: fixedSlotCount do: {:i :: Void |
			(gcLayout isSlotIndexGCPointer: i) ifTrue: {
				manipulationBlock(fixedSlots[i] address)
			}.
		}.

		gcLayout variableDataIsGCPointers ifTrue: {
			let variableDataSize := (instance reinterpretCastTo: Stdn Reflection GCObjectHeader pointer) _ __variableDataSize * variableInstanceElementSize.
			let variableSlotCount := variableDataSize / UIntPointer instanceSize.
			let variableSlots := fixedSlots[fixedSlotCount] address.
			0 until: variableSlotCount do: {:i :: Void |
				manipulationBlock(variableSlots[i] address)
			}
		}.
	}.
}.

Class definition: {
	method classSide
		:= self class.

	method instanceSide
		:= self.
}.

Metaclass definition: {
	method classSide
		:= self.

	method instanceSide
		:= thisClass.

	method isMetaclassOfClassOrNil := {
		thisClass ifNil: { true }
			ifNotNil: {thisClass == Class }
	}.

	method subclassesDo: aBlock := {
		## Method taken from Pharo
		## Evaluate aBlock for each of the receiver's immediate subclasses.

		self isMetaclassOfClassOrNil ifFalse: {
			self instanceSide subclassesDo: { :each :: Void | aBlock value: each classSide }
		}.

		self
	}.
}.

}. ## End of namespace Smalltalk
