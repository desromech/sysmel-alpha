namespace Smalltalk definition: {

ProtoObject extend: {
    ## ifTrue:ifFalse
    macro method ifTrue: trueAction :=
        ``(if: `,self == true then: `,trueAction).
    macro method ifFalse: falseAction :=
        ``(if: `,self == false then: `,falseAction).
    macro method ifTrue: trueAction ifFalse: falseAction :=
        ``(if: `,self == true then: `,trueAction else: `,falseAction).
    macro method ifFalse: falseAction ifTrue: trueAction :=
        ``(if: `,self == true then: `,trueAction else: `,falseAction).

    ## TODO: Add higienic symbols.
    macro method ifNil: nilAction :=
        ``(if: `,self == nil then: `,nilAction).
    macro method ifNotNil: notNilAction := {
        let pointer := __astBuilder gensym: #pointer.
        ``{
            let `,pointer := `,self.
            if: `,pointer ~~ nil then: (`,notNilAction __macroInlineBlock: `,pointer)
        } asSequenceWithoutLexicalScope
    }.

    macro method ifNotNil: notNilAction ifNil: nilAction := {
        let pointer := __astBuilder gensym: #pointer.
        ``{
            let `,pointer := `,self.
            if: `,pointer ~~ nil then: (`,notNilAction __macroInlineBlock: `,pointer) else: `,nilAction
        } asSequenceWithoutLexicalScope
    }.

    macro method ifNil: nilAction ifNotNil: notNilAction := {
        let pointer := __astBuilder gensym: #pointer.
        ``{
            let `,pointer := `,self.
            if: `,pointer == nil then: `,nilAction else: (`,notNilAction __macroInlineBlock: `,pointer)
        } asSequenceWithoutLexicalScope
    }.

    macro method isNil := ``(`,self == nil).
    macro method isNotNil := ``(`,self ~~ nil).

    macro method and: other := ``(if: `,self == true then: `,other else: false).
    macro method or: other := ``(if: `,self == true then: true else: `,other).

    macro method && other := ``(`,self and: `,other).
    macro method || other := ``(`,self or: `,other).
}.

}.
