namespace Stdn definition: {
namespace Unwind definition: {

function gcExceptionCleanUpFunction(reasonCode: _Unwind_Reason_Code, unwindException: _Unwind_Exception pointer) => Void := {
	(SysmelUnwindExceptionData fromUnwindException: unwindException) nativeDelete
}.


function allocateGCExceptionDataFor(object: Void pointer, typeInfo: Stdn Reflection TypeInformation const pointer) => SysmelUnwindExceptionData pointer := {
    let exceptionData := SysmelUnwindExceptionData basicNativeNew.

    exceptionData _
        kind: SysmelExceptionKind Native;
		exceptionTypeInfo: typeInfo;
        exceptionObjectPointer: object.
    exceptionData _ unwindException
        exceptionClass: OurExceptionClass;
		exceptionCleanup: gcExceptionCleanUpFunction address.
	exceptionData
}.

Smalltalk Exception extend: {
    method signal := {
        let typeInfo := self class reinterpretCastTo: Stdn Reflection TypeInformation pointer.

        ## Use the RTTI type information for cloning the exception object into the heap.
        let exceptionData := allocateGCExceptionDataFor(self reinterpretCastTo: Void pointer, typeInfo).

        ## Raise the actual exception.
        let reasonCode := _Unwind_RaiseException(exceptionData _ unwindException address).

        stderr << "Unhandled GC exception:"; nl.
        self printOnNativeTextStreamWriter: stderr. stderr nl.
        stderr << "Aborting the program execution."; nl.
        native_abort().

        self
    }.
}.

}. ## End of namespace Unwind
}. ## End of namespace Stdn
