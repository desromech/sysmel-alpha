namespace Stdn definition: {

class SharedObject.

template SharedRefCounter(PT: Type)
    := struct definition: {
    compileTime constant PointedType := PT.
	compileTime constant PointerType := PointedType pointer.
    compileTime constant CounterType := SelfType.

    meta extend: {
        inline method for: (pointer: PointerType) ::=> CounterType pointer := {
            pointer ifNil: {
                nil
            } ifNotNil: {
                CounterType basicNativeNew _
                    initializeWith: pointer;
                    address.
            }
        }.

        inline method forNewInstance ::=> CounterType pointer := {
            let pointer := PointedType basicNativeNew.
            let result := self for: pointer.
            pointer ifNotNil: {
                pointer _ initialize
            }.

            result
        }.
    }.

    private field strongCounter_ type: AtomicUIntPointer.
    private field weakCounter_ type: AtomicUIntPointer.
    private field pointer_ type: PointerType.

    inline method initializeWith: (pointer: PointerType) ::=> Void := {
        strongCounter_ store: 1 with: MemoryOrder Release.
        weakCounter_ store: 1 with: MemoryOrder Release.
        pointer_ := pointer.
        compileTime if: (PointedType isSubtypeOf: SharedObject) then: {
            let downWeakPointer := WeakPointer(PointedType) basicNewValue initializeWith: self address andPointer: pointer; yourself.
            pointer_ _ initializeInternalSelfWeakPointer: (downWeakPointer upCastFor: SharedObject)
        }.
    }.

    inline const method getPointer => PointerType
        := pointer_.

    inline method strongRetain => Void := {
        strongCounter_ fetchAndAdd: 1 with: MemoryOrder AcquireAndRelease
    }.

    inline method strongRelease => Void := {
        let oldCount := strongCounter_ fetchAndSubtract: 1 with: MemoryOrder AcquireAndRelease.
        ##Stdn stdout << "Old strong release count " << oldCount; nl.
        oldCount == 1 ifTrue: {
            ##Stdn stdout << "No more strong counts delete the object " << pointer_; nl.
            pointer_ nativeDelete.
            self weakRelease.
        }.

    }.

    inline method weakRetain => Void := {
        weakCounter_ fetchAndAdd: 1 with: MemoryOrder AcquireAndRelease.
    }.

    inline method weakRelease => Void := {
        let oldCount := weakCounter_ fetchAndSubtract: 1 with: MemoryOrder AcquireAndRelease.
        ##Stdn stdout << "Old weak release count " << oldCount; nl.
        oldCount == 1 ifTrue: {
            ##Stdn stdout << "No more weak count, delete the counter " << self address; nl.
            self address nativeDelete
        }
    }.

    inline method weakLock => Boolean8 := {
        let oldCount mutable type: UIntPointer.
        while: (oldCount := strongCounter_ loadWith: MemoryOrder Acquire) ~= 0 do: {
            (strongCounter_ atomicCompare: oldCount andSet: oldCount + 1 with: MemoryOrder AcquireAndRelease) ifTrue: {
                return: true
            }
        }.

        return: false
    }.
}.

template SharedPointer(PT: Type)
    := struct definition: {
    compileTime constant PointedType := PT.
	compileTime constant PointerType := PointedType pointer.
    compileTime constant CounterType := SharedRefCounter(PT).
	compileTime constant SmartPointerType := SelfType.
	compileTime constant WeakPointerType := WeakPointer(PT).

    meta extend: {
        inline method for: (pointer: PointerType) ::=> SmartPointerType
            := SmartPointerType basicNewValue initializeWithNewCounter: (CounterType for: pointer) andPointer: pointer; yourself.

        inline method forNewInstance ::=> SmartPointerType := {
            let counter := CounterType forNewInstance.
            SmartPointerType basicNewValue initializeWithNewCounter: counter andPointer: counter _ getPointer; yourself.
        }.

        macro method nil := ``(`,self basicNewValue).
    }.

    private field counter_ type: CounterType pointer.
    private field pointer_ type: PointerType.

    const inline method == (other: SelfType const ref) ::=> Boolean8
        := pointer_ == other getPointer.
    const inline method ~~ (other: SelfType const ref) ::=> Boolean8
        := pointer_ ~~ other getPointer.

    const inline method = (other: SelfType const ref) ::=> Boolean8
        := counter_ = other __private counter_ .
    const inline method ~= (other: SelfType const ref) ::=> Boolean8
        := counter_ ~= other __private counter_ .
    const inline method hash ::=> Hash
        := counter_ hash.

    inline method finalize => Void := {
        let c := counter_.
        pointer_ := nil.
        counter_ := nil.
        c ifNotNil: {
            c _ strongRelease.
        }.
    }.

    inline method initializeWithNewCounter: (counter: CounterType pointer) andPointer: (pointer: PointerType) ::=> Void := {
        counter_ := counter.
        pointer_ := pointer.
    }.

    inline method initializeCopyingFrom: (o: SelfType const ref) ::=> Void := {
		counter_ := o __private counter_.
		counter_ ifNotNil: {
			counter_ _ strongRetain
		}.
        pointer_ := o __private pointer_
	}.

	inline method initializeMovingFrom: (o: SelfType tempRef) ::=> Void := {
		counter_ := o __private counter_.
        pointer_ := o __private pointer_.
		o __private counter_ := nil.
        o __private pointer_ := nil.
	}.

    inline const method _ => PointedType ref
        := pointer_ _.

    inline const method getCounter => CounterType pointer
        := counter_ .

    inline const method getPointer => PointerType := {
        return: pointer_.
    }.

    inline method initializeWithExistingCounter: (newCounter: CounterType pointer) andPointer: (newPointer: PointerType) ::=> Void := {
        newCounter ifNotNil: {
            newCounter _ strongRetain.
        }.

        counter_ := newCounter.
        pointer_ := newPointer.
	}.

    inline method reset: (newPointer: PointerType) ::=> Void := {
        let newSharedPointer mutable := SelfType for: newPointer.
        self swapWith: newSharedPointer
	}.

	inline method reset => Void
		:= self reset: nil.

    (inline method := (o: SelfType const ref)) ::=> SelfType const ref := {
        self address ~~ o address ifTrue: {
            let newSharedPointer mutable := o.
            self swapWith: newSharedPointer
        }.
		self
	}.

	(inline method := (o: SelfType tempRef)) ::=> SelfType const ref := {
        self address ~~ o address ifTrue: {
            let newSharedPointer mutable := o.
            o __private counter_ := nil.
    		o __private pointer_ := nil.
            self swapWith: newSharedPointer
        }.

		self
	}.

    inline method swapWith: (o: SelfType ref) ::=> Void := {
        Stdn swapValue: counter_ with: o __private counter_.
        Stdn swapValue: pointer_ with: o __private pointer_.
    }.

    const inline method asWeakPointer => WeakPointerType
        := WeakPointerType for: self.

    macro method upCastFor: targetType := {
        let tempRef := __astBuilder gensym: #smartPointer.
        ``{
            let `,tempRef ref := `,self.

            Stdn SharedPointer(`,targetType) basicNewValue
                initializeWithExistingCounter: (`,tempRef getCounter reinterpretCastTo: Stdn SharedRefCounter(`,targetType) pointer)
                andPointer: `,tempRef getPointer;
                yourself
        } asSequenceWithoutLexicalScope
    }.

    macro method downCastFor: targetType := {
        let tempRef := __astBuilder gensym: #smartPointer.
        ``{
            let `,tempRef ref := `,self.

            Stdn SharedPointer(`,targetType) basicNewValue
                initializeWithExistingCounter: (`,tempRef getCounter reinterpretCastTo: Stdn SharedRefCounter(`,targetType) pointer)
                andPointer: (`,tempRef getPointer castTo: `,targetType pointer);
                yourself
        } asSequenceWithoutLexicalScope
    }.

    ## Some convenience macros.
	macro method isNil := ``(`,self getPointer isNil).
	macro method isNotNil := ``(`,self getPointer isNotNil).

	macro method ifNil: nilAction := ``(`,self getPointer ifNil: `,nilAction).
	macro method ifNil: nilAction ifNotNil: notNilAction := ``(`,self getPointer ifNil: `,nilAction ifNotNil: `, notNilAction).
	macro method ifNotNil: notNilAction := ``(`,self getPointer ifNotNil: `,notNilAction).
	macro method ifNotNil: notNilAction ifNil: nilAction  := ``(`,self getPointer ifNotNil: `,notNilAction ifNil: `,nilAction).
}.

template WeakPointer(PT: Type)
    := struct definition: {
    compileTime constant PointedType := PT.
	compileTime constant PointerType := PointedType pointer.
    compileTime constant CounterType := SharedRefCounter(PT).
	compileTime constant WeakPointerType := SelfType.
	compileTime constant StrongPointerType := SharedPointer(PT).

    private field counter_ type: CounterType pointer.
    private field pointer_ type: PointerType.

    meta extend: {
        inline method for: (strongRef: StrongPointerType const ref) ::=> WeakPointerType
            := WeakPointerType basicNewValue initializeWith: strongRef __private counter_ andPointer: strongRef __private pointer_; yourself.
        macro method nil := ``(`,self basicNewValue).
    }.

    inline method finalize => Void := {
        self reset.
    }.

    const inline method == (other: SelfType const ref) ::=> Boolean8
        := counter_ == other __private counter_.
    const inline method ~~ (other: SelfType const ref) ::=> Boolean8
        := counter_ ~~ other __private counter_.

    const inline method = (other: SelfType const ref) ::=> Boolean8
        := counter_ = other __private counter_ .
    const inline method ~= (other: SelfType const ref) ::=> Boolean8
        := counter_ ~= other __private counter_ .
    const inline method hash ::=> Hash
        := counter_ hash.

    inline method reset => Void := {
        let c := counter_.
        counter_ := nil.
        pointer_ := nil.

        c ifNotNil: {
            c _ weakRelease.
        }.
    }.

    inline method initializeWith: (theCounter: CounterType pointer) andPointer: (thePointer: PointerType) ::=> Void := {
        counter_ := theCounter.
        pointer_ := thePointer.
        counter_ ifNotNil: {
            counter_ _ weakRetain.
        }.
    }.

    inline method initializeCopyingFrom: (o: SelfType const ref) ::=> Void := {
		self initializeWith: o __private counter_ andPointer: o __private pointer_.
	}.

	inline method initializeMovingFrom: (o: SelfType tempRef) ::=> Void := {
		counter_ := o __private counter_.
        pointer_ := o __private pointer_.
		o __private counter_ := nil.
        o __private pointer_ := nil.
	}.

    (inline method := (o: StrongPointerType const ref)) ::=> SelfType const ref := {
		let newCounter := o __private counter_.
        let newPointer := o __private pointer_.
        let oldCounter := counter_.
        counter_ := newCounter.
        pointer_ := newPointer.

		newCounter ifNotNil: {
			newCounter _ weakRetain
		}.
        oldCounter ifNotNil: {
			oldCounter _ weakRelease
		}.

		self
	}.

    (inline method := (o: SelfType const ref)) ::=> SelfType const ref := {
        self address ~~ o address ifTrue: {
            let copy mutable := o.
            self swapWith: copy.
        }.
		self
	}.

	(inline method := (o: SelfType tempRef)) ::=> SelfType const ref := {
        self address ~~ o address ifTrue: {
            let copy mutable := o.
            o __private counter_ := nil.
    		o __private pointer_ := nil.
            self swapWith: copy.
        }.
		self
	}.

    inline method lock => StrongPointerType := {
        counter_ isNotNil && counter_ _ weakLock ifTrue: {
            return: (StrongPointerType basicNewValue initializeWithNewCounter: counter_ andPointer: pointer_; yourself)
        }.

        return: StrongPointerType nil
    }.

    inline method swapWith: (o: SelfType ref) ::=> Void := {
        Stdn swapValue: counter_ with: o __private counter_.
        Stdn swapValue: pointer_ with: o __private pointer_.
    }.

    macro method upCastFor: targetType := {
        let tempRef := __astBuilder gensym: #smartPointer.
        ``{
            let `,tempRef ref := `,self.

            Stdn WeakPointer(`,targetType) basicNewValue
                initializeWith: (`,tempRef __private counter_ reinterpretCastTo: Stdn SharedRefCounter(`,targetType) pointer)
                andPointer: `,tempRef __private pointer_;
                yourself
        } asSequenceWithoutLexicalScope
    }.

    macro method downCastFor: targetType := {
        let tempRef := __astBuilder gensym: #smartPointer.
        ``{
            let `,tempRef ref := `,self.

            Stdn WeakPointer(`,targetType) basicNewValue
                initializeWith: (`,tempRef __private counter_ reinterpretCastTo: Stdn SharedRefCounter(`,targetType) pointer)
                andPointer: (`,tempRef __private pointer_ castTo: `,targetType pointer);
                yourself
        } asSequenceWithoutLexicalScope
    }.
}.

#**
 * I am an that holds a pointer into its reference counter.
 *#
class SharedObject superclass: Object; definition: {
    private field internalSelfWeakPointer type: Stdn WeakPointer(SelfType).

    method initializeInternalSelfWeakPointer: (weakPointer: Stdn WeakPointer(SelfType) tempRef) ::=> Void
        := internalSelfWeakPointer := weakPointer.

    method asSharedObjectWeakPointer => Stdn WeakPointer(SelfType) const ref
        := internalSelfWeakPointer.

    method asSharedObjectPointer => Stdn SharedPointer(SelfType)
        := internalSelfWeakPointer lock.

    macro method asWeakPointer := ``(`,self asSharedObjectWeakPointer downCastFor: `,SelfType).
    macro method asSharedPointer := ``(`,self asSharedObjectPointer downCastFor: `,SelfType).

    (inline method := (other: SelfType const ref)) => SelfType ref := {
        ## internalSelfWeakPointer should not be modified.
        self
    }.

    (inline method := (other: SelfType tempRef)) => SelfType ref := {
        ## internalSelfWeakPointer should not be modified.
        self
    }.

}.

_NativeType meta macro method sharedPointer := ``(Stdn SharedPointer(`,self)).
_NativeType meta macro method weakPointer := ``(Stdn WeakPointer(`,self)).

_NativeType meta macro method sharedNew := ``(`,self sharedPointer forNewInstance).

compileTime constant SharedObjectPtr := SharedObject sharedPointer.
compileTime constant SharedObjectWeakPtr := SharedObject weakPointer.

}. ## End of namespace Stdn
