namespace Stdn definition: {
namespace Memory definition: {

#**
 * I am a fixed sized buddy memory block that works by subdiving a large block of size N in smaller blocks.
 * I am designed with the objective of my structure having a fixed size determined in compile time according
 * to the maximum number of blocks that I can allocate. I am intended to be used as a building block for more complex memory allocators.
 *#
template FixedSizeBuddyBlockAllocator(MNOSB: _LiteralInteger)
    := class definition: {

    ## Compute the size of the buddy bitmap.
    compileTime constant MaxNumberOfSmallestBlocks := MNOSB.

    ## The size of the bitmap.
    compileTime constant TotalBlockCount := MaxNumberOfSmallestBlocks*2.
    compileTime constant BlockIndexType := UInt16.

    ## The number of levels.
    compileTime constant LevelCount := MaxNumberOfSmallestBlocks highBit.
    compileTime constant LeafLevelBlockCount := 1<<(LevelCount - 1).

    compileTime constant InvalidBlockIndex := -1 castTo: BlockIndexType.
    compileTime constant InvalidAllocation := -1 castTo: UIntPointer.

    field allBlocks_nextFreePointer type: (BlockIndexType array: TotalBlockCount).
    field leafBlocks_startRunIndex type: (BlockIndexType array: LeafLevelBlockCount).
    field leafBlocks_allocatedLevel type: (UInt8 array: LeafLevelBlockCount).
    field freeLeafBlockCount type: BlockIndexType.

    field perLevelFreeListHeads type: (BlockIndexType array: LevelCount).

    method initialize => Void := {
        ## Mark the top level as free.
        perLevelFreeListHeads[0] := 0.
        allBlocks_nextFreePointer[0] := InvalidBlockIndex.

        ## Mark the remaining levels as unallocated.
        1 until: LevelCount do: {:i :: Void |
            perLevelFreeListHeads[i] := InvalidBlockIndex
        }.

        ## Initialize the leaf blocks.
        0 until: LeafLevelBlockCount do: {:i :: Void |
            leafBlocks_startRunIndex[i] := InvalidBlockIndex.
            leafBlocks_allocatedLevel[i] := 16rff.
        }.

        ## Count all of the leaf blocks as free.
        freeLeafBlockCount := LeafLevelBlockCount.
    }.

    method currentFreeLeafBlockCount => BlockIndexType
        := freeLeafBlockCount.

    method blocksPerLevel: (level: UIntPointer) ::=> UIntPointer := 1<<level.
    method smallBlockCountPerLevel: (level: UIntPointer) ::=> UIntPointer := 1 << (LevelCount - level - 1).

    method totalBlocksBeforeLevel: (level: UIntPointer) ::=> UIntPointer := {
        level == 0
            ifTrue: (0)
            ifFalse: (self blocksPerLevel: level - 1) * 2 - 1
    }.

    method findLevelForBlockCount: (blockCount: UIntPointer) ::=> UIntPointer
        := LevelCount - blockCount log2Ceil - 1.

    method allocateBlocks: (blockCount: UIntPointer) forSlab: (isForSlab: Boolean8) ::=> UIntPointer := {
        blockCount > freeLeafBlockCount ifTrue: {
            return: InvalidAllocation.
        }.

        let targetLevel := self findLevelForBlockCount: blockCount.

        let allocatedBlock := self allocateBlockInLevel: targetLevel.
        allocatedBlock == InvalidBlockIndex ifTrue: {
            return: InvalidAllocation
        }.

        let allocationBlockCount := self smallBlockCountPerLevel: targetLevel.
        assert: freeLeafBlockCount >= allocationBlockCount.
        freeLeafBlockCount := freeLeafBlockCount - allocationBlockCount castTo: BlockIndexType.

        let leafBlockIndex := (allocatedBlock - (self totalBlocksBeforeLevel: targetLevel)) * allocationBlockCount.

        ## Store pointer into all of the starting blocks. This is needed for multi-run slab allocators.
        0 until: allocationBlockCount do: {:(UIntPointer)i :: Void |
            leafBlocks_startRunIndex[leafBlockIndex + i] := leafBlockIndex castTo: BlockIndexType.
        }.

        ## Store the target allocated level, and a bit to indicate the presence of a slab.
        leafBlocks_allocatedLevel[leafBlockIndex] := targetLevel | ((isForSlab ifTrue: 16r80 ifFalse: 16r0) castTo: UInt8) castTo: UInt8.

        leafBlockIndex
    }.

    method freeAtBlock: (blockIndex: UIntPointer) ::=> Void := {
        ## Get the index of the first leaf block corresponding to this leaf.
        let leafBlockIndex := leafBlocks_startRunIndex[blockIndex].
        assert: leafBlockIndex ~~ InvalidBlockIndex.

        ## Get the index of the allocated level.
        let allocatedLevel := leafBlocks_allocatedLevel[leafBlockIndex] & 16r7f castTo: UIntPointer.
        let allocationBlockCount := self smallBlockCountPerLevel: allocatedLevel.
        freeLeafBlockCount := freeLeafBlockCount + allocationBlockCount castTo: BlockIndexType.

        ## Clear the leaf block metadata.
        0 until: allocationBlockCount do: {:(UIntPointer)i :: Void |
            leafBlocks_startRunIndex[leafBlockIndex + i] := InvalidBlockIndex.
        }.

        ## Clear the target allocated level.
        leafBlocks_allocatedLevel[leafBlockIndex] := 16rff.

        ## Compute the level indices.
        let levelIndex := blockIndex / allocationBlockCount.

        self freeBlock: (levelIndex castTo: BlockIndexType) inLevel: allocatedLevel.
    }.

    method freeBlock: (levelIndex: BlockIndexType) inLevel: (level: UIntPointer) ::=> Void := {
        let rawBlockIndex := levelIndex + (self totalBlocksBeforeLevel: level) castTo: BlockIndexType.
        let buddyBlockIndex := (levelIndex isEven ifTrue: (rawBlockIndex + 1) ifFalse: (rawBlockIndex - 1)) castTo: BlockIndexType.

        level > 0 && (self removeBlock: buddyBlockIndex fromFreeListInLevel: level) ifTrue: {
            self freeBlock: (levelIndex / 2 castTo: BlockIndexType) inLevel: level - 1
        } ifFalse: {
            ## Put the block in the level free list.
            allBlocks_nextFreePointer[rawBlockIndex] := perLevelFreeListHeads[level].
            perLevelFreeListHeads[level] := rawBlockIndex.
        }
    }.

    method removeBlock: (buddyBlockIndex: BlockIndexType) fromFreeListInLevel: (level: UIntPointer) ::=> Boolean8 := {
        ## Handle in the first element as a special case.
        perLevelFreeListHeads[level] == buddyBlockIndex ifTrue: {
            perLevelFreeListHeads[level] := allBlocks_nextFreePointer[buddyBlockIndex].
            return: true
        }.

        ## Go through the linked list until we find the element, or the end of the list.
        let currentPosition mutable := perLevelFreeListHeads[level].
        currentPosition == InvalidBlockIndex ifTrue: {
            return: false
        }.

        let nextPosition mutable type: BlockIndexType.
        while: ((nextPosition := allBlocks_nextFreePointer[currentPosition]) ~= InvalidBlockIndex) do: {
            nextPosition == buddyBlockIndex ifTrue: {
                allBlocks_nextFreePointer[currentPosition] := allBlocks_nextFreePointer[nextPosition].
                return: true
            }

        } continueWith: (currentPosition := nextPosition).

        false
    }.

    method carveBlockInLevel: (level: UIntPointer) ::=> BlockIndexType := {
        let freeBlock mutable := perLevelFreeListHeads[level].

        freeBlock == InvalidBlockIndex ifTrue: {
            ## Did we reach the root?
            level == 0 ifTrue: {
                return: InvalidBlockIndex
            }.

            ## Carve in the previous level.
            freeBlock := self carveBlockInLevel: level - 1.
            freeBlock == InvalidBlockIndex ifTrue: {
                return: InvalidBlockIndex
            }
        }.

        ##stdout << "Carve level " << level << " free block: " << freeBlock; nl.

        ## Remove the block from the free list.
        perLevelFreeListHeads[level] := allBlocks_nextFreePointer[freeBlock].

        ## Compute the indices of the children.
        let leftIndex := freeBlock * 2 + 1 castTo: BlockIndexType.
        let rightIndex := leftIndex + 1 castTo: BlockIndexType.

        ## Add the children into the free list of the next level.
        allBlocks_nextFreePointer[rightIndex] := perLevelFreeListHeads[level + 1].
        allBlocks_nextFreePointer[leftIndex] := rightIndex.
        perLevelFreeListHeads[level + 1] := leftIndex.

        ## Return the left child.
        leftIndex
    }.

    method allocateBlockInLevel: (targetLevel: UIntPointer) ::=> BlockIndexType := {
        targetLevel >= LevelCount ifTrue: {
            return: InvalidBlockIndex
        }.

        let freeBlock mutable := perLevelFreeListHeads[targetLevel].
        freeBlock == InvalidBlockIndex ifTrue: {
            freeBlock := self carveBlockInLevel: targetLevel - 1.
            freeBlock == InvalidBlockIndex ifTrue: {
                return: InvalidBlockIndex
            }
        }.

        ## We found a block.
        ## Remove the block from the linked list.
        perLevelFreeListHeads[targetLevel] := allBlocks_nextFreePointer[freeBlock].

        ## Return the block.
        freeBlock
    }.

    method getAllocatedBlockCountAt: (blockIndex: UIntPointer) ::=> UIntPointer := {
        ## Get the index of the first leaf block corresponding to this leaf.
        let firstBlockIndex := leafBlocks_startRunIndex[blockIndex].
        assert: firstBlockIndex ~~ InvalidBlockIndex.

        ## Get the index of the allocated level.
        assert: leafBlocks_allocatedLevel[firstBlockIndex] ~~ 16rff.
        let allocatedLevel := leafBlocks_allocatedLevel[firstBlockIndex] & 16r7f castTo: UIntPointer.
        self smallBlockCountPerLevel: allocatedLevel
    }.

    method getSlabBlockOrInvalid: (blockIndex: UIntPointer) ::=> BlockIndexType := {
        ## Get the index of the first leaf block corresponding to this leaf.
        let firstBlockIndex := leafBlocks_startRunIndex[blockIndex].
        assert: firstBlockIndex ~~ InvalidBlockIndex.

        ## Get the index of the allocated level.
        let allocatedLevel := leafBlocks_allocatedLevel[firstBlockIndex].
        assert: allocatedLevel ~= 16rff.

        ## Check the slab flag.
        (allocatedLevel & 16r80) ~~ 0 ifTrue: {
            firstBlockIndex
        } ifFalse: {
            InvalidBlockIndex
        }
    }.

    method hasFreeBlockInLevel: (targetLevel: UIntPointer) ::=> Boolean8 := {
        let freeBlock := perLevelFreeListHeads[targetLevel].

        freeBlock == InvalidBlockIndex ifTrue: {
            ## Did we reach the root?
            targetLevel == 0 ifTrue: {
                false
            } ifFalse: {
                self hasFreeBlockInLevel: targetLevel - 1
            }
        } ifFalse:{
            true
        }
    }.
}.

}. ## End of namespace Memory
}. ## End of namespace Stdn
