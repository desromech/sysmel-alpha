namespace Stdn definition: {
namespace IO definition: {


#**
 * File stream class.
 *#
class UnbufferedFileStream superclass: Stream;
definition: {
    public field fd type: Int32.
    private field eofDetected_ private type: Boolean8.

    meta method fromFD: (handle: Int32) ::=> SelfType
        := SelfType basicNewValue
            fd: handle;
            yourself.

    override method finalize => Void
        := self close.

    method open: (path: CTypes ConstString) mode: (mode: FileOpenMode) permissions: (permissions: FilePermissions) ::=> Boolean8
        := false.

    method open: (path: String const ref) mode: (mode: FileOpenMode) permissions: (permissions: FilePermissions) ::=> Boolean8
        := self open: path asCString mode: mode permissions: permissions.

    method open: (path: CTypes ConstString) mode: (mode: FileOpenMode) ::=> Boolean8
        := self open: path mode: mode permissions: FilePermissions DefaultFilePermissions.

    method open: (path: String const ref) mode: (mode: FileOpenMode) ::=> Boolean8
        := self open: path asCString mode: mode permissions: FilePermissions DefaultFilePermissions.

    method close => Void
        := void.

    method isValid => Boolean8
        := false.

    override method atEnd => Boolean8
        := true.

    override method position => Int64
        := 0.

    override method seek: (offset: Int64) mode: (mode: SeekMode) ::=> Boolean8
        := false.

    override method write: (buffer: Void const pointer) size: (size: UIntPointer) ::=> IntPointer := {
        eofDetected_ := false.
        EmbeddedPAL write(fd, buffer, size) castTo: IntPointer.
    }.

    override method read: (buffer: Void pointer) size: (size: UIntPointer) ::=> IntPointer
        := size castTo: IntPointer.
}.

class FileStream definition: {
    meta method fromFD: (handle: Int32) bufferingMode: (mode: StreamBufferingMode) ::=> SelfType := {
        <notInCompileTime>
        SelfType basicNewValue
            fd: handle;
            initialize;
            bufferingMode: mode;
            yourself.
    }
}.

class AtomicFileStream definition: {
    meta method fromFD: (handle: Int32) bufferingMode: (mode: StreamBufferingMode) ::=> SelfType := {
        <notInCompileTime>
        SelfType basicNewValue
            fd: handle;
            initialize;
            bufferingMode: mode;
            yourself.
    }
}.

global stdinFile mutable := AtomicFileStream fromFD: EmbeddedPAL STDIN_FILENO bufferingMode: StreamBufferingMode Block.
global stdoutFile mutable := AtomicFileStream fromFD: EmbeddedPAL STDOUT_FILENO
    bufferingMode: (if: EmbeddedPAL isatty(EmbeddedPAL STDOUT_FILENO) == 1 then: StreamBufferingMode Line else: StreamBufferingMode Block).
global stderrFile mutable := AtomicFileStream fromFD: EmbeddedPAL STDERR_FILENO bufferingMode: StreamBufferingMode None.

}. ## End of namespace IO

global stdout mutable := IO TextStreamWriter for: IO stdoutFile address.
global stderr mutable := IO TextStreamWriter for: IO stderrFile address.
}. ## End of namespace Stdn
