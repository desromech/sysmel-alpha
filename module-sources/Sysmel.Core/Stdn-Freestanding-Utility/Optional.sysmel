namespace Stdn definition: {

template Optional(VT: Type)
    := class definition: {
    compileTimeConstant ValueType := VT.

    private field present_ type: Boolean8.

    ## Erase the actual value type with the objective of deleting default construction/destruction.
    public field valueStorage_
        type: (UInt8 array: ValueType instanceSize);
        alignment: ValueType instanceAlignment.

    meta definition: {
        inline method empty ::=> InstanceType
            := InstanceType basicNewValue.

        inline method with: (theValue: ValueType const ref) ::=> InstanceType
            := InstanceType basicNewValue
                setValue: theValue;
                yourself.
    }.

    const inline method isPresent => Boolean8
        := present_.

    inline method value => ValueType ref := {
        assert: self isPresent.
        (valueStorage_[0] address reinterpretCastTo: ValueType pointer) _
    }.

    const inline method value => ValueType const ref := {
        assert: self isPresent.
        (valueStorage_[0] address reinterpretCastTo: ValueType pointer) _
    }.

    inline method finalize => Void := {
        self reset
    }.

    inline method _ => ValueType ref
        := self value.

    const inline method _ => ValueType const ref
        := self value.

    inline method reset => Void := {
        present_ ifTrue: {
            self _ finalize.
            present_ := false.
        }.
    }.

    inline method setValue: (newValue: ValueType const ref) ::=> Void := {
        newValue address ~~ (valueStorage_[0] address reinterpretCastTo: ValueType pointer) ifTrue: {
            ## FIXME: Make these additional returns unnecessary.
            present_ ifTrue: {
                self _ := newValue.
                return: nil
            } ifFalse: {
                present_ := true.
                self _ initializeCopyingFrom: newValue.
                return: nil
            }.
        }.
    }.

    inline method setValue: (newValue: ValueType tempRef) ::=> Void := {
        newValue address ~~ (valueStorage_[0] address reinterpretCastTo: ValueType pointer) ifTrue: {
            ## FIXME: Make these additional returns unnecessary.
            present_ ifTrue: {
                self _ := newValue.
                return: nil
            } ifFalse: {
                present_ := true.
                self _ initializeMovingFrom: newValue.
                return: nil
            }.
        }.
    }.

    (inline method := (newValue: ValueType const ref)) => SelfType const ref := {
        self setValue: newValue.
        self
    }.

    (inline method := (newValue: ValueType tempRef)) => SelfType const ref := {
        self setValue: newValue.
        self
    }.

    (inline method := (other: SelfType const ref)) => SelfType const ref := {
        self address ~~ other address ifTrue: {
            self reset.
            other isPresent ifTrue: {
                self := other _
            }
        }.

        self
    }.

    (inline method := (other: SelfType tempRef)) => SelfType const ref := {
        self address ~~ other address ifTrue: {
            self reset.
            other isPresent ifTrue: {
                self := other _ asMoveReference
            }
        }.

        self
    }.
}.

}. ## End of namespace Stdn
