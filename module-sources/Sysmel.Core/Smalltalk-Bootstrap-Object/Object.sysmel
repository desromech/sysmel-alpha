namespace Smalltalk definition: {

Object definition: {
    meta definition: {
        method readFromString: aString
            := self readFrom: aString readStream.

        method readFrom: aStream
            := self subclassResponsibility
    }.

    method value := self.

    method isBehavior
		:= false.

	method isClass
		:= false.

    method isKindOf: aClass
        := self class == aClass || (self class inheritsFrom: aClass).

    method isLiteral
        := false.

    method literalEqual: other
        := self class == other class && self = other.

    method asString
        := self printString.
    method printString
        := self printStringLimitedTo: 50000.
    method printStringLimitedTo: limit
        := self printStringLimitedTo: limit using: {:stream :: Void | self printOn: stream}.

    method printStringLimitedTo: limit using: printBlock
        := String streamContents: printBlock limitedTo: limit.

    method printOn: aStream
        := aStream nextPutAll: "a "; nextPutAll: self class name.

    method storeOn: aStream
        := self subclassResponsibility.

    method storeString
        := String streamContents: {:stream :: Void | self storeOn: stream}.

    method beReadOnlyObject
        := self.

    method beWritableObject
        := self.

    method error: message
        := Error new signal: message.

    method assert: condition
        := condition ifFalse: {AssertionFailure signal}.

    method notYetImplemented
        := NotYetImplemented signal.

    method subclassResponsibility
        := SubclassResponsibility signal.

    method shouldBeImplemented
        := ShouldBeImplemented signal.

    method shouldNotImplement
        := ShouldNotImplement signal.

    method errorSubscriptBounds: index
        := SubscriptOutOfBounds signalFor: index.

    method primitiveFail
        := PrimitiveFailed signal.

    method primitiveFailed
        := PrimitiveFailed signal.

    method copy
        := self shallowCopy postCopy.

    method postCopy
        := self.

    method clone
        := self class makeCopyOfInstance: self.

    method shallowCopy
        := self class makeCopyOfInstance: self.
}.

}. ## End of namespace Smalltalk
