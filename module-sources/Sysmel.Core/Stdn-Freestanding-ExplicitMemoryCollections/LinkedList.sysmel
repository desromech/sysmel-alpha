namespace Stdn definition: {
namespace ExplicitMemoryCollections definition: {

struct DoubleLinkedList.

struct DoubleLinkedListNode definition: {
    compileTime constant Node := DoubleLinkedListNode.
    compileTime constant List := DoubleLinkedList.

    field list public type: List pointer.
    field previous public type: Node pointer.
    field next public type: Node pointer.
}.

struct DoubleLinkedList definition: {
    compileTime constant Node := DoubleLinkedListNode.

    field first public type: DoubleLinkedListNode pointer.
    field last public type: DoubleLinkedListNode pointer.

    method isEmpty => Boolean8
        := first isNil.

    method add: (newNode: Node pointer) ::=> Void := {
        self addLast: newNode
    }.

    method addFirst: (newNode: Node pointer) ::=> Void := {
        assert: newNode _ list isNil.
        assert: newNode _ previous isNil.
        assert: newNode _ next isNil.

        newNode _ next: first.
        first ifNotNil: {
            first _ previous: newNode.
            first := newNode.
        } ifNil: {
            assert: last isNil.
            first := last := newNode
        }.

        newNode _ list: self address.
    }.

    method addLast: (newNode: Node pointer) ::=> Void := {
        assert: newNode _ list isNil.
        assert: newNode _ previous isNil.
        assert: newNode _ next isNil.

        newNode _ previous: last.
        last ifNotNil: {
            last _ next: newNode.
            last := newNode.
        } ifNil: {
            assert: last isNil.
            first := last := newNode
        }.

        newNode _ list: self address.
    }.

    method add: (newNode: Node pointer) after: (position: Node pointer) ::=> Void := {
        assert: newNode _ list isNil.
        assert: newNode _ previous isNil.
        assert: newNode _ next isNil.

        position ifNil: {
            self addFirst: newNode
        } ifNotNil: {
            ## Link with neighbors.
            newNode _
                previous: position;
                next: position _ next.

            ## Link next
            newNode _ next ifNil: {
                last := newNode
            } ifNotNil: {
                newNode _ next _ previous: position.
            }.

            ## Link previous
            position _ next: newNode.
            newNode _ list: self address.
        }.
    }.

    method add: (newNode: Node pointer) before: (position: Node pointer) ::=> Void := {
        assert: newNode _ list isNil.
        assert: newNode _ previous isNil.
        assert: newNode _ next isNil.

        position ifNil: {
            self addLast: newNode
        } ifNotNil: {
            ## Link with neighbors.
            newNode _
                previous: position _ previous;
                next: position.

            ## Link previous
            newNode _ previous ifNil: {
                first := newNode
            } ifNotNil: {
                newNode _ previous _ next: position.
            }.

            ## Link after
            position _ previous: newNode.
            newNode _ list: self address.
        }.
    }.

    method remove: (node: Node pointer) ::=> Void := {
        assert: node isNotNil.
        assert: node _ list == self address.

        ## Update the previous node.
        node _ previous ifNil: {
            first := node _ next
        } ifNotNil: {
            node _ previous _ next: node _ next.
        }.

        ## Update the next node.
        node _ next ifNil: {
            last := node _ previous.
        } ifNotNil: {
            node _ next _ previous: node _ previous.
        }.

        node _
            list: nil;
            previous: nil;
            next: nil.
    }
}.

}. ## End of namespaces ExplicitMemoryCollections
}. ## End of namespace Stdn
