namespace Std definition: {

#**
 * Win32 virtual memory interface.
 *#
namespace NativeVirtualMemoryInterface definition: {
    compileTime if: Compiler compilationTarget isWindowsStore then: {
        compileTime constant VirtualAlloc := Win32 VirtualAllocFromApp.
        compileTime constant VirtualProtect := Win32 VirtualProtectFromApp.
    } else: {
        compileTime constant VirtualAlloc := Win32 VirtualAlloc.
        compileTime constant VirtualProtect := Win32 VirtualFree.
    }.

    compileTime constant VirtualFree := Win32 VirtualFree.

    method pageSize => UIntPointer
        := 4096.

    method reserveAndCommitAddressSpace: (size: UIntPointer) alignment: (alignment: UIntPointer) ::=> Void pointer := {
        alignment <= NativeVirtualMemoryInterface pageSize ifTrue: {
            return: (NativeVirtualMemoryInterface reserveAndCommitAddressSpace: size)
        }.

        let optimisticResult := VirtualAlloc(nil, size, Win32 MEM_RESERVE | Win32 MEM_COMMIT, Win32 PAGE_READWRITE).
        optimisticResult ifNil: {
            return: nil.
        }.

        ## Since we cannot specify, the alignment first just try to map hoping for the best case.
        ## Otherwise, we need to take several mappings until we get a mapping with the required alignment.
        ## This technique is taken from the implementation in jemalloc.
        (optimisticResult isAlignedTo: alignment) ifTrue: {
            return: optimisticResult.
        } ifFalse: {
            VirtualFree(optimisticResult, 0, Win32 MEM_RELEASE) ~= 0.
            return: (NativeVirtualMemoryInterface slowReserveAndCommitAddressSpace: size alignment: alignment)
        }
    }.

    method slowReserveAndCommitAddressSpace: (size: UIntPointer) alignment: (alignment: UIntPointer) ::=> Void pointer := {
        let pageSize := NativeVirtualMemoryInterface pageSize.
        size + alignment < pageSize ifTrue: {
            return: nil.
        }.

        let allocationSize mutable := size + alignment - pageSize.

        while: true do: {
            ## Attempt an initial over sized reservation
            let initialMapping := VirtualAlloc(nil, allocationSize, Win32 MEM_RESERVE, Win32 PAGE_NOACCESS).
            initialMapping ifNil: {return: nil}.

            ## Compute the new aligned mapping address.
            let alignedMappingAddress := (initialMapping reinterpretCastTo: UIntPointer) alignedTo: alignment.

            ## Release the previous mapping, and try again, but with the correct aligned address.
            VirtualFree(initialMapping, 0, Win32 MEM_RELEASE) = 0 ifTrue: {
                return: nil
            }.

            let result := VirtualAlloc(alignedMappingAddress reinterpretCastTo: Void pointer, size, Win32 MEM_RESERVE | Win32 MEM_COMMIT, Win32 PAGE_READWRITE).

            ## This might fail due to a race condition, so we might need to try again.
            result ifNotNil: {
                return: result.
            }.
        }.

        nil
    }.

    method reserveAndCommitAddressSpace: (size: UIntPointer) ::=> Void pointer := {
        VirtualAlloc(nil, size, Win32 MEM_RESERVE | Win32 MEM_COMMIT, Win32 PAGE_READWRITE)
    }.

    method reserveAddressSpace: (size: UIntPointer) ::=> Void pointer := {
        VirtualAlloc(nil, size, Win32 MEM_RESERVE, Win32 PAGE_NOACCESS)
    }.

    method commitAddressSpace: (addressSpace: Void pointer) offset: (offset: UIntPointer) size: (size: UIntPointer) ::=> Boolean8 := {
        VirtualAlloc((addressSpace reinterpretCastTo: UInt8 pointer) + offset, size, Win32 MEM_COMMIT, Win32 PAGE_READWRITE) isNotNil
    }.

    method releaseAddressSpace: (addressSpace: Void pointer) offset: (offset: UIntPointer) size: (size: UIntPointer) ::=> Boolean8 := {
        VirtualFree((addressSpace reinterpretCastTo: UInt8 pointer) + offset, size, Win32 MEM_DECOMMIT) ~= 0
    }.

    method freeAddressSpace: (addressSpace: Void pointer) size: (size: UIntPointer) ::=> Boolean8 := {
        VirtualFree(addressSpace, 0, Win32 MEM_RELEASE) ~= 0
    }.
}.

}. ## End of namespace Std
