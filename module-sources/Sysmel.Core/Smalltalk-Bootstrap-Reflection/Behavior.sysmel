namespace Smalltalk definition: {

Behavior definition: {
	method isBehavior
		:= true.

	method initializeSlots: instance
		:= nil.

	method subclasses := #().

	method ensureIsAddedToSuperClass := self.

	method subclassesDo: aBlock
		:= __global Smalltalk Runtime withReflectionLockedRead: {self subclasses do: aBlock}.

	method allSubclassesDo: aBlock := {
		__global Smalltalk Runtime withReflectionLockedRead: {
			self subclassesDo: {:cls :: Void |
				aBlock value: cls.
				cls allSubclassesDo: aBlock
			}.
		}.
		self
	}.

	method withAllSubclassesDo: aBlock := {
		__global Smalltalk Runtime withReflectionLockedRead: {
			aBlock value: self.
			self allSubclassesDo: aBlock
		}
	}.

	method allSubclasses := {
		let result := OrderedCollection new.
		self allSubclassesDo: {:each :: Void |
			result add: each
		}.
		result
	}.

	method withAllSubclasses := {
		let result := OrderedCollection new.
		self withAllSubclassesDo: {:each :: Void |
			result add: each
		}.
		result
	}.

	method allSelectors := {
		let result := Set new.
		result addAll: self selectors.
		superclass ifNotNil: {
			result addAll: superclass allSelectors
		}.
		result
	}.

	method selectors := {
		let result := OrderedCollection new.
		methodDict keysDo: {:each :: Void |
			(each includes: '|') ifFalse: {
				result add: each
			}
		}.
		result
	}.

	method __manipulateInstance: instance gcSlotsWith: (manipulationBlock: ((ProtoObject pointer) => Void) nativeStackBlockClosure) ::=> Void := {
		<staticBinding>
		<nogc>
		instance __isImmediateValue ifTrue: {return: nil}.

		let fixedSlotCount := instanceDataSize / UIntPointer instanceSize.
		let fixedSlots := instance reinterpretCastTo: ProtoObject pointer.

		0 until: fixedSlotCount do: {:i :: Void |
			(gcLayout isSlotIndexGCPointer: i) ifTrue: {
				manipulationBlock(fixedSlots[i] address)
			}.
		}.

		gcLayout variableDataIsGCPointers ifTrue: {
			let variableDataSize := (instance reinterpretCastTo: Stdn Reflection GCObjectHeader pointer) _ __variableDataSize * variableInstanceElementSize.
			let variableSlotCount := variableDataSize / UIntPointer instanceSize.
			let variableSlots := fixedSlots[fixedSlotCount] address.
			0 until: variableSlotCount do: {:i :: Void |
				manipulationBlock(variableSlots[i] address)
			}
		}.
	}.

	method environment
		:= Smalltalk globals.

	method >> aSelector
		:= self compiledMethodAt: aSelector.

	method compiledMethodAt: aSelector := {
		__global Smalltalk Runtime withReflectionLockedRead: {
			methodDict at: aSelector
		}
	}.

	method allSlots
		:= #().
}.

}. ## End of namespace Smalltalk
