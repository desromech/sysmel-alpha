namespace Std definition: {
namespace Graphics definition: {
namespace FT2Bindings definition: {

useNamespace: Std Graphics Core.
useNamespace: FreeType2.

#**
 * I am a FreeType2 based font face.
 *#
class FT2FontFace superclass: FontFace; definition: {
    meta definition: {
        method loadFromFile: (path: CTypes ConstString) ::=> FT2FontFace rcRef := {
            let library ref := FT2Library defaultInstance.
            let handle mutable type: FT_Face.
            let error := FT_New_Face(library handle, path, 0, handle address).
            convertError(error) ifTrue: {
                return: FT2FontFace rcRef nil.
            }.

            FT2FontFace new
                ft2Library: library;
                handle: handle;
                yourself
        }
    }.

    public field ft2Library type: FT2Library rcRef.
    public field handle type: FT_Face.
    private field faceSizes type: Std Collections Dictionary(UInt32, FT2FontFaceWithSizeRef).

    override method finalize => Void := {
        faceSizes valuesDo: {:(FT2FontFaceWithSizeRef ref)each :: Void |
            each releaseHandle.
        }.

        handle ifNotNil: {
            FT_Done_Face(handle)
        }.
    }.

    override method getOrCreateFaceWithSize: (faceSize: UInt32) ::=> FontFaceWithSizeRef := {
        (faceSizes at: faceSize ifAbsentPut: { :: FT2FontFaceWithSizeRef |
            let sizeHandle mutable type: FT_Size.
            let error := FT_New_Size(handle, sizeHandle address).
            let result mutable := FT2FontFaceWithSizeRef nil.
            convertError(error) ifFalse: {
                FT_Activate_Size(sizeHandle).
                FT_Set_Char_Size(handle, 0, faceSize*64 castTo: Int32, 72, 72).

                let metrics ref := handle _ size _ metrics.

                result := FT2FontFaceWithSize new
                    handle: sizeHandle;
                    face: self address;

                    ascender: convert26d6(metrics ascender);
                    descender: convert26d6(metrics descender);
                    height: convert26d6(metrics height);
                    maxAdvance: Float32x2(convert26d6(metrics max_advance), 0.0f);
                    yourself.
            }.

            result
        }) upCastFor: FontFaceWithSize
    }.
}.

class FreeTypeFontFaceLoader superclass: FontFaceLoader; definition: {
    global Factory mutable type: FontFaceLoaderFactory(FreeTypeFontFaceLoader).

    override method loadFromFileNamed: (fileName: Std String const ref) ::=> FontFaceRef := {
        (FT2FontFace loadFromFile: fileName asCString) upCastFor: FontFace
    }.
}.

}. ## End of namespace Text
}. ## End of namespace Graphics
}. ## End of namespace Std
