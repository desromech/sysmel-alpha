namespace Stdn definition: {
namespace Math definition: {
namespace LinearAlgebra definition: {
namespace Tests definition: {

sealed template GenericMatrix3x3Test(ST: Type)
    := class superclass: Stdn Testing TestCase; definition: {
    compileTime constant GLA := GenericLinearAlgebra(ST).

    compileTime constant Scalar := GLA Scalar.
    compileTime constant Vector3 := GLA Vector3.
    compileTime constant Matrix3x3 := GLA Matrix3x3.

    test: testEquals with: {
        self assert: Matrix3x3 ones equals: Matrix3x3 ones.
        self assert: Matrix3x3 zeros closeTo: Matrix3x3 zeros.
        self assert: Matrix3x3 identity closeTo: Matrix3x3 identity.
    }.

    test: testNotEquals with: {
        self assert: Matrix3x3 ones notEquals: Matrix3x3 zeros.
        self assert: Matrix3x3 ones notEquals: Matrix3x3 identity.
        self assert: Matrix3x3 zeros notEquals: Matrix3x3 identity.
    }.

    test: testCloseTo with: {
        self assert: Matrix3x3 ones closeTo: Matrix3x3 ones.
        self assert: Matrix3x3 zeros closeTo: Matrix3x3 zeros.
        self assert: Matrix3x3 identity closeTo: Matrix3x3 identity.

        self assert: Matrix3x3 ones notCloseTo: Matrix3x3 zeros.
        self assert: Matrix3x3 ones notCloseTo: Matrix3x3 identity.
        self assert: Matrix3x3 zeros notCloseTo: Matrix3x3 identity.
    }.

    test: testHash with: {
        self assert: Matrix3x3 ones hash equals: Matrix3x3 ones hash.
        self assert: Matrix3x3 zeros hash equals: Matrix3x3 zeros hash.
        self assert: Matrix3x3 identity hash equals: Matrix3x3 identity hash.

        self assert: Matrix3x3 ones hash notEquals: Matrix3x3 zeros hash.
        self assert: Matrix3x3 ones hash notEquals: Matrix3x3 identity hash.
        self assert: Matrix3x3 zeros hash notEquals: Matrix3x3 identity hash.
    }.

    test: testZeros with: {
        self assert: Matrix3x3 zeros equals: Matrix3x3(
            0, 0, 0,
            0, 0, 0,
            0, 0, 0
        ).
    }.

    test: testOnes with: {
        self assert: Matrix3x3 ones equals: Matrix3x3(
            1, 1, 1,
            1, 1, 1,
            1, 1, 1
        ).
    }.

    test: testIdentity with: {
        self assert: Matrix3x3 identity equals: Matrix3x3(
            1, 0, 0,
            0, 1, 0,
            0, 0, 1
        ).
    }.

    test: testColumnMajorIndices with: {
        self assert: Matrix3x3 columnMajorIndices equals: (Matrix3x3 columns: (
            0, 1, 2,
            3, 4, 5,
            6, 7, 8
        )).

        self assert: Matrix3x3 columnMajorIndices equals: (Matrix3x3 rows: (
            0, 3, 6,
            1, 4, 7,
            2, 5, 8
        )).
    }.

    test: testRowMajorIndices with: {
        self assert: Matrix3x3 rowMajorIndices equals: (Matrix3x3 rows: (
            0, 1, 2,
            3, 4, 5,
            6, 7, 8
        )).
        self assert: Matrix3x3 rowMajorIndices equals: (Matrix3x3 columns: (
            0, 3, 6,
            1, 4, 7,
            2, 5, 8
        )).
    }.

    test: testTranspose with: {
        self assert: Matrix3x3 columnMajorIndices transpose transpose equals: Matrix3x3 columnMajorIndices.

        let a := Matrix3x3 columnMajorIndices.
        let b := Matrix3x3 rowMajorIndices.
        self assert: a transpose equals: b.
        self assert: b transpose equals: a.
        self assert: a transpose transpose equals: a.
        self assert: b transpose transpose equals: b.
    }.

}.

compileTime constant Int32x3x3Tests := GenericMatrix3x3Test(Int32).
compileTime constant Int64x3x3Tests := GenericMatrix3x3Test(Int64).
compileTime constant Float32x3x3Tests := GenericMatrix3x3Test(Float32).
compileTime constant Float64x3x3Tests := GenericMatrix3x3Test(Float64).

} ## End of namespace Tests
} ## End of namespace LinearAlgebra
} ## End of namespace Math
} ## End of namespace Stdn
