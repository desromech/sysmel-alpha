namespace Stdn definition: {
namespace Math definition: {
namespace LinearAlgebra definition: {
namespace Tests definition: {

sealed template GenericVector4Test(ST: Type)
    := class superclass: Stdn Testing TestCase; definition: {
    compileTime constant GLA := GenericLinearAlgebra(ST).

    compileTime constant Scalar := GLA Scalar.
    compileTime constant Vector4 := GLA Vector4.

    test: testEquals with: {
        let a := Vector4 x: 1 y: 2 z: 4 w: 5.
        let b := Vector4 x: 3 y: 4 z: 5 w: 6.
        let c := Vector4 x: 3 y: 4 z: 5 w: 6.

        self assert: b equals:  c.
        self deny: a = b.
        self deny: a = c.
    }.

    test: testNotEquals with: {
        let a := Vector4 x: 1 y: 2 z: 4 w: 5.
        let b := Vector4 x: 3 y: 4 z: 5 w: 6.
        let c := Vector4 x: 3 y: 4 z: 5 w: 6.

        self deny: (b ~=  c).
        self assert: a ~= b.
        self assert: a ~= c.
    }.

    test: testCloseTo with: {
        let a := Vector4 x: 1 y: 2 z: 4 w: 5.
        let b := Vector4 x: 3 y: 4 z: 5 w: 6.
        let c := Vector4 x: 3 y: 4 z: 5 w: 6.

        self assert: b closeTo: c.
        self deny: (a closeTo: b).
        self assert: a notCloseTo:  b.

        self deny: (a closeTo: c).
        self assert: a notCloseTo: c.
    }.

    test: testHash with: {
        let b := Vector4 x: 3 y: 4 z: 5 w: 6.
        let c := Vector4 x: 3 y: 4 z: 5 w: 6.
        self assert: b hash equals: c hash.
    }.
}.

compileTime constant Int32x4Tests := GenericVector4Test(Int32).
compileTime constant Int64x4Tests := GenericVector4Test(Int64).
compileTime constant Float32x4Tests := GenericVector4Test(Float32).
compileTime constant Float64x4Tests := GenericVector4Test(Float64).

} ## End of namespace Tests
} ## End of namespace LinearAlgebra
} ## End of namespace Math
} ## End of namespace Stdn
