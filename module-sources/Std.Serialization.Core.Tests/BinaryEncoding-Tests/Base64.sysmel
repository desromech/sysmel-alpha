namespace Std definition: {
namespace Serialization definition: {
namespace BinaryEncoding definition: {
namespace Tests definition: {

class Base64Test superclass: Std Testing TestCase; definition: {
    test: testEmpty with: {
        let binaryData mutable := Std ByteVector().
        let encodedString := encodeBase64String(binaryData).
        self assert: encodedString isEmpty.

        let decodedData := decodeBase64String(encodedString).
        self assert: decodedData equals: binaryData.
    }.

    test: testByteVector1 with: {
        let binaryData mutable := Std ByteVector()
            add: 0;
            yourself.
        let encodedString := encodeBase64String(binaryData).
        self assert: encodedString asArraySlice equals: "AA==".

        let decodedData := decodeBase64String(encodedString).
        self assert: decodedData equals: binaryData.
    }.

    test: testByteVector2 with: {
        let binaryData mutable := Std ByteVector()
            add: 0;
            add: 1;
            yourself.
        let encodedString := encodeBase64String(binaryData).
        self assert: encodedString asArraySlice equals: "AAE=".

        let decodedData := decodeBase64String(encodedString).
        self assert: decodedData equals: binaryData.
    }.

    test: testByteVector3 with: {
        let binaryData mutable := Std ByteVector()
            add: 0;
            add: 1;
            add: 2;
            yourself.
        let encodedString := encodeBase64String(binaryData).
        self assert: encodedString asArraySlice equals: "AAEC".

        let decodedData := decodeBase64String(encodedString).
        self assert: decodedData equals: binaryData.
    }.

    test: testByteVector4 with: {
        let binaryData mutable := Std ByteVector()
            add: 0;
            add: 1;
            add: 2;
            add: 3;
            yourself.
        let encodedString := encodeBase64String(binaryData).
        self assert: encodedString asArraySlice equals: "AAECAw==".

        let decodedData := decodeBase64String(encodedString).
        self assert: decodedData equals: binaryData.
    }.

    test: testByteVector5 with: {
        let binaryData mutable := Std ByteVector()
            add: 0;
            add: 1;
            add: 2;
            add: 3;
            add: 4;
            yourself.
        let encodedString := encodeBase64String(binaryData).
        self assert: encodedString asArraySlice equals: "AAECAwQ=".

        let decodedData := decodeBase64String(encodedString).
        self assert: decodedData equals: binaryData.
    }.

    test: testByteVector256 with: {
        let binaryData mutable := Std ByteVector().
        0 until: 256 do: {:i :: Void |
            binaryData add: (i castTo: UInt8).
        }.

        let encodedString := encodeBase64String(binaryData).
        self assert: encodedString asArraySlice equals: "AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==".

        let decodedData := decodeBase64String(encodedString).
        self assert: decodedData equals: binaryData.
    }.
}.

} ## End of namespace Tests
}. ## End of namespace BinaryEncoding
}. ## End of namespace Serialization
}. ## End of namespace Std
