namespace Stdn definition: {
namespace Graphics definition: {
namespace Driver definition: {
namespace SoftRenderer definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math Geometry.

struct SoftCommandListExecutionState definition: {

    public field renderPassExecutionContext type: SoftRenderPassExecutionContext.

    public field graphicsRootDescriptorTable type: (Void pointer array: 16).
    public field computeRootDescriptorTable type: (Void pointer array: 16).

    public field graphicsPipelineState type: SoftGraphicsPipeline pointer.
    public field vertexBinding type: SoftVertexBinding pointer.

    public field indexBuffer type: Void pointer.
    public field indexBufferStride type: UIntPointer.

    const method drawTriangleV1: (v1: GPU NativeVertexShaderIOInterface Outputs ref)
		v2: (v2: GPU NativeVertexShaderIOInterface Outputs ref)
		v3: (v3: GPU NativeVertexShaderIOInterface Outputs ref) ::=> Void := {

        graphicsPipelineState _ fragmentShader ifNil: {return: void}.

        graphicsPipelineState _ fillTriangleV1: v1 v2: v2 v3: v3
            graphicsRootDescriptorTable: graphicsRootDescriptorTable address
            renderPassExecutionContext: renderPassExecutionContext.
	}.

    method drawTriangleI1: (i1: UInt32) i2: (i2: UInt32) i3: (i3: UInt32) instanceID: (instanceID: UInt32) ::=> Void := {
        let v1 mutable type: GPU NativeVertexShaderIOInterface.
        let v2 mutable type: GPU NativeVertexShaderIOInterface.
        let v3 mutable type: GPU NativeVertexShaderIOInterface.

        v1 inputs
            vertexID: (i1 castTo: Int32);
            instanceID: (instanceID castTo: Int32).
        v2 inputs
            vertexID: (i2 castTo: Int32);
            instanceID: (instanceID castTo: Int32).
        v3 inputs
            vertexID: (i3 castTo: Int32);
            instanceID: (instanceID castTo: Int32).
        vertexBinding ifNotNil: {
            vertexBinding _
                fetchVertex: i1 instanceID: instanceID into: v1 inputs;
                fetchVertex: i2 instanceID: instanceID into: v2 inputs;
                fetchVertex: i3 instanceID: instanceID into: v3 inputs.
        }.

        self
            invokeVertexShaderOn: v1;
            invokeVertexShaderOn: v2;
            invokeVertexShaderOn: v3;
            drawTriangleV1: v1 outputs v2: v2 outputs v3: v3 outputs.
    }.

    method drawArrays: (vertexCount: UInt32) instanceCount: (instanceCount: UInt32) firstVertex: (firstVertex: UInt32) baseInstance: (baseInstance: UInt32) ::=> Void := {
        graphicsPipelineState ifNil: {return: void}.
        graphicsPipelineState _ vertexShader ifNil: {return: void}.

        Stdn stdout << "TODO: drawArrays"; nl.
    }.

    const inline method invokeVertexShaderOn: (vertex: GPU NativeVertexShaderIOInterface ref) ::=> Void := {
		graphicsPipelineState _ vertexShader(graphicsRootDescriptorTable address, vertex)
	}.

    method drawElements: (indexCount: UInt32) instanceCount: (instanceCount: UInt32) firstIndex: (firstIndex: UInt32) baseVertex: (baseVertex: UInt32) baseInstance: (baseInstance: UInt32) ::=> Void := {
        ## Stdn stdout << "drawElements: " << graphicsPipelineState << " " << vertexBinding << " " << indexCount << " " << instanceCount; nl.
        graphicsPipelineState ifNil: {return: void}.
        graphicsPipelineState _ vertexShader ifNil: {return: void}.
        vertexBinding ifNil: {return: void}.

        0 until: instanceCount do: {:instanceIndex :: Void |
            let instanceID := instanceIndex + baseInstance.

            indexBufferStride selectCase: #{
            1 : {
                let sourceIndices := indexBuffer reinterpretCastTo: UInt8 const pointer.
                self expandSourceIndicesPrimitives.
            }.
            2 : {
                let sourceIndices := indexBuffer reinterpretCastTo: UInt16 const pointer.
                self expandSourceIndicesPrimitives.
            }.
            4 : {
                let sourceIndices := indexBuffer reinterpretCastTo: UInt32 const pointer.
                self expandSourceIndicesPrimitives.
            }.
            _ : {}
            }
        }.
    }.

    macro method expandSourceIndicesPrimitives := `'{
        graphicsPipelineState _ description primitiveTopology selectCase: #{
        PrimitiveTopology Triangles : {
            let triangleCount := indexCount / 3.
            let sourceIndex mutable := firstIndex.
            0 until: triangleCount do: {:i :: Void |
                let i1 := sourceIndices[sourceIndex] + baseVertex castTo: UInt32.
                let i2 := sourceIndices[sourceIndex + 1] + baseVertex castTo: UInt32.
                let i3 := sourceIndices[sourceIndex + 2] + baseVertex castTo: UInt32.
                self drawTriangleI1: i1 i2: i2 i3: i3 instanceID: instanceID.
                sourceIndex := sourceIndex + 3
            }.
        }.
        _ : {}
        }.
    }.
}.

#**
 * I am a CPU only implementation for a graphics list.
 *#
class SoftCommandList superclass: CommandList; definition: {
    compileTime constant QueuedCommandFunction := Stdn Function(SoftCommandListExecutionState ref => Void).
    public field commandListType type: CommandListType.
    protected field commands type: Stdn Collections Vector(QueuedCommandFunction).

    override method asRenderingDeviceCommandList => CommandList pointer
        := self address.

    override method resetFor: (allocator: CommandListAllocatorPtr const ref) initialPipelineState: (initialPipeline: PipelineStatePtr const ref) ::=> Void := {
        commands removeAll
    }.

    override method close => Void := {

    }.

    method addCommand: (commandFunction: (SoftCommandListExecutionState ref => Void) nativeBlockClosure) ::=> Void := {
        commands add: QueuedCommandFunction(commandFunction)
    }.

    override method useShaderSignature: (shaderSignature: ShaderSignaturePtr const ref) ::=> Void := {
    }.

    override method setViewport: (rectangle: RectangleI32) ::=> Void := {

    }.

    override method setScissor: (rectangle: RectangleI32) ::=> Void := {

    }.

    override method usePipelineState: (pipelineState: PipelineStatePtr const ref) ::=> Void := {
        pipelineState ifNil: {return: void}.

        pipelineState _ isGraphicsPipelineState ifTrue: {
            let softGraphicsPipeline := pipelineState getPointer castTo: SoftGraphicsPipeline pointer.
            self addCommand: (function (state: SoftCommandListExecutionState ref) => Void := {
                state
                    graphicsPipelineState: softGraphicsPipeline.
            }).
        }.

        pipelineState _ isComputePipelineState ifTrue: {

        }.

    }.

    override method useVertexBinding: (vertexBinding: VertexBindingPtr const ref) ::=> Void := {
        let softVertexBinding := vertexBinding getPointer castTo: SoftVertexBinding pointer.
        softVertexBinding ifNil: {return: void}.

        self addCommand: (function (state: SoftCommandListExecutionState ref) => Void := {
            state vertexBinding: softVertexBinding.
        }).
    }.

    override method useIndexBuffer: (buffer: BufferPtr const ref) ::=> Void := {
        buffer ifNil: { return: void }.
        self useIndexBuffer: buffer at: 0 stride: buffer _ stride
    }.

    override method useIndexBuffer: (buffer: BufferPtr const ref) at: (offset: UIntPointer) stride: (stride: UIntPointer) ::=> Void := {
        let indexBuffer := buffer getPointer castTo: SoftBuffer pointer.
        indexBuffer ifNil: {return: void}.

        let indexBufferContent := indexBuffer _ memoryStartPointer + offset.
        self addCommand: (function (state: SoftCommandListExecutionState ref) => Void := {
            state
                indexBuffer: indexBufferContent;
                indexBufferStride: stride.
        }).
    }.

    override method useDrawIndirectBuffer: (buffer: BufferPtr const ref) ::=> Void := {

    }.

    override method useComputeDispatchIndirectBuffer: (buffer: BufferPtr const ref) ::=> Void := {

    }.

    override method useGraphicShaderBindings: (resourcesBinding: ShaderResourceBindingsPtr const ref) ::=> Void := {
        let softBindings := resourcesBinding getPointer castTo: SoftShaderResourceBindings pointer.
        softBindings ifNil: {return: void}.

        self addCommand: (function (state: SoftCommandListExecutionState ref) => Void := {
            state graphicsRootDescriptorTable[softBindings _ bankIndex] := softBindings _ bindingTable[0] address.
        }).
    }.

    override method useComputeShaderBindings: (resourcesBinding: ShaderResourceBindingsPtr const ref) ::=> Void := {
        let softBindings := resourcesBinding getPointer castTo: SoftShaderResourceBindings pointer.
        softBindings ifNil: {return: void}.

        self addCommand: (function (state: SoftCommandListExecutionState ref) => Void := {
            state computeRootDescriptorTable[softBindings _ bankIndex] := softBindings _ bindingTable[0] address.
        }).
    }.

    override method drawArrays: (vertexCount: UInt32) instanceCount: (instanceCount: UInt32) firstVertex: (firstVertex: UInt32) baseInstance: (baseInstance: UInt32) ::=> Void := {
        self addCommand: (function (state: SoftCommandListExecutionState ref) => Void := {
            state drawArrays: vertexCount instanceCount: instanceCount firstVertex: firstVertex baseInstance: baseInstance
        }).
    }.

    override method drawArraysIndirect: (offset: UIntPointer) drawCount: (drawCount: UIntPointer) ::=> Void := {

    }.

    override method drawElements: (indexCount: UInt32) instanceCount: (instanceCount: UInt32) firstIndex: (firstIndex: UInt32) baseVertex: (baseVertex: UInt32) baseInstance: (baseInstance: UInt32) ::=> Void := {
        self addCommand: (function (state: SoftCommandListExecutionState ref) => Void := {
            state drawElements: indexCount instanceCount: instanceCount firstIndex: firstIndex baseVertex: baseVertex baseInstance: baseInstance
        }).
    }.

    override method drawElementsIndirect: (offset: UIntPointer) drawCount: (drawCount: UIntPointer) ::=> Void := {

    }.

    override method dispatchCompute: (groupCount: UInt32x3) ::=> Void := {

    }.

    override method dispatchComputeIndirect: (offset: UInt32) ::=> Void := {

    }.

    override method setStencilReference: (reference: UInt32) ::=> Void := {

    }.

    override method executeBundle: (bundle: CommandList sharedPointer const ref) ::=> Void := {

    }.


    override method beginRenderPass: (renderPass: RenderPassPtr const ref) on: (framebuffer: FramebufferPtr const ref) contentOnBundle: (contentOnBundle: Boolean8) ::=> Void := {
        let softRenderPass := renderPass getPointer castTo: SoftRenderPass pointer.
        let softFramebuffer := framebuffer getPointer castTo: SoftFramebuffer pointer.
        softRenderPass isNil || softFramebuffer isNil ifTrue: {return: void}.

        self addCommand: (function (state: SoftCommandListExecutionState ref) => Void := {
            state renderPassExecutionContext := softRenderPass _ beginExecutionOn: softFramebuffer _
        }).

    }.

    override method endRenderPass ::=> Void := {
        self addCommand: (function (state: SoftCommandListExecutionState ref) => Void := {
            state renderPassExecutionContext endExecution.
        }).

    }.

    override method resolveFramebuffer: (source: FramebufferPtr const ref) into: (destination: FramebufferPtr const ref) ::=> Void := {

    }.

    override method resolveTexture: (source: TexturePtr const ref) level: (sourceLevel: UInt32) layer: (sourceLayer: UInt32)
        into: (destination: TexturePtr const ref) level: (destinationLevel: UInt32) layer: (destinationLayer: UInt32)
        levelCount: (levelCount: UInt32) layerCount: (layerCount: UInt32)
        aspect: (aspect: TextureAspect) ::=> Void := {

    }.

    override method pushConstants: (values: UInt8 const pointer) size: (size: UInt32) at: (offset: UInt32) ::=> Void := {

    }.

    override method memoryBarrierFrom: (sourceStage: PipelineStageMask) accesses: (sourceAccesses: AccessMask) to: (destStage: PipelineStageMask) accesses: (destAccesses: AccessMask) ::=> Void := {

    }.

    override method buffer: (buffer: BufferPtr const ref) offset: (offset: UIntPointer) size: (size: UIntPointer) memoryBarrierFrom: (sourceStage: PipelineStageMask) accesses: (sourceAccesses: AccessMask) to: (destStage: PipelineStageMask) accesses: (destAccesses: AccessMask) ::=> Void := {

    }.

    override method texture: (texture: TexturePtr const ref) subresourceRange: (subresourceRange: TextureSubResourceRange const ref) memoryBarrierFrom: (sourceStage: PipelineStageMask) accesses: (sourceAccesses: AccessMask) to: (destStage: PipelineStageMask) accesses: (destAccesses: AccessMask) ::=> Void := {

    }.

    override method pushBuffer: (buffer: BufferPtr const ref) transitionBarrierFrom: (oldUsageMode: BufferUsageMode) into: (newUsageMode: BufferUsageMode) ::=> Void := {

    }.

    override method pushTexture: (texture: TexturePtr const ref) subresourceRange: (subresourceRange: TextureSubResourceRange const ref) transitionBarrierFrom: (oldUsageMode: TextureUsageMode) into: (newUsageMode: TextureUsageMode) ::=> Void := {

    }.

    override method popBufferTransitionBarrier ::=> Void := {

    }.

    override method popTextureTransitionBarrier ::=> Void := {

    }.

    override method copyFromBuffer: (sourceBuffer: BufferPtr const ref) offset: (sourceOffset: UIntPointer) into: (destBuffer: BufferPtr const ref) offset: (destOffset: UIntPointer) size: (copySize: UIntPointer) ::=> Void := {

    }.

    override method copyFromBuffer: (sourceBuffer: BufferPtr const ref) intoTexture: (destTexture: TexturePtr const ref) region: (copyRegion: BufferImageCopyRegion const ref) ::=> Void := {

    }.

    override method copyFromTexture: (sourceTexture: TexturePtr const ref) intoBuffer: (destBuffer: BufferPtr const ref) region: (copyRegion: BufferImageCopyRegion const ref) ::=> Void := {

    }.

    override method copyFromTexture: (sourceTexture: TexturePtr const ref) intoTexture: (destTexture: TexturePtr const ref) region: (copyRegion: ImageCopyRegion const ref) ::=> Void := {

    }.

    method executeAllCommands => Void := {
        let executionState mutable type: SoftCommandListExecutionState.
        commands do: {:each :: Void|
            each(executionState)
        }
    }.
}.

}. ## End of namespace SoftRenderer
}. ## End of namespace Driver
}. ## End of namespace Graphics
}. ## End of namespace Stdn
