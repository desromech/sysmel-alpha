namespace Std definition: {
namespace Graphics definition: {
namespace Scene2D definition: {

useNamespace: Std Graphics Core.

class CanvasRenderer superclass: Visitor; definition: {
    public field canvas type: Canvas pointer.

    method render: (node: NodePtr const ref) ::=> Void := {
        node ifNotNil: {
            node _ accept: self
        }.
    }.

    override method visitBlendingModeNode: (node: BlendingModeNode const ref) ::=> Void := {
        canvas _ drawingState restoreAfter: {
            canvas _ drawingState blendingMode: node blendingMode.
            self render: node child
        }.
    }.

    override method visitBorderRectangleNode: (node: BorderRectangleNode const ref) ::=> Void := {
        ## TODO: Fix this to use the actual required colors.
        canvas _
            color: node bottomLeftColor;
            drawRectangle: node rectangle

    }.

    override method visitClippedRectangleNode: (node: ClippedRectangleNode const ref) ::=> Void := {
        canvas _ withLocalClipRectangle: node rectangle do: {
            self render: node child
        }.
    }.

    override method visitContainerNode: (node: ContainerNode const ref) ::=> Void := {
        node children do: {:each :: Void |
            self render: each
        }
    }.

    override method visitFilledRectangleNode: (node: FilledRectangleNode const ref) ::=> Void := {
        let rectangle := node rectangle.
        node hasSingleColor ifTrue: {
            canvas _
                color: node bottomLeftColor;
                fillRectangle: rectangle.
            return: void
        }.

        node hasVerticalGradient ifTrue: {
            canvas _
                fillRectangle: rectangle verticalGradientStart: node bottomLeftColor end: node topLeftColor.
            return: void
        }.

        node hasHorizontalGradient ifTrue: {
            canvas _
                fillRectangle: rectangle horizontalGradientStart: node bottomLeftColor end: node bottomRightColor.
            return: void
        }.

        let bottomLeftPosition := rectangle bottomLeft.
        let bottomRightPosition := rectangle bottomRight.
        let topLeftPosition := rectangle topLeft.
        let topRightPosition := rectangle topRight.
        canvas _
            color: Float32x4 ones;
            fillTriangle: bottomLeftPosition color: node bottomLeftColor p2: bottomRightPosition color: node bottomRightColor p3: topLeftPosition color: node topLeftColor;
            fillTriangle: bottomRightPosition color: node bottomRightColor p2: topRightPosition color: node topRightColor p3: topLeftPosition color: node topLeftColor.
    }.

    override method visitFilledTriangleNode: (node: FilledTriangleNode const ref) ::=> Void := {
        canvas _
            color: Float32x4 ones;
            fillTriangle: node p1 color: node c1 p2:node p2 color: node c2 p3: node p3 color: node c3.
    }.

    override method visitTransformNode: (node: TransformNode const ref) ::=> Void := {
        canvas _ transform restoreAfter: {
            canvas _ transform transformWith: node transform.
            self render: node child
        }.
    }.

    override method visitTextNode: (node: TextNode const ref) ::=> Void := {
        node string ifEmpty: {return: void}.

        canvas _
            fontFaceWithSize: node fontFaceWithSize;
            color: node  color;
            drawUTF8String: node string withState: node drawingState.
    }.

    override method visitTextureNode: (node: TextureNode const ref) ::=> Void := {
        node textureHandle isNil || node textureHandle _ isTextureWithView not ifTrue: {return: void}.

        canvas _ paintState restoreAfter: {
			canvas _ paintState
				white;
				texture: node textureHandle.
			canvas _ fillRectangle: node rectangle.
		}.
    }.
}.

} ## End of namespace Scene2D
} ## End of namespace Graphics
} ## End of namespace Std
