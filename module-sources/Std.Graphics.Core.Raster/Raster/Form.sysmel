namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

#**
 * I am a 2D bitmap which is located in the CPU.
 *#
class Form superclass: Std RCObject; definition: {
    public field extent type: UInt32x2.
    public field pixelFormat type: PixelFormat.
    public field pitch type: UInt32.
    public field pixels type: UInt8 uniquePointer.

    meta definition: {
        static method extent: (theExtent: UInt32x2) pixelFormat: (thePixelFormat: PixelFormat) ::=> Form rcRef := {
            Form new
                initializeWithExtent: theExtent pixelFormat: thePixelFormat;
                yourself
        }.

        static method extent: (theExtent: UInt32x2) pixelFormat: (thePixelFormat: PixelFormat) pitch: (thePitch: UInt32 )::=> Form rcRef := {
            Form new 
                initializeWithExtent: theExtent pixelFormat: thePixelFormat pitch: thePitch;
                yourself
        }.
    }.

    inline method width => UInt32
        := extent x.

    inline method height => UInt32
        := extent y.

    inline method initializeWithExtent: (theExtent: UInt32x2) pixelFormat: (thePixelFormat: PixelFormat) ::=> Void := {
        Std assert: thePixelFormat bytesPerPixel ~= 0.
        self initializeWithExtent: theExtent pixelFormat: thePixelFormat pitch: (thePixelFormat bytesPerPixel * theExtent x alignedTo: 4).
    }.

    inline method initializeWithExtent: (theExtent: UInt32x2) pixelFormat: (thePixelFormat: PixelFormat) pitch: (thePitch: UInt32) ::=> Void := {
        extent := theExtent.
        pixelFormat := thePixelFormat.
        pitch := thePitch.
        pixels := UInt8 uniquePointer for: (Std zmalloc(pitch * extent y) reinterpretCastTo: UInt8 pointer).
    }.

    inline method makeBlitter => Blitter
        := Blitter basicNewValue
            extent: extent;
            pixelFormat: pixelFormat;
            pitch: (pitch castTo: Int32);
            pixels: pixels getPointer;
            applyFullClippingBounds;
            initializeCachedState;
            yourself.

    inline method makeVerticallyFlippedBlitter => Blitter
        := Blitter basicNewValue
            extent: extent;
            pixelFormat: pixelFormat;
            pitch: (pitch castTo: Int32) negated;
            pixels: pixels getPointer + (pitch * (extent y - 1));
            applyFullClippingBounds;
            initializeCachedState;
            yourself.

    method asFormWithFormat: (newFormat: PixelFormat) ::=> FormRef := {
        let convertedForm := Form extent: extent pixelFormat: newFormat.
        convertedForm makeBlitter
            copyPixelsFrom: self makeBlitter into: Int32x2 zeros.
        convertedForm
    }.

    method asVerticallyFlippedFormWithFormat: (newFormat: PixelFormat) ::=> FormRef := {
        let convertedForm := Form extent: extent pixelFormat: newFormat.
        convertedForm makeVerticallyFlippedBlitter
            copyPixelsFrom: self makeBlitter into: Int32x2 zeros.
        convertedForm
    }.

    method asTextureData => TextureDataRef := {
        let result := TextureData new
            header: (TextureDataHeader()
                type: TextureType Texture2D;
                format: pixelFormat asLinearFormat;
                srgbFormat: pixelFormat asSRGBFormat;
                width: extent x;
                height: extent y;
                depth: 1;
                layers: 1;
                miplevels: 1;
                yourself);
            computeLinearPackedTextureLevelMetadata;
            yourself.

        result pixels reset: (Std zmalloc(result linearDataSize) reinterpretCastTo: UInt8 pointer).
        let firstLevel ref := result levelsData first.
        firstLevel pitch = pitch ifTrue: {
            let levelDataSize := pitch * extent y.
            Std assert: firstLevel dataSize >= levelDataSize.
            Std memcpy(result pixels getPointer, pixels getPointer, levelDataSize)
        } ifFalse: {
            let sourceRow mutable := pixels getPointer.
            let sourcePitch := pitch.
            let destRow mutable := result pixels getPointer.
            let destPitch := firstLevel pitch.
            0 until: extent y do: {:y :: Void |
                Std memcpy(destRow, sourceRow, destPitch).
                sourceRow := sourceRow + sourcePitch.
                destRow := destRow + destPitch.
            }
        }.

        result
    }.
}.

compileTime constant FormRef := Form rcRef.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
