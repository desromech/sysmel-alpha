namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Std Math Geometry.

class SoftSurface.

#**
 * I am a software based rendering CPU canvas that draws into SoftSurface.
 *#
class SoftCanvas superclass: Canvas; definition: {
    protected field targetSurface type: SoftSurface pointer.

    method initializeWithSurface: (theTargetSurface: SoftSurface pointer) ::=> Void := {
        targetSurface := theTargetSurface.
        self resetCanvasState.
    }.

    override method finalize => Void := {
        targetSurface ifNotNil: {
            targetSurface _ endDrawing
        }
    }.

    override method clear ::=> Void := {
        targetSurface _ pixelsBlitter setAllPixelsToColor: paintState simplePaint startColor
    }.

    override method fillTriangle: (p1: Float32x2) color: (c1: Float32x4) tc: (tc1: Float32x2)
        p2: (p2: Float32x2) color: (c2: Float32x4) tc: (tc2: Float32x2)
        p3: (p3: Float32x2) color: (c3: Float32x4) tc: (tc3: Float32x2) ::=> Void := {

        paintState simplePaint isFullyTransparent ifTrue: {
            return: void.
        }.

        let tp1 := transform transformPoint: p1.
        let tp2 := transform transformPoint: p2.
        let tp3 := transform transformPoint: p3.

        let mc1 := c1 * (paintState simplePaint evaluateAtPoint: tp1).
        let mc2 := c2 * (paintState simplePaint evaluateAtPoint: tp2).
        let mc3 := c3 * (paintState simplePaint evaluateAtPoint: tp3).

        targetSurface _ pixelsBlitter
            blendTriangle: tp1 p2: tp2 p3: tp3 pixelsWith: {:(Float32x2)p :(Float32x3)barycentricCoordinates :(Float32x4)originalDestPixelValue :: Float32x4 |
            let interpolatedColor := mc1*barycentricCoordinates x + mc2*barycentricCoordinates y + mc3*barycentricCoordinates z.
            interpolatedColor
        }
    }.

    inline method copyTexture: (textureBlitter: Blitter const ref) at: (targetPosition: Float32x2) ::=> Void := {
        textureBlitter pixels ifNil: {return: void}.

        targetSurface _ pixelsBlitter
            copyPixelsFrom: textureBlitter into: (targetPosition floor castTo: Int32x2)
    }.

    inline method blendTexture: (textureBlitter: Blitter const ref) at: (targetPosition: Float32x2) ::=> Void := {
        textureBlitter pixels ifNil: {return: void}.

        targetSurface _ pixelsBlitter
            compositeAlphaBlendPixelsFrom: textureBlitter withColor: paintState simplePaint startColor at: (targetPosition floor castTo: Int32x2)
    }.

    override method fillRectangle: (rectangle: RectangleF32) ::=> Void := {
        paintState simplePaint isFullyTransparent ifTrue: {
            return: void.
        }.

        transform isTranslationOnly ifTrue: {
            let transformedRectangle := rectangle translatedBy: transform translation.
            let convertedRectangle := RectangleI32 min: (transformedRectangle min floor castTo: Int32x2) max: (transformedRectangle max floor castTo: Int32x2).

            paintState texture ifNil: {
                targetSurface _ pixelsBlitter
                    blendRectangle: convertedRectangle pixelsWith: {:(UInt32x2)destPixelCoordinate :(Float32x4)originalDestPixelValue :: Float32x4 |
                    paintState simplePaint evaluateAtPoint: (destPixelCoordinate castTo: Float32x2)
                }.

                return: void
            }.

            let sourceBlitter := paintState texture softPixelsBlitter.
            sourceBlitter extent = (convertedRectangle extent castTo: UInt32x2) ifTrue: {
                drawingState blendingMode selectCase: #{
                BlendingMode Copy : {
                    self copyTexture: sourceBlitter at: transformedRectangle min.
                    return: void
                }.
                BlendingMode CompositeAlphaOver : {
                    self blendTexture: sourceBlitter at: transformedRectangle min.
                    return: void
                }.
                _ : {}
                }.

                return: void
            }.
        }.

        self
            fillTriangle: rectangle bottomLeft tc: Float32x2(0, 1) p2: rectangle bottomRight tc: Float32x2(1, 1) p3: rectangle topRight tc: Float32x2(1, 0);
            fillTriangle: rectangle topRight tc: Float32x2(1, 0) p2: rectangle topLeft tc: Float32x2(0, 0) p3: rectangle bottomLeft tc: Float32x2(0, 1)
    }.

    ## Draw the rectangle lines.
    override method drawSegmentStart: (startPoint: Float32x2) end: (endPoint: Float32x2) ::=> Void := {
        paintState simplePaint isFullyTransparent ifTrue: {
            return: void.
        }.

        let transformedStartPoint := transform transformPoint: startPoint.
        let transformedEndPoint := transform transformPoint: endPoint.
        targetSurface _ pixelsBlitter
            blendSegmentStart: (transformedStartPoint floor castTo: Int32x2) end: (transformedEndPoint floor castTo: Int32x2) pixelsWith: {:(UInt32x2)destPixelCoordinate :(Float32x4)originalDestPixelValue :: Float32x4 |
            paintState simplePaint evaluateAtPoint: (destPixelCoordinate castTo: Float32x2)
        }
    }.

    override method drawGlyph: (glyph: GlyphRef const ref) at: (aPosition: Float32x2) ::=> Void := {
        let form := glyph asForm.
        form ifNotNil: {
            let sourceBlitter := form makeBlitter.
            let drawPosition := transform transformPoint: aPosition + glyph drawOrigin.
            targetSurface _ pixelsBlitter
                compositeAlphaBlendPixelsFrom: sourceBlitter withColor: paintState simplePaint startColor
                at: (drawPosition floor castTo: Int32x2).
        }.
    }.

    override method doSetClipRectangle: (aRectangle: RectangleF32) ::=> Void := {
        let blitter ref := targetSurface _ pixelsBlitter.
        let convertedClipRectangle := (aRectangle intersectionWith: blitter bounds asRectangleF32) asRectangleI32.
        blitter applyClippingRectangle: convertedClipRectangle
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
