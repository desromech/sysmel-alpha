namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

#**
 * I am a registry for loaded fonts.
 *#
class FontRegistry definition: {
    private field fontDictionaryMutex type: Std Mutex.
    private field fontDictionary type: Std Collections Dictionary(Std String, FontRef).

    private field fontFaceDictionaryMutex type: Std Mutex.
    private field fontFaceDictionary type: Std Collections Dictionary(Std String, FontFaceRef).

    private field defaultSans type: FontRef.
    private field defaultSerif type: FontRef.
    private field defaultMonospaced type: FontRef.

    meta definition: {
        let defaultInstance mutable type: FontRegistry uniquePointer.
        let defaultInstanceOnceCreation mutable type: Std OnceFlag.

        method default => FontRegistry ref := {
            defaultInstanceOnceCreation do: {
                defaultInstance reset: FontRegistry nativeNew.
            }.

            defaultInstance _
        }.
    }.

    method loadFontNamed: (fontName: Std String const ref) with: (fontFillingBlock: ((FontRef const ref) => Void) nativeBlockClosure) ::=> FontRef := {
        fontDictionaryMutex withLock: {
            fontDictionary at: fontName ifAbsentPut: {:: (FontRef) |
                let font := Font new.
                fontFillingBlock(font).
                font
            }
        }
    }.

    method loadFontFace: (faceFileName: Std String const ref) ::=> FontFaceRef := {
        fontFaceDictionaryMutex withLock: {
            fontFaceDictionary at: faceFileName ifAbsentPut: {:: (FontFaceRef) |
                FontFaceLoaderRegistry uniqueInstance loadFontFaceFromFileNamed: faceFileName
            }
        }
    }.

    method loadRequiredFontFace: (faceFileName: Std String const ref) ::=> FontFaceRef := {
        fontFaceDictionaryMutex withLock: {
            fontFaceDictionary at: faceFileName ifAbsentPut: {:: (FontFaceRef) |
                FontFaceLoaderRegistry uniqueInstance loadRequiredFontFaceFromFileNamed: faceFileName
            }
        }
    }.

    method loadRequiredFontFace: (faceFileReference: Std FileReference const ref) ::=> FontFaceRef
        := self loadRequiredFontFace: faceFileReference fullName asMutableString.

    method setDefaultSansFont: (font: FontRef const ref) ::=> Void
        := defaultSans := font.

    method defaultSans => FontRef := {
        defaultSans ifNil: {
            defaultSans := self loadFontNamed: "DejaVuSans" asMutableString with: {:font :: Void |
                let dejaVuParentFolder := FileSystem resourcesDirectory / "fonts/dejavu/ttf".
                font
                    normalFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuSans.ttf");
                    boldFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuSans-Bold.ttf");
                    italicFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuSans-Oblique.ttf");
                    italicBoldFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuSans-BoldOblique.ttf").
            }
        }.

        defaultSans.
    }.

    method setDefaultSerifFont: (font: FontRef const ref) ::=> Void
        := defaultSerif := font.

    method defaultSerif => FontRef := {
        defaultSerif ifNil: {
            defaultSerif := self loadFontNamed: "DejaVuSerif" asMutableString with: {:font :: Void |
                let dejaVuParentFolder := FileSystem resourcesDirectory / "fonts/dejavu/ttf".
                font
                    normalFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuSerif.ttf");
                    boldFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuSerif-Bold.ttf");
                    italicFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuSerif-Oblique.ttf");
                    italicBoldFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuSerif-BoldOblique.ttf")
            }
        }.

        defaultSerif
    }.

    method setDefaultMonospaced: (font: FontRef const ref) ::=> Void
        := defaultMonospaced := font.

    method defaultMonospaced => FontRef := {
        defaultMonospaced ifNil: {
            defaultMonospaced := self loadFontNamed: "DejaVuMono" asMutableString with: {:font :: Void |
                let dejaVuParentFolder := FileSystem resourcesDirectory / "fonts/dejavu/ttf".
                font
                    normalFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuMono.ttf");
                    boldFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuMono-Bold.ttf");
                    italicFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuMono-Oblique.ttf");
                    italicBoldFace: (self loadRequiredFontFace: dejaVuParentFolder / "DejaVuMono-BoldOblique.ttf")
            }
        }.

        defaultMonospaced
    }.

}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
