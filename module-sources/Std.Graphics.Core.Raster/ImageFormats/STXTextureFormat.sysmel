namespace Std definition: {
namespace Graphics definition: {
namespace ImageFormats definition: {

useNamespace: Std Graphics Core.

class STXTextureFormat superclass: ImageReadWriter; definition: {
    override const method supportsExtension: (extension: Char8 const arraySlice) ::=> Boolean8
        := extension = "stx".

    const override method supportsMimeType: (mimeType: Char8 const arraySlice) ::=> Boolean8
        := mimeType = "image/vnd-sysmel.stx".

    override const method putTextureData: (textureData: TextureDataRef const ref) onStream: (outputStream: Std IO Stream ref) ::=> Void := {
        ## File header.
        {
            let textureFileHeader mutable := TextureFileHeader()
                setValid;
                yourself.
            outputStream write: textureFileHeader address size: TextureFileHeader instanceSize.
        }.

        ## Texture data header.
        outputStream write: textureData header address size: TextureDataHeader instanceSize.

        ## Write the different levels.
        Std assert: textureData levelsData size = textureData miplevels * textureData layers.
        let levelDataSize := textureData levelsData size * TextureLevelData instanceSize.
        outputStream write: textureData levelsData data size: levelDataSize.

        ## Write the texture pixel data.
        outputStream write: textureData pixels getPointer size: textureData linearDataSize.
    }.

    override const method readTextureDataFromStream: (inputStream: Std IO Stream ref) ::=> TextureDataRef := {
        ## Check the file header.
        {
            let fileHeader mutable type: TextureFileHeader.
            (inputStream read: fileHeader address size: TextureFileHeader instanceSize) = TextureFileHeader instanceSize && fileHeader isValid ifFalse: {
                return: TextureDataRef nil
            }
        }.

        ## Create the texture data result.
        let result := TextureData new.

        ## Read the texture data header.
        (inputStream read: result header address size: TextureDataHeader instanceSize) = TextureDataHeader instanceSize ifFalse: {
            return: TextureDataRef nil
        }.

        ## Read the levels data.
        result levelsData resizeTo: result layers * result miplevels.
        let levelDataSize := result levelsData size * TextureLevelData instanceSize.
        (inputStream read: result levelsData data size: levelDataSize) = (levelDataSize castTo: IntPointer) ifFalse: {
            return: TextureDataRef nil
        }.

        ## Read the pixel data.
        result pixels reset: (Std malloc(result linearDataSize) reinterpretCastTo: UInt8 pointer).
        (inputStream read: result pixels getPointer size: result linearDataSize) = result linearDataSize ifFalse: {
            return: TextureDataRef nil
        }.

        result
    }.
}.

global STXTextureFormatRegistration mutable type: ImageReadWriterRegisterer(STXTextureFormat).

Form extend: {
    method writeSTXfileNamed: (fileName: Std String const ref) ::=> Boolean8 := {
        let readWriter := STXTextureFormat().
        readWriter putForm: self asRCRef onFileNamed: fileName.
    }.
}.

} ## End of namespace ImageFormats
} ## End of namespace Graphics
} ## End of namespace Std
