namespace Std definition: {
namespace Graphics definition: {
namespace ImageFormats definition: {

useNamespace: Std Graphics Core.

class ImageReadWriterRegistry definition: {
    meta definition: {
        let singleton mutable type: ImageReadWriterRegistry uniquePointer.
        let singletonOnceCreation mutable type: Std OnceFlag.

        method uniqueInstance => ImageReadWriterRegistry ref := {
            singletonOnceCreation do: {
                singleton reset: ImageReadWriterRegistry nativeNew.
            }.

            singleton _
        }.
    }.

    private field mutex type: Std Mutex.
    private field registeredImageReadWriters type: Std Collections Vector(ImageReadWriter rcRef).

    method addImageReadWriter: (imageReadWriter: ImageReadWriter rcRef) ::=> Void := {
        mutex withLock: {
            registeredImageReadWriters add: imageReadWriter
        }
    }.

    method findForFileName: (fileName: Std String const ref) ::=> ImageReadWriter rcRef
        := self findForFileReference: fileName asNativeFileReference.

    method findForFileReference: (fileReference: Std FileReference const ref) ::=> ImageReadWriter rcRef
        := self findWithExtension: fileReference extension.

    method findWithExtension: (extension: Char8 const arraySlice) ::=> ImageReadWriter rcRef := {
        mutex withLock: {
            registeredImageReadWriters do: {:each :: Void |
                (each supportsExtension: extension) ifTrue: {
                    return: each
                }
            }
        }.

        ImageReadWriter rcRef nil
    }.

    method findWithMimeType: (mimeType: Char8 const arraySlice) ::=> ImageReadWriter rcRef := {
        mutex withLock: {
            registeredImageReadWriters do: {:each :: Void |
                (each supportsMimeType: mimeType) ifTrue: {
                    return: each
                }
            }
        }.

        ImageReadWriter rcRef nil
    }.

}.

template ImageReadWriterRegisterer(T: Type)
    := class definition: {

    method initialize => Void := {
        ImageReadWriterRegistry uniqueInstance addImageReadWriter: (T new upCastFor: ImageReadWriter)
    }.
}.


Form extend: {
    meta method readFromFileNamed: (fileName: Std String const ref) ::=> FormRef := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findForFileName: fileName.
        readWriter ifNil: {return: FormRef nil}.

        readWriter readFormFromFileNamed: fileName.
    }.

    meta method readFromStream: (stream: Std IO Stream ref) withExtension: (extension: Char8 const arraySlice) ::=> FormRef := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findWithExtension: extension.
        readWriter ifNil: {return: FormRef nil}.

        readWriter readFormFromStream: stream.
    }.

    meta method readFromStream: (stream: Std IO Stream ref) withMimeType: (mimeType: Char8 const arraySlice) ::=> FormRef := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findWithMimeType: mimeType.
        readWriter ifNil: {return: FormRef nil}.

        readWriter readFormFromStream: stream.
    }.

    method writeToFileNamed: (fileName: Std String const ref) ::=> Boolean8 := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findForFileName: fileName.
        readWriter ifNil: {return: false}.

        readWriter putForm: self asRCRef onFileNamed: fileName.
    }.
}.

TextureData extend: {
    meta method readFromFileNamed: (fileName: Std String const ref) ::=> TextureDataRef
        := self readFromFileReference: fileName asNativeFileReference.

    meta method readFromFileReference: (fileReference: Std FileReference const ref) ::=> TextureDataRef := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findForFileReference: fileReference.
        readWriter ifNil: {return: TextureDataRef nil}.

        readWriter readTextureDataFromFileReference: fileReference.
    }.

    meta method readFromStream: (stream: Std IO Stream ref) withExtension: (extension: Char8 const arraySlice) ::=> TextureDataRef := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findWithExtension: extension.
        readWriter ifNil: {return: TextureDataRef nil}.

        readWriter readTextureDataFromStream: stream.
    }.

    meta method readFromStream: (stream: Std IO Stream ref) withMimeType: (mimeType: Char8 const arraySlice) ::=> TextureDataRef := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findWithMimeType: mimeType.
        readWriter ifNil: {return: TextureDataRef nil}.

        readWriter readTextureDataFromStream: stream.
    }.

    method writeToFileNamed: (fileName: Std String const ref) ::=> Boolean8
        := self writeToFileReference: fileName asNativeFileReference.

    method writeToFileReference: (fileReference: Std FileReference const ref) ::=> Boolean8 := {
        let readWriter := ImageReadWriterRegistry uniqueInstance findForFileReference: fileReference.
        readWriter ifNil: {return: false}.

        readWriter putTextureData: self asRCRef onFileReference: fileReference.
    }.
}.

} ## End of namespace ImageFormats
} ## End of namespace Graphics
} ## End of namespace Std
