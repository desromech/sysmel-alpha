namespace Sysmel definition: {
namespace Compiler definition: {
namespace Parsing definition: {

class SourceCode superclass: Std RCObject; definition: {
    compileTime constant ValueType := Char8.
    compileTime constant PeekType := Int32.

    field content type: Std String.
    field lineStartTable type: Std Collections Vector(UIntPointer).
    public field name type: Std String.
    public field uri type: Std String.

    const method content => Std String const ref
        := content.

    method content: (value: Std String const ref) ::=> Void := {
        content := value.
        self buildLineStartTable.
    }.

    method buildLineStartTable => Void := {
        let currentPosition mutable type: UIntPointer := 0.
        lineStartTable add: currentPosition.

        while: currentPosition < content size do: {
            let c := content[currentPosition].
            currentPosition := currentPosition + 1.

            c selectCase: #{
            '\r' : {
                (currentPosition < content size && content[currentPosition] = '\n') ifTrue: {
                    currentPosition := currentPosition + 1
                }.

                lineStartTable add: currentPosition
            }.
            '\n' : {
                lineStartTable add: currentPosition
            }.
            _ : {}.
            }.
        }.
    }.

    macro method size := ``(`,self content size).
    macro method data := ``(`,self content data).
    macro method[index] := ``(`,self content[`,index]).

    const inline method eofValue => PeekType
        := -1.

    const method textFrom: (startPosition: UIntPointer) until: (endPosition: UIntPointer) ::=> Std ImmutableString := {
        content isEmpty ifTrue: {
            return: ""
        }.

        content data from: startPosition until: endPosition
    }.

    const method sourcePositionIntoLine: (sourcePosition: UIntPointer) ::=> UIntPointer := {
        let bestLineSoFar mutable type: UIntPointer := 0.
        let endRange mutable := lineStartTable size.

        while: bestLineSoFar + 1 < endRange do: {
            let m := bestLineSoFar + (endRange - bestLineSoFar) / 2.
            lineStartTable[m] <= sourcePosition ifTrue: {
                bestLineSoFar := m
            } ifFalse: {
                endRange := m
            }
        }.

        bestLineSoFar + 1
    }.

    const method sourcePositionIntoLineAndColumn: (sourcePosition: UIntPointer) ::=> UInt32x2 := {
        let lineNumber := self sourcePositionIntoLine: sourcePosition.
        let lineStartIndex := lineStartTable[lineNumber - 1].

        let column mutable type: UInt32 := 0.
        lineStartIndex until: sourcePosition do: {:i :: Void |
            column := column + 1.
            content[i] = '\t' ifTrue: {
                column := column alignedTo: 4u
            }.
        }.

        UInt32x2(lineNumber castTo: UInt32, column + 1u)
    }.

    const method printRangeFrom: (startPosition: UIntPointer) until: (endPosition: UIntPointer) on: (out: Std IO TextStreamWriter ref) ::=> Void := {
        let lineAndColumn := self sourcePositionIntoLineAndColumn: startPosition.

        out << name << ':' << lineAndColumn x << ":" << lineAndColumn y
    }.
}.

compileTime constant SourceCodeRef := SourceCode rcRef.
compileTime constant SourceCodeRange := SourceCollectionRange(SourceCode).

}. ## End of namespace Compiler
}. ## End of namespace Compiler
}. ## End of namespace Sysmel
