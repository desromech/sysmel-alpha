namespace Smalltalk definition: {

gcclass WeakIdentitySet superclass: WeakSet; definition: {
    ##FIXME: Implement this properly.
    method scanFor: key ::=> UIntPointer := {
        ## Make sure we at least have a size.
        let keyCount := self capacity.
        keyCount = 0 ifTrue: {
            self errorNoFreeSpace
        }.

        ## Find the natural key slot.
        let keySlot := (key identityHash castTo: UIntPointer) % keyCount.

        ## Perform linear probing.
        let i mutable := keySlot.
        while: i < keyCount do: {
            let slotKey := array __private __data[i].
            slotKey == nil || slotKey == key ifTrue: {
                return: (i + 1 castTo: UIntPointer)
            }.
        } continueWith: { i := i + 1 }.

        i := 0.
        while: i < keySlot do: {
            let slotKey := array __private __data[i].
            slotKey == nil || slotKey == key ifTrue: {
                return: (i + 1 castTo: UIntPointer)
            }.
        } continueWith: { i := i + 1 }.

        self errorNoFreeSpace.
        return: 0
    }.
}.

}. ## End of namespace Smalltalk
