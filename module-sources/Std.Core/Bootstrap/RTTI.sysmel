namespace Std definition: {
namespace Reflection definition: {

class ProgramEntity superclass: RCObject.
class ModuleInformation superclass: ProgramEntity.
class SharedProgramEntity superclass: ProgramEntity.
class ModuleDefinedProgramEntity superclass: ProgramEntity.

class TypeInformation superclass: ModuleDefinedProgramEntity.
class NamespaceInformation superclass: SharedProgramEntity.
class ModuleNamespaceInformation superclass: ModuleDefinedProgramEntity.

class FunctionalObjectInformation superclass: ModuleDefinedProgramEntity.
class FunctionInformation superclass: FunctionalObjectInformation.
class MessageMethodInformation superclass: FunctionalObjectInformation.
class MacroMessageMethodInformation superclass: FunctionalObjectInformation.

## I am an instance of a program entity reflection data.
ProgramEntity definition: {
    public field name type: Char8 const arraySlice.
    public field parent type: ProgramEntity pointer.

    virtual method isModuleInformation => Boolean8 := false.
    virtual method isFunctionalObjectInformation => Boolean8 := false.
    virtual method isFunctionInformation => Boolean8 := false.
    virtual method isMessageMethodInformation => Boolean8 := false.
    virtual method isMacroMessageMethodInformation => Boolean8 := false.
}.

ModuleDefinedProgramEntity definition: {
    public field module type: ModuleInformation pointer.
    public field staticlyDefinedChildren type: ProgramEntity pointer arraySlice. ## For now suppress the generation of these children.

    override method isModuleInformation => Boolean8 := true.
}.

## I am an instance of basic type information. I provide the bare minimun that is
## required for moving/copying any native object from one location to another by
## erasing its type. I am used for implementing the throwing of native exceptions.
TypeInformation definition: {
    public field superclass type: TypeInformation pointer.
    public field instanceDataSize type: UIntPointer.
    public field instanceDataAlignment type: UIntPointer.

    public field basicInitializationFunctionPointer type: BasicInitializeFunctionPointerType.
    public field copyConstructorFunctionPointer type: CopyConstructorFunctionPointerType.
    public field moveConstructorFunctionPointer type: MoveConstructorFunctionPointerType.
    public field finalizeFunctionPointer type: FinalizeFunctionPointerType.

    const inline method instanceSize => UIntPointer
        := instanceDataSize.
    const inline method instanceAlignment => UIntPointer
        := instanceDataAlignment.
    const method isPointerReinterpretableTo: (other: TypeInformation const pointer) ::=> Boolean8 := {
        ## Am I the other type information?
        self address == other ifTrue: {
            return: true.
        }.

        ## Check in my base class.
        superclass ifNotNil: {
            return: (superclass _ isPointerReinterpretableTo: other)
        }.

        false
    }.
}.

Object extend: {
    const inline method __typeInformation => Std Reflection TypeInformation pointer
        := Reflection typeInformationFromPointerToVTable(self address).
}.

NamespaceInformation definition: {
}.

ModuleNamespaceInformation definition: {
    public field sharedNamespace type: NamespaceInformation pointer.
}.

ModuleInformation definition: {
    public field globalNamespace type: ModuleNamespaceInformation pointer.
}.

function typeInformationFromPointerToVTable(vtablePointer: Void const pointer) => TypeInformation pointer
    := (vtablePointer reinterpretCastTo: TypeInformation pointer const pointer const pointer)
        _ [-1].

FunctionalObjectInformation definition: {
    public field entryPoint type: Void pointer.
    public field type type: TypeInformation pointer.

    override method isFunctionalObjectInformation => Boolean8 := true.
}.

FunctionInformation definition: {
    override method isFunctionInformation => Boolean8 := true.
}.

MessageMethodInformation definition: {
    override method isMessageMethodInformation => Boolean8 := true.
}.

MacroMessageMethodInformation definition: {
    override method isMacroMessageMethodInformation => Boolean8 := true.
}.

_BehaviorType extend: {
    macro method asTypeInformation := ``(`,self reinterpretCastTo: Std Reflection TypeInformation const pointer).
}.

Compiler compilationTarget
    typeInformationClass: TypeInformation;
    moduleNamespaceInformationClass: ModuleNamespaceInformation;
    moduleInformationClass: ModuleInformation;
    functionInformationClass: FunctionInformation;
    macroMessageMethodInformationClass: MacroMessageMethodInformation;
    messageMethodInformationClass: MessageMethodInformation.

}. ## End of namespace Reflection
}. ## End of namespace Std
