namespace Std definition: {
namespace Reflection definition: {

class ProgramEntityMetadata superclass: Object.
class ModuleInformationMetadata superclass: ProgramEntityMetadata.
class SharedProgramEntityMetadata superclass: ProgramEntityMetadata.
class ModuleDefinedProgramEntityMetadata superclass: ProgramEntityMetadata.

class TypeInformationMetadata superclass: ModuleDefinedProgramEntityMetadata.
class NamespaceInformationMetadata superclass: SharedProgramEntityMetadata.
class ModuleNamespaceInformationMetadata superclass: ModuleDefinedProgramEntityMetadata.

class FunctionalObjectInformationMetadata superclass: ModuleDefinedProgramEntityMetadata.
class FunctionInformationMetadata superclass: FunctionalObjectInformationMetadata.
class MessageMethodInformationMetadata superclass: FunctionalObjectInformationMetadata.
class MacroMessageMethodInformationMetadata superclass: FunctionalObjectInformationMetadata.

## I am an instance of a program entity reflection data.
ProgramEntityMetadata definition: {
    public field name type: Char8 const arraySlice.
    public field parent type: ProgramEntityMetadata pointer.

    virtual method isModuleInformationMetadata => Boolean8 := false.
    virtual method isFunctionalObjectInformationMetadata => Boolean8 := false.
    virtual method isFunctionInformationMetadata => Boolean8 := false.
    virtual method isMessageMethodInformationMetadata => Boolean8 := false.
    virtual method isMacroMessageMethodInformationMetadata => Boolean8 := false.
}.

ModuleDefinedProgramEntityMetadata definition: {
    public field module type: ModuleInformationMetadata pointer.
    public field staticlyDefinedChildren type: ProgramEntityMetadata pointer arraySlice. ## For now suppress the generation of these children.

    override method isModuleInformationMetadata => Boolean8 := true.
}.

## I am an instance of basic type information. I provide the bare minimun that is
## required for moving/copying any native object from one location to another by
## erasing its type. I am used for implementing the throwing of native exceptions.
TypeInformationMetadata definition: {
    public field superclass type: TypeInformationMetadata pointer.
    public field instanceDataSize type: UIntPointer.
    public field instanceDataAlignment type: UIntPointer.

    public field basicInitializationFunctionPointer type: BasicInitializeFunctionPointerType.
    public field copyConstructorFunctionPointer type: CopyConstructorFunctionPointerType.
    public field moveConstructorFunctionPointer type: MoveConstructorFunctionPointerType.
    public field finalizeFunctionPointer type: FinalizeFunctionPointerType.

    const inline method instanceSize => UIntPointer
        := instanceDataSize.
    const inline method instanceAlignment => UIntPointer
        := instanceDataAlignment.
    const method isPointerReinterpretableTo: (other: TypeInformationMetadata const pointer) ::=> Boolean8 := {
        ## Am I the other type information?
        self address == other ifTrue: {
            return: true.
        }.

        ## Check in my base class.
        superclass ifNotNil: {
            return: (superclass _ isPointerReinterpretableTo: other)
        }.

        false
    }.
}.

Object extend: {
    const inline method __typeInformationMetadata => Std Reflection TypeInformationMetadata pointer
        := Reflection typeInformationMetadataFromPointerToVTable(self address).
}.

NamespaceInformationMetadata definition: {
}.

ModuleNamespaceInformationMetadata definition: {
    public field sharedNamespace type: NamespaceInformationMetadata pointer.
}.

ModuleInformationMetadata definition: {
    public field globalNamespace type: ModuleNamespaceInformationMetadata pointer.
}.

function typeInformationMetadataFromPointerToVTable(vtablePointer: Void const pointer) => TypeInformationMetadata pointer
    := (vtablePointer reinterpretCastTo: TypeInformationMetadata pointer const pointer const pointer)
        _ [-1].

FunctionalObjectInformationMetadata definition: {
    public field entryPoint type: Void pointer.
    public field type type: TypeInformationMetadata pointer.

    override method isFunctionalObjectInformationMetadata => Boolean8 := true.
}.

FunctionInformationMetadata definition: {
    override method isFunctionInformationMetadata => Boolean8 := true.
}.

MessageMethodInformationMetadata definition: {
    override method isMessageMethodInformationMetadata => Boolean8 := true.
}.

MacroMessageMethodInformationMetadata definition: {
    override method isMacroMessageMethodInformationMetadata => Boolean8 := true.
}.

_BehaviorType extend: {
    macro method asTypeInformationMetadata := ``(`,self reinterpretCastTo: Std Reflection TypeInformationMetadata const pointer).
}.

Compiler compilationTarget
    typeInformationClass: TypeInformationMetadata;
    moduleNamespaceInformationClass: ModuleNamespaceInformationMetadata;
    moduleInformationClass: ModuleInformationMetadata;
    functionInformationClass: FunctionInformationMetadata;
    macroMessageMethodInformationClass: MacroMessageMethodInformationMetadata;
    messageMethodInformationClass: MessageMethodInformationMetadata.

}. ## End of namespace Reflection
}. ## End of namespace Std
