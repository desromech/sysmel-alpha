namespace Std definition: {
namespace Reflection definition: {

compileTime constant BasicInitializeFunctionPointerType := ((Void pointer) => Void) pointer.
compileTime constant CopyConstructorFunctionPointerType := ((Void pointer -- Void const pointer) => Void) pointer.
compileTime constant MoveConstructorFunctionPointerType := ((Void pointer -- Void pointer) => Void) pointer.
compileTime constant FinalizeFunctionPointerType := ((Void pointer) => Void) pointer.

}. ## End of namespace Reflection

## I am a native object that supports the basic construction and finalization
## methods, and I provide a convenient method for retrieving my type information.
class Object definition: {
    virtual method initialize ::=> Void := {
    }.

    virtual method finalize ::=> Void := {
    }.
}.

}. ## End of namespace Std
