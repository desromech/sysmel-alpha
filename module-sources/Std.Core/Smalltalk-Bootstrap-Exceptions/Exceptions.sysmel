namespace Smalltalk definition: {

gcclass Exception definition: {
    protected field messageText.

    meta definition: {
        method signal
            := self new signal.

        method signal: signalerMessage
            := self new signal: signalerMessage.
    }.

    method signal: signalerMessage := {
        messageText := signalerMessage.
        self signal.
    }.

    method messageText := {
        messageText ifNil: {return: ""}.
        messageText
    }.

    method description := {
        String streamContents: {:out :: Void |
            out << self class name.
            let messageText := self messageText.
            messageText isEmptyOrNil ifFalse: {
                out << ": " << messageText
            }
        }.
    }.

    method printOn: aStream := {
        aStream nextPutAll: self description
    }.

    method defaultAction
        := self subclassResponsibility.
}.

gcclass Abort superclass: Exception; definition: {
    method defaultAction
        := UnhandledError signalForException: self.
}.

gcclass Error superclass: Exception; definition: {
    method defaultAction
        := UnhandledError signalForException: self.
}.

gcclass ModificationForbidden superclass: Error; definition: {
    field object.
    field fieldIndex.
    field newValue.
    field retrySelector.
}.

gcclass ArithmeticError superclass: Error; definition: {}.
gcclass DomainError superclass: ArithmeticError; definition: {
    public field from.
    public field to.
}.
gcclass FloatingPointException superclass: ArithmeticError; definition: {}.
gcclass NaNException superclass: ArithmeticError; definition: {}.
gcclass ZeroDivide superclass: ArithmeticError; definition: {
	public field dividend.

	meta definition: {
		method dividend: theDividend
			:= self new dividend: theDividend; yourself
	}.
}.

gcclass AssertionFailure superclass: Error; definition: {}.
gcclass CannotReturn superclass: Error; definition: {}.
gcclass BlockCannotReturn superclass: CannotReturn; definition: {}.
gcclass ContextCannotReturn superclass: CannotReturn; definition: {}.

gcclass MessageNotUnderstood superclass: Error; definition: {
    public field message.
    public field receiver.

    method messageText := {
        messageText ifNil: {
            message ifNotNil: {
                message lookupClass == UndefinedObject ifTrue: {
                    return: "receiver of #'" -- message selector asString -- "' is nil"
                } ifFalse:{
                    return: message lookupClass printString -- ">>" -- message selector asString
                }.
            }.
        }.

        super messageText
    }.
}.

gcclass CannotPerformCastError superclass: Error; definition: {}.

gcclass SelectorException superclass: Error; definition: {}.
gcclass OutOfMemory superclass: SelectorException; definition: {}.
gcclass NotYetImplemented superclass: SelectorException; definition: {}.
gcclass PrimitiveFailed superclass: SelectorException; definition: {}.
gcclass ShouldBeImplemented superclass: SelectorException; definition: {}.
gcclass ShouldNotImplement superclass: SelectorException; definition: {}.
gcclass SubclassResponsibility superclass: SelectorException; definition: {}.

gcclass SubscriptOutOfBounds superclass: Error; definition: {
    public field subscript.
    public field lowerBound.
    public field upperBound.

    meta definition: {
        method signalFor: index
            := self new
                subscript: index;
                lowerBound: nil;
                upperBound: nil;
                signal
    }
}.

gcclass UnhandledException superclass: Exception; definition: {
}.

gcclass Halt superclass: UnhandledException; definition: {
}.

gcclass UnhandledError superclass: UnhandledException; definition: {
    meta definition: {
        method signalForException: exception
            := self new
                exception: exception;
                signal
    }.

    public field exception.

    method defaultAction := {
        Std stderr << "Unhandled error:"; nl.
        exception printOnNativeTextStreamWriter: Std stderr. Std stderr nl.
        Std stderr << "Aborting the program execution."; nl.
        Std native_abort().
        self
    }.
}.

gcclass Notification superclass: Exception; definition: {
    method defaultAction
        := nil.
}.

gcclass SystemNotification superclass: Notification; definition: {}.
gcclass DeprecationPerformedNotification superclass: SystemNotification; definition: {}.
gcclass NewUndeclaredWarning superclass: SystemNotification; definition: {}.
gcclass TimedOut superclass: Notification; definition: {}.
gcclass Warning superclass: Notification; definition: {}.
gcclass Deprecation superclass: Warning; definition: {}.
gcclass SimulationExceptionWrapper superclass: Exception; definition: {}.

gcclass CollectionIsEmpty superclass: Error; definition: {
    public field object.
    public field collection.

    meta definition: {
        method signalWith: aCollection
            := self new collection: aCollection; signal.
    }.
}.

gcclass NotFound superclass: Error; definition: {
    public field object.
    public field collection.

    meta definition: {
        method signalFor: anObject
            := self new object: anObject; signal.

        method signalFor: anObject in: aCollection
            := self new object: anObject; collection: aCollection; signal.
    }.
}.

gcclass SizeMismatch superclass: Error; definition: {
}.

gcclass KeyNotFound superclass: NotFound; definition: {

}.

gcclass ValueNotFound superclass: NotFound; definition: {

}.

}.
