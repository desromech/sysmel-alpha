namespace Std definition: {

compileTime constant DirectoryIterationBlock := ((FileReference const ref) => Void) nativeStackBlockClosure.

sealed class FileReference definition: {
    compileTime constant ChildrenType := Std Collections Vector(FileReference).
    compileTime constant PathSeparator := '/'.

    field fileSystem type: FileSystemPtr.
    field path type: Std String.

    method setFileSystem: (theFileSystem: FileSystemPtr const ref) path: (thePath: Std String const ref) ::=> Void := {
        fileSystem := theFileSystem.
        path := thePath.
    }.

    method setFileSystem: (theFileSystem: FileSystemPtr const ref) path: (thePath: Char8 const arraySlice) ::=> Void := {
        fileSystem := theFileSystem.
        path := thePath.
    }.

    const inline method fileSystem => FileSystemPtr const ref
        := fileSystem.

    const inline method path => Std String const ref
        := path.

    const inline method fullPath => Std String const ref
        := path.

    const inline method fullName => Char8 const arraySlice
        := path asArraySlice.

    const inline method basenameStartIndex => UIntPointer := {
        let bestIndex mutable type: UIntPointer.
        path doWithIndex: {:c :i :: Void |
            c = '/' || c = '\\' ifTrue: {
                bestIndex := i + 1
            }
        }.

        bestIndex
    }.

    const inline method basename => Char8 const arraySlice
        := path data from: self basenameStartIndex until: path size.

    const inline method fullNameWithoutExtension => Char8 const arraySlice
        := path data until: (path size min: (path lastIndexOf: '.')).

    const inline method basenameWithoutExtension => Char8 const arraySlice
        := path data from: self basenameStartIndex until: (path size min: (path lastIndexOf: '.')).

    const inline method extension => Char8 const arraySlice := {
        let extensionIndex mutable := path lastIndexOf: '.'.
        extensionIndex = Std Collections PositionNotFoundIndex ifTrue: {
            return: Char8 const arraySlice()
        }.

        path data from: extensionIndex + 1 until: path size
    }.

    const inline method withoutExtension: (newExtension: Char8 const arraySlice) ::=> SelfType := {
        SelfType()
            setFileSystem: fileSystem path: self fullNameWithoutExtension;
            yourself
    }.

    const inline method withExtension: (newExtension: Char8 const arraySlice) ::=> SelfType := {
        let newPath mutable := self fullNameWithoutExtension asMutableString.
        newPath
            add: '.';
            addAll: newExtension.
        SelfType()
            setFileSystem: fileSystem path: newPath;
            yourself
    }.

    const method resolve: (other: FileReference) ::=> SelfType
        := self / other path asArraySlice.

    const method / (extraPath: Char8 const arraySlice) ::=> SelfType := {
        let resultPath mutable := path.
        path isEmpty || (path last ~= '/' && path last ~= '\\') ifTrue: {
            resultPath add: PathSeparator
        }.
        resultPath addAll: extraPath.

        FileReference()
            setFileSystem: fileSystem path: resultPath;
            yourself
    }.

    const method parent ::=> SelfType := {
        let pathSize := path size.
        let bestSeparator mutable := pathSize.
        path doWithIndex: {:each :i :: Void |
            i + 1 < pathSize && (each = '/' || each = '\\') ifTrue: {
                bestSeparator := i.
            }.
        }.

        bestSeparator = path size ifTrue: {
            ## FIXME: Support absolutePath here.
            return: (FileReference()
                setFileSystem: fileSystem path: "..";
                yourself)
        }.

        FileReference()
           setFileSystem: fileSystem path: (path from: 0 until: bestSeparator);
           yourself
    }.

    const method exists => Boolean8
        := fileSystem _ exists: path asArraySlice.

    const method isFile => Boolean8
        := fileSystem _ isFile: path asArraySlice.

    const method isDirectory => Boolean8
        := fileSystem _ isDirectory: path asArraySlice.

    const method binaryUnbufferedReadStream => Std IO Stream uniquePointer
        := fileSystem _ binaryUnbufferedReadStreamOn: path asArraySlice.

    const method binaryReadStream => Std IO Stream uniquePointer
        := fileSystem _ binaryReadStreamOn: path asArraySlice.

    const method binaryUnbufferedWriteStream => Std IO Stream uniquePointer
        := fileSystem _ binaryUnbufferedWriteStreamOn: path asArraySlice.

    const method binaryWriteStream => Std IO Stream uniquePointer
        := fileSystem _ binaryWriteStreamOn: path asArraySlice.

    const method childrenDo: (iterationBlock: DirectoryIterationBlock) ::=> Void
        := fileSystem _ directory: path asArraySlice childrenDo: iterationBlock.

    const method utf8Contents => String uniquePointer := {
        let readStream := self binaryUnbufferedReadStream.
        readStream ifNil: {
            return: String uniquePointer nil
        }.

        let fileSize := readStream _
            seek: 0 mode: IO SeekMode End;
            position.
        fileSize < 0 ifTrue: {
            return: String uniquePointer nil
        }.
        readStream _ seek: 0 mode: IO SeekMode Set.

        let result mutable := String uniqueNew.
        result _ resizeTo: (fileSize castTo: UIntPointer).
        (readStream _ read: result _ data size: result _ size) = (result _ size castTo: IntPointer) ifFalse: {
            return: String uniquePointer nil
        }.

        result asMoveReference
    }.

    const method children => ChildrenType := {
        let result mutable := ChildrenType().
        self childrenDo: {:child :: Void |
            result add: child
        }.

        result asMoveReference
    }.
}.

} ## End of namespace Std
