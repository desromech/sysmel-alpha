namespace Std definition: {
namespace GC definition: {

Compiler addLinkerArguments: #("-lgc").

namespace BoehmGC definition: {
    compileTime constant GC_finalization_proc := ((Void pointer -- Void pointer) => Void) pointer.

    function GC_init externC() => Void.

    function GC_init externC() => Void.
    function GC_malloc externC(size: UIntPointer) => Void pointer.
    function GC_register_finalizer_no_order externC(object: Void pointer,
    finalizer: GC_finalization_proc, clientData: Void pointer,
    oldFinalizer: GC_finalization_proc pointer, oldClientData: Void pointer pointer) => Void pointer.
}.

function sysmel_boehm_finalizer(object: Void pointer, clientData: Void pointer) ::=> Void := {
    (object reinterpretCastTo: Smalltalk ProtoObject) finalize.
}.

class NativeCollector definition: {
    meta definition: {
        global singleton mutable type: NativeCollector; constructionPriority: Compiler compilationTarget gcInitializationPriority.

        inline method uniqueInstance => NativeCollector ref
            := singleton.
    }.

    method initialize => Void := {
        <nogc>
        BoehmGC GC_init().
    }.

    method finalize => Void := {
        <nogc>
    }.

    method allocate: (objectSize: UIntPointer)
        variableDataSize: (variableDataSize: UIntPointer)
        initializingWith: (basicInitializer: Std Reflection BasicInitializeFunctionPointerType)
          ::=> Std Reflection GCObjectHeader pointer := {
        <nogc>

        ## Allocate the object memory.
        let allocatedObject := BoehmGC GC_malloc(objectSize) reinterpretCastTo: Std Reflection GCObjectHeader pointer.
        Std memset(allocatedObject, 0, objectSize).

        ## Set the allocated object class.
        allocatedObject value
            __variableDataSize: (variableDataSize castTo: UInt32).

        ## Perform the basic initialization. This sets the vtable pointers.
        basicInitializer _ (allocatedObject).

        ## Set the finalizer.
        BoehmGC GC_register_finalizer_no_order(allocatedObject, sysmel_boehm_finalizer address, nil, nil, nil).

        return: allocatedObject
    }.

	method allocate: (instanceSize: UIntPointer) instanceAlignment: (instanceAligment: UIntPointer)
		copyingFromPrototype: (prototype: Void pointer)
		  ::=> Std Reflection GCObjectHeader pointer := {
		<nogc>

        ## Allocate the object memory.
        let allocatedObject := BoehmGC GC_malloc(instanceSize) reinterpretCastTo: Std Reflection GCObjectHeader pointer.

		## Copy the data from the prototype
        Std memcpy(allocatedObject, prototype, instanceSize).

        ## Set the finalizer.
        BoehmGC GC_register_finalizer_no_order(allocatedObject, sysmel_boehm_finalizer address, nil, nil, nil).

        return: allocatedObject
	}.

    field rootRegistrationMutex type: Std Mutex.
    field moduleRootPointers type: Std Collections Vector(GCRootPointersDescriptor).

    method registerModuleRoots: (descriptors: GCRootPointersDescriptor const arraySlice) ::=> Void := {
        <nogc>
        rootRegistrationMutex withLock: {
            moduleRootPointers addAll: descriptors.
        }.
    }.

    method allModuleRootsDo: (iterationBlock: RootIterationBlock) ::=> Void := {
        rootRegistrationMutex withLock: {
            moduleRootPointers do: {:each :: Void |
                each rootsDo: iterationBlock
            }
        }.
    }.

    method registerGCRootPointer: (rootPointer: GCObjectHeader pointer pointer) ::=> Void := {
        rootPointer _ := nil.
    }.

    method unregisterGCRootPointer: (rootPointer: GCObjectHeader pointer pointer) ::=> Void := {
        rootPointer _ := nil
    }.
}.

}. ## End of namespace GC
}. ## End of namespace Std
