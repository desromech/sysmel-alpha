namespace Std definition: {

template RCPointer(PT: Type)
    := struct definition: {
    compileTime constant PointedType := PT.
    compileTime constant PointerType := PointedType pointer.
	compileTime constant SmartPointerType := SelfType.
	compileTime constant WeakPointerType := WeakRCPointer(PT).

    compileTime constant RCRefType := Std RCRef(PT).
    compileTime constant WeakRCRefType := Std WeakRCRef(PT).

    meta extend: {
        inline method forNew: (pointer: PointerType) ::=> SmartPointerType
            := SmartPointerType basicNewValue initializeWithNewPointer: pointer; yourself.

        inline method for: (pointer: PointerType) ::=> SmartPointerType
            := SmartPointerType basicNewValue initializeWithPointer: pointer; yourself.

        inline method forNewInstance ::=> SmartPointerType
            := self forNew: PointedType nativeNew.

        macro method nil := ``(`,self basicNewValue).
    }.

    private field pointer_ type: PointerType.

    const inline method == (other: SelfType const ref) ::=> Boolean8
        := pointer_ == other getPointer.
    const inline method ~~ (other: SelfType const ref) ::=> Boolean8
        := pointer_ ~~ other getPointer.

    const inline method == (other: WeakPointerType const ref) ::=> Boolean8
        := pointer_ == other __private pointer_.
    const inline method ~~ (other: WeakPointerType const ref) ::=> Boolean8
        := pointer_ ~~ other __private pointer_.

    const inline method = (other: SelfType const ref) ::=> Boolean8
        := pointer_ = other __private pointer_ .
    const inline method ~= (other: SelfType const ref) ::=> Boolean8
        := pointer_ ~= other __private pointer_ .
    const inline method hash ::=> Hash
        := pointer_ hash.

    inline method finalize => Void := {
       self reset
    }.

    inline method initializeWithNewPointer: (pointer: PointerType) ::=> Void := {
        pointer_ := pointer.
    }.

    inline method initializeWithPointer: (pointer: PointerType) ::=> Void := {
        pointer_ := pointer.
        pointer_ ifNotNil: {
            pointer_ _ retain
        }
    }.

    inline method initializeCopyingFrom: (o: SelfType const ref) ::=> Void := {
        self initializeWithPointer: o __private pointer_
	}.

	inline method initializeMovingFrom: (o: SelfType tempRef) ::=> Void := {
        pointer_ := o __private pointer_.
        o __private pointer_ := nil.
	}.

    inline const method _ => PointedType ref
        := pointer_ _.

    inline const method getPointer => PointerType
        := pointer_.

	inline method reset: (pointer: PointerType) ::=> Void := {
        let c := pointer_.
        pointer_ := pointer.
        c ifNotNil: {
            c _ release.
        }.
    }.

	inline method reset => Void := {
        self reset: nil
    }.

    (inline method := (o: SelfType const ref)) ::=> SelfType const ref := {
        self address ~~ o address ifTrue: {
            let newrcPointer mutable := o.
            self swapWith: newrcPointer
        }.
		self
	}.

	(inline method := (o: SelfType tempRef)) ::=> SelfType const ref := {
        self address ~~ o address ifTrue: {
            let newrcPointer mutable := o.
    		o __private pointer_ := nil.
            self swapWith: newrcPointer
        }.

		self
	}.

    inline method swapWith: (o: SelfType ref) ::=> Void := {
        Std swapValue: pointer_ with: o __private pointer_.
    }.

    const inline method asWeakRCPointer => WeakPointerType
        := WeakPointerType for: pointer_.

    const inline method asRCRef => RCRefType
        := RCRefType for: self.

    const inline method asWeakRCRef => WeakRCRefType
        := WeakRCRefType for: self asWeakRCPointer.

    macro method upCastFor: targetType
        := ``(Std RCPointer(`,targetType) for: `,self __private pointer_).

    macro method downCastFor: targetType
        := ``(Std RCPointer(`,targetType) for: (`,self __private pointer_ castTo: `,targetType pointer)).

    ## Some convenience macros.
	macro method isNil := ``(`,self getPointer isNil).
	macro method isNotNil := ``(`,self getPointer isNotNil).

	macro method ifNil: nilAction := ``(`,self getPointer ifNil: `,nilAction).
	macro method ifNil: nilAction ifNotNil: notNilAction := ``(`,self getPointer ifNil: `,nilAction ifNotNil: `, notNilAction).
	macro method ifNotNil: notNilAction := ``(`,self getPointer ifNotNil: `,notNilAction).
	macro method ifNotNil: notNilAction ifNil: nilAction  := ``(`,self getPointer ifNotNil: `,notNilAction ifNil: `,nilAction).

    macro method printOnNativeTextStreamWriter: out := ``(`,self __private pointer_ printOnNativeTextStreamWriter: `,out).
}.

template WeakRCPointer(PT: Type)
    := struct definition: {
    compileTime constant PointedType := PT.
	compileTime constant PointerType := PointedType pointer.
	compileTime constant WeakPointerType := SelfType.
	compileTime constant StrongPointerType := RCPointer(PT).

    compileTime constant WeakRCRefType := Std WeakRCRef(PT).

    private field pointer_ type: PointerType.

    meta extend: {
        inline method for: (intrusivePointer: PointerType) ::=> WeakPointerType
            := WeakPointerType basicNewValue initializeWithPointer: intrusivePointer; yourself.
        macro method nil := ``(`,self basicNewValue).
    }.

    inline method finalize => Void := {
        self reset.
    }.

    const inline method == (other: SelfType const ref) ::=> Boolean8
        := pointer_ == other __private pointer_.
    const inline method ~~ (other: SelfType const ref) ::=> Boolean8
        := pointer_ ~~ other __private pointer_.

    const inline method == (other: StrongPointerType const ref) ::=> Boolean8
        := pointer_ == other __private pointer_.
    const inline method ~~ (other: StrongPointerType const ref) ::=> Boolean8
        := pointer_ ~~ other __private pointer_.

    const inline method = (other: SelfType const ref) ::=> Boolean8
        := pointer_ = other __private pointer_ .
    const inline method ~= (other: SelfType const ref) ::=> Boolean8
        := pointer_ ~= other __private pointer_ .
    const inline method hash ::=> Hash
        := pointer_ hash.

    inline method reset => Void := {
        let c := pointer_.
        pointer_ := nil.

        c ifNotNil: {
            c _ weakRelease.
        }.
    }.

    inline method initializeWithPointer: (thePointer: PointerType) ::=> Void := {
        pointer_ := thePointer.
        pointer_ ifNotNil: {
            pointer_ _ weakRetain.
        }.
    }.

    inline method initializeCopyingFrom: (o: SelfType const ref) ::=> Void := {
		self initializeWithPointer: o __private pointer_.
	}.

	inline method initializeMovingFrom: (o: SelfType tempRef) ::=> Void := {
        pointer_ := o __private pointer_.
        o __private pointer_ := nil.
	}.

    (inline method := (o: StrongPointerType const ref)) ::=> SelfType const ref := {
        let newPointer := o __private pointer_.
        let oldPointer := pointer_.
        pointer_ := newPointer.

		newPointer ifNotNil: {
			newPointer _ weakRetain
		}.
        oldPointer ifNotNil: {
			oldPointer _ weakRelease
		}.

		self
	}.

    (inline method := (o: SelfType const ref)) ::=> SelfType const ref := {
        self address ~~ o address ifTrue: {
            let copy mutable := o.
            self swapWith: copy.
        }.
		self
	}.

	(inline method := (o: SelfType tempRef)) ::=> SelfType const ref := {
        self address ~~ o address ifTrue: {
            let copy mutable := o.
    		o __private pointer_ := nil.
            self swapWith: copy.
        }.
		self
	}.

    inline method lock => StrongPointerType := {
        pointer_ isNotNil && pointer_ _ weakLock ifTrue: {
            return: (StrongPointerType forNew: pointer_)
        }.

        return: StrongPointerType nil
    }.

    inline method swapWith: (o: SelfType ref) ::=> Void := {
        Std swapValue: pointer_ with: o __private pointer_.
    }.

    macro method asWeakRCPointer := self.
    const inline method asWeakRCRef => WeakRCRefType
        := WeakRCRefType for: self.

    macro method upCastFor: targetType
        := ``(Std WeakRCPointer(`,targetType) for: `,self __private pointer_).

    macro method downCastFor: targetType
        := ``(Std WeakRCPointer(`,targetType) for: (`,self __private pointer_ castTo: `,targetType pointer)).
}.

#**
 * Transparent RC counted reference.
 *#
template RCRef(PT: Type)
    := struct definition: {
    compileTime constant PointedType := PT.
    compileTime constant DoesNotUnderstandProxyType := PointedType.
    
    compileTime constant RCPointerType := Std RCPointer(PT).
    compileTime constant WeakRCPointerType := Std WeakRCPointer(PT).

    compileTime constant WeakRCRefType := Std WeakRCRef(PT).

    public field __rcPointer__ type: RCPointerType.

    meta extend: {
        inline method for: (rcPointer: RCPointerType) ::=> InstanceType
            := InstanceType basicNewValue __rcPointer__: rcPointer; yourself.

        inline method for: (pointer: PT pointer) ::=> InstanceType
            := self for: (RCPointerType for: pointer).

        inline method forNewInstance ::=> InstanceType
            := self for: RCPointerType forNewInstance.

        macro method nil := ``(`,self basicNewValue).
    }.

    macro method asRCPointer := ``(`,self __rcPointer__).
    macro method asWeakRCPointer := ``(`,self __rcPointer__ asWeakRCPointer).

    const inline method == (other: SelfType const ref) ::=> Boolean8
        := __rcPointer__ == other __rcPointer__.
    const inline method ~~ (other: SelfType const ref) ::=> Boolean8
        := __rcPointer__ ~~ other __rcPointer__.

    const inline method == (other: PointedType const ref) ::=> Boolean8
        := __rcPointer__ getPointer == other address.
    const inline method ~~ (other: PointedType const ref) ::=> Boolean8
        := __rcPointer__ getPointer ~~ other address.

    const inline method == (other: WeakRCRefType const ref) ::=> Boolean8
        := __rcPointer__ == other __weakRCPointer__.
    const inline method ~~ (other: WeakRCRefType const ref) ::=> Boolean8
        := __rcPointer__ ~~ other __weakRCPointer__.

    const inline method identityHash ::=> Hash
        := __rcPointer__ hash.

    (inline method := (o: _UndefinedType)) ::=> SelfType const ref := {
        __rcPointer__ reset.
		self
	}.

    (inline method := (o: PointedType ref)) ::=> SelfType const ref := {
        __rcPointer__ := RCPointerType for: o address.
		self
	}.

    (inline method := (o: WeakRCRefType ref)) ::=> SelfType const ref := {
        __rcPointer__ := o __weakRCPointer__ lock.
		self
	}.

    const inline method asWeakRCRef => WeakRCRefType
        := WeakRCRefType for: __rcPointer__ asWeakRCPointer.
    macro method asRCRef := self.

	macro method isNil := ``(`,self __rcPointer__ isNil).
	macro method isNotNil := ``(`,self __rcPointer__ isNotNil).

    macro method rcObjectAddress := ``(`,self __rcPointer__ getPointer).

    macro method upCastFor: targetType
        := ``((`,self __rcPointer__ upCastFor: `,targetType) asRCRef).

    macro method downCastFor: targetType
        := ``((`,self __rcPointer__ downCastFor: `,targetType) asRCRef).

    ## ifNil:ifNotNil
	macro method ifNil: nilAction := ``(`,self __rcPointer__ ifNil: `,nilAction).
    macro method ifNil: nilAction ifNotNil: notNilAction := {
        let ref := __astBuilder gensym: #ref.
        ``{
            let `,ref ref := `,self.
            `,ref __rcPointer__ getPointer ifNil: `,nilAction ifNotNil: (`,notNilAction __macroInlineBlock: `,ref)
        } asSequenceWithoutLexicalScope
    }.

	macro method ifNotNil: notNilAction ifNil: nilAction  := ``(`,self ifNil: `,nilAction ifNotNil: `,notNilAction).
	macro method ifNotNil: notNilAction  := ``(`,self ifNil: void ifNotNil: `,notNilAction).

    macro method printOnNativeTextStreamWriter: out
        := ``(`,self __rcPointer__ _ printOnNativeTextStreamWriter: `,out).

    macro method doesNotUnderstand: aMessage
        := ``(`,self __rcPointer__ _ __macroSendMessage: `,aMessage).
}.

#**
 * Transparent Weak RC counted reference.
 *#
template WeakRCRef(PT: Type)
    := struct definition: {
    compileTime constant PointedType := PT.
    compileTime constant DoesNotUnderstandProxyType := PointedType.

    compileTime constant RCPointerType := Std RCPointer(PT).
    compileTime constant WeakRCPointerType := Std WeakRCPointer(PT).

    compileTime constant RCRefType := Std RCRef(PT).

    public field __weakRCPointer__ type: WeakRCPointerType.

    meta extend: {
        inline method for: (rcPointer: WeakRCPointerType) ::=> InstanceType
            := InstanceType basicNewValue __weakRCPointer__: rcPointer; yourself.

        inline method for: (pointer: PT pointer) ::=> InstanceType
            := self for: (WeakRCPointerType for: pointer).

        macro method nil := ``(`,self basicNewValue).
    }.

    const inline method == (other: SelfType const ref) ::=> Boolean8
        := __weakRCPointer__ == other __weakRCPointer__.
    const inline method ~~ (other: SelfType const ref) ::=> Boolean8
        := __weakRCPointer__ ~~ other __weakRCPointer__.

    const inline method == (other: PointedType const ref) ::=> Boolean8
        := __weakRCPointer__ __private pointer_ == other address.
    const inline method ~~ (other: PointedType const ref) ::=> Boolean8
        := __weakRCPointer__ __private pointer_ ~~ other address.

    const inline method == (other: RCRefType const ref) ::=> Boolean8
        := __weakRCPointer__ == other __rcPointer__.
    const inline method ~~ (other: RCRefType const ref) ::=> Boolean8
        := __weakRCPointer__ ~~ other __rcPointer__.

    const inline method identityHash ::=> Hash
        := __weakRCPointer__ hash.

    (inline method := (o: _UndefinedType)) ::=> SelfType const ref := {
        __weakRCPointer__ reset.
		self
	}.
    
    (inline method := (o: PointedType ref)) ::=> SelfType const ref := {
        __weakRCPointer__ := WeakRCPointerType for: o address.
		self
	}.

    (inline method := (o: RCRefType ref)) ::=> SelfType const ref := {
        __weakRCPointer__ := o __rcPointer__.
		self
	}.

    macro method asRCPointer := ``(`,self __weakRCPointer__ lock).
    macro method asWeakRCPointer := ``(`,self __weakRCPointer__).

    macro method rcObjectAddress := ``(`,self __weakRCPointer__ lock getPointer).

    macro method upCastFor: targetType
        := ``((`,self __weakRCPointer__ upCastFor: `,targetType) asWeakRCRef).

    macro method downCastFor: targetType
        := ``((`,self __weakRCPointer__ downCastFor: `,targetType) asWeakRCRef).

    macro method asWeakRCRef := self.
    const inline method asRCRef => RCRefType
        := RCRefType for: __weakRCPointer__ lock.

	macro method isNil := ``(`,self asRCPointer isNil).
	macro method isNotNil := ``(`,self asRCPointer isNotNil).

	macro method ifNil: nilAction := ``(`,self asRCRef ifNil: `,nilAction).
	macro method ifNil: nilAction ifNotNil: notNilAction := ``(`,self asRCRef ifNil: `,nilAction ifNotNil: `, notNilAction).
	macro method ifNotNil: notNilAction := ``(`,self asRCRef ifNotNil: `,notNilAction).
	macro method ifNotNil: notNilAction ifNil: nilAction  := ``(`,self asRCRef ifNotNil: `,notNilAction ifNil: `,nilAction).

    macro method doesNotUnderstand: aMessage
        := ``(`,self __weakRCPointer__ lock _ __macroSendMessage: `,aMessage).
}.

#**
 * I am an that holds a pointer into its reference counter.
 *#
class RCObject superclass: Object; definition: {
    private field strongCounter_ type: AtomicUIntPointer.
    private field weakCounter_ type: AtomicUIntPointer.

    meta definition: {
        macro method rcNew := ``(`,self rcPointer forNewInstance).
        macro method new := ``(`,self rcRef forNewInstance).
    }.

    override method initialize => Void := {
        strongCounter_ store: 1 with: MemoryOrder Release.
        weakCounter_ store: 1 with: MemoryOrder Release.
    }.

    inline method retain => Void := {
        strongCounter_ fetchAndAdd: 1 with: MemoryOrder AcquireAndRelease
    }.

    inline method release => Void := {
        let oldCount := strongCounter_ fetchAndSubtract: 1 with: MemoryOrder AcquireAndRelease.
        ##Std stdout << self address << " old strong release count " << oldCount; nl.
        oldCount == 1 ifTrue: {
            ##Std stdout << "No more strong counts finalize the ref counted object " << self address ; nl.
            self
                finalize;
                weakRelease.
        }.
    }.

    inline method weakRetain => Void := {
        weakCounter_ fetchAndAdd: 1 with: MemoryOrder AcquireAndRelease.
    }.

    inline method weakRelease => Void := {
        let oldCount := weakCounter_ fetchAndSubtract: 1 with: MemoryOrder AcquireAndRelease.
        ##Std stdout << self address << " old weak release count " << oldCount; nl.
        oldCount == 1 ifTrue: {
            ##Std stdout << "No more weak count, delete the memory for shared object " << self address; nl.
            self address basicNativeDelete
        }
    }.

    inline method weakLock => Boolean8 := {
        let oldCount mutable type: UIntPointer.
        while: (oldCount := strongCounter_ loadWith: MemoryOrder Acquire) ~= 0 do: {
            (strongCounter_ atomicCompare: oldCount andSet: oldCount + 1 with: MemoryOrder AcquireAndRelease) ifTrue: {
                return: true
            }
        }.

        return: false
    }.


    inline method asRCObjectWeakPointer => Std WeakRCPointer(SelfType)
        := Std WeakRCPointer(SelfType) for: self address.

    inline method asRCObjectPointer => Std RCPointer(SelfType)
        := Std RCPointer(SelfType) for: self address.

    inline method asRCObjectRef => Std RCRef(SelfType)
        := Std RCRef(SelfType) for: self asRCObjectPointer.

    inline method asRCObjectWeakRef => Std WeakRCRef(SelfType)
        := Std WeakRCRef(SelfType) for: self asRCObjectWeakPointer.

    macro method asWeakRCPointer := ``(Std WeakRCPointer(`,SelfType) for: `,self address).
    macro method asRCPointer := ``(Std RCPointer(`,SelfType) for: `,self address).

    macro method asWeakRCRef := ``(Std WeakRCRef(`,SelfType) for: `,self address).
    macro method asRCRef := ``(Std RCRef(`,SelfType) for: `,self address).
    
    macro method rcObjectAddress := ``(`,self address).


    (inline method := (other: SelfType const ref)) => SelfType ref := {
        ## internalSelfWeakPointer should not be modified.
        self
    }.

    (inline method := (other: SelfType tempRef)) => SelfType ref := {
        ## internalSelfWeakPointer should not be modified.
        self
    }.

}.

_ClassType meta macro method rcPointer := ``(Std RCPointer(`,self)).
_ClassType meta macro method weakRCPointer := ``(Std WeakRCPointer(`,self)).

_ClassType meta macro method rcRef := ``(Std RCRef(`,self)).
_ClassType meta macro method weakRCRef := ``(Std WeakRCRef(`,self)).

compileTime constant RCObjectPtr := RCObject rcPointer.
compileTime constant RCObjectWeakPtr := RCObject weakRCPointer.
compileTime constant RCObjectRef := RCObject rcRef.
compileTime constant RCObjectWeakRef := RCObject weakRCRef.

}. ## End of namespace Std
