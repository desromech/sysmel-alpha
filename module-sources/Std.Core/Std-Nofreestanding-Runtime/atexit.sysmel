namespace Std definition: {
namespace Runtime definition: {

compileTime constant AtExitCallback := (Void => Void) pointer.

struct AtExitRecord definition: {
    public field callback type: AtExitCallback.

    method invoke => Void := {
        callback()
    }
}.

struct AtExitRecordBlockHeader definition: {
    public field previousBlock type: AtExitRecordBlock pointer.
    public field size type: UInt16.
    public field reserved type: UInt16.
}.

compileTime constant AtExitRecordBlockSize := 4096. ## Single page size.
compileTime constant AtExitRecordBlockCapacity := (AtExitRecordBlockSize - AtExitRecordBlockHeader instanceSize) / AtExitRecord instanceSize.

struct AtExitRecordBlock definition: {
    public field header type: AtExitRecordBlockHeader.
    public field records type: (AtExitRecord array: AtExitRecordBlockCapacity).

    method invokeCallbacks => Void := {
        while: header size > 0 do: {
            header size := header size - 1 castTo: UInt16.
            records[header size] invoke
        }.
    }.
}.

let finalAtExitRecordBlock mutable type: AtExitRecordBlock.
let currentAtExitRecordBlock mutable := finalAtExitRecordBlock address.

let sysmelAtExitFinalizeOnceRegistration mutable type: OnceFlag.
let sysmelAtExitSpinlock mutable type: AtomicFlag.

function __sysmel_atexit_finalize externC() => Void := {
    let currentBlock mutable := currentAtExitRecordBlock.
    while: currentBlock isNotNil do: {
        let nextBlock := currentBlock _ header previousBlock.
        currentBlock _ invokeCallbacks.

        currentBlock == finalAtExitRecordBlock address ifFalse: {
            currentBlock nativeDelete.
        }.

        currentBlock := nextBlock
    }.
}.

compileTime if: Compiler hasLibC then: {

inline function __sysmel_atexit_register_finalize() => Void := {
    sysmelAtExitFinalizeOnceRegistration do: {
        LibC atexit(__sysmel_atexit_finalize address)
    }
}.
}.

function __sysmel_atexit externC(callback: AtExitCallback) => Void := {
    __sysmel_atexit_register_finalize().
    callback ifNil: {return: void}.

    ## Grab the spinlock
    {
        while: (sysmelAtExitSpinlock testAndSetWith: MemoryOrder Acquire) do: {
            ## Spin
        }
    }.

    ## Allocate a new block if need.
    let oldSize mutable := currentAtExitRecordBlock _ header size.
    oldSize = AtExitRecordBlockCapacity ifTrue: {
        let newBlock := AtExitRecordBlock nativeNew.
        newBlock _ header previousBlock: currentAtExitRecordBlock.
        currentAtExitRecordBlock := newBlock.
        oldSize := currentAtExitRecordBlock _ header size.
    }.

    ## Store the new callback.
    let newSize := oldSize + 1 castTo: UInt16.
    currentAtExitRecordBlock _ records[oldSize] := AtExitRecord ()
        callback: callback;
        yourself.
    currentAtExitRecordBlock _ header size: newSize.

    sysmelAtExitSpinlock clearWith: MemoryOrder Release.
}.

Compiler compilationTarget sysmelAtExitFunction:__sysmel_atexit.

}. ## End of namespace Runtime
}. ## End of namespace Std
