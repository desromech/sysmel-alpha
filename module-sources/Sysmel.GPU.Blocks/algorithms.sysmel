namespace GPUBlockConversion definition: {
template CollectionMapShader(MF: _FunctionType ref)
:= class definition: {
	<gpu>
	compileTime constant MapFunction := MF.
	compileTime constant FunctionType := MapFunction typeOfExpression baseType.
	compileTime constant InputType := FunctionType argumentTypes first.
	compileTime constant OutputType := FunctionType returnType.

	struct InputBuffer definition: {
		public field data type: InputType array.
	}.
	struct OutputBuffer definition: {
		public field data type: OutputType array.
	}.

	struct ComputationBindings definition: {
		public field inputBuffer type: InputBuffer storageBufferPointer.
		public field outputBuffer type: OutputBuffer storageBufferPointer.
	}.

	struct QuickConstants definition: {
		public field bufferSize type: UInt32.
	}.

	public field arguments type: ComputationBindings bindingSetPointer.
	public field quickConstants type: QuickConstants pushConstantPointer.

	function main computeShader(stageIn: GPU ComputeStageInput inputChannel) => Void := {
		<localSize: 64>
		let collectionElement := stageIn receive globalIndex.
		let bufferSize := quickConstants _ bufferSize.
		collectionElement < bufferSize ifTrue: {
			let input := arguments _ inputBuffer _ data [collectionElement].
			let result := MapFunction(input).
			arguments _ outputBuffer _ data [collectionElement] := result.
		}.
	}.
}.

template BinaryReductionShader(RF: _FunctionType ref)
:= class definition: {
	<gpu>
	compileTime constant ReductionFunction := RF.
	compileTime constant FunctionType := ReductionFunction typeOfExpression baseType.
	compileTime constant ElementType := FunctionType argumentTypes first.

	struct DataBuffer definition: {
		public field data type: ElementType array.
	}.

	struct ComputationBindings definition: {
		public field inputBuffer type: DataBuffer storageBufferPointer.
		public field outputBuffer type: DataBuffer storageBufferPointer.
	}.

	struct QuickConstants definition: {
		public field bufferSize type: UInt32.
		public field defaultValue type: ElementType.
	}.

	public field arguments type: ComputationBindings bindingSetPointer.
	public field quickConstants type: QuickConstants pushConstantPointer.
	public field sharedBlockData workgroupShared type: (ElementType array: 64).

	function main computeShader(stageIn: GPU ComputeStageInput inputChannel) => Void := {
		<localSize: 64>
		let stageInput mutable := stageIn receive.

		let collectionElement := stageInput globalIndex*2.
		let localIndex := stageInput localInvocationID x.

		let bufferSize := quickConstants _ bufferSize.
		let destinationIndex := collectionElement / 128.

		## Fetch the first pair of elements.
		{
			let defaultValue := quickConstants _ defaultValue.
			let leftInput := collectionElement < bufferSize ifTrue: {
				arguments _ inputBuffer _ data [collectionElement].
			} ifFalse: {
				defaultValue
			}.

			let rightInput := (collectionElement + 1) < bufferSize ifTrue: {
				arguments _ inputBuffer _ data [collectionElement + 1].
			} ifFalse: {
				defaultValue
			}.

			sharedBlockData[localIndex] := ReductionFunction(leftInput, rightInput)
		}.

		GPU memoryBarrierShared().
		GPU barrier().

		## Perform the reduction levels.
		1 to: 6 do: { :(UInt32)levelDepth :: Void |
			let levelHalfSize := 64 >> levelDepth.
			localIndex < levelHalfSize ifTrue: {
				let leftInput := sharedBlockData[localIndex*2].
				let rightInput := sharedBlockData[localIndex*2 + 1].
				sharedBlockData[localIndex] := ReductionFunction(leftInput, rightInput).
			}.
			GPU memoryBarrierShared().
			GPU barrier().
		}.

		## Write the reduced result into the output buffer.
		localIndex = 0 && destinationIndex < bufferSize ifTrue: {
			arguments _ outputBuffer _ data [destinationIndex] := sharedBlockData[0].
		}.
	}.
}.

template IntervalGeneratorShader(ET: Type)
:= class definition: {
	<gpu>
	compileTime constant ElementType := ET.

	struct OutputBuffer definition: {
		public field data type: ElementType array.
	}.

	struct ComputationBindings definition: {
		public field outputBuffer type: OutputBuffer storageBufferPointer.
	}.

	struct QuickConstants definition: {
		public field bufferSize type: UInt32.
		public field reserved type: UInt32.

		public field firstElement type: ElementType.
		public field increment type: ElementType.
	}.

	public field arguments type: ComputationBindings bindingSetPointer.
	public field quickConstants type: QuickConstants pushConstantPointer.

	function main computeShader(stageIn: GPU ComputeStageInput inputChannel) => Void := {
		<localSize: 64>
		let elementIndex := stageIn receive globalIndex.
		let bufferSize := quickConstants _ bufferSize.
		let firstElement := quickConstants _ firstElement.
		let increment := quickConstants _ increment.
		elementIndex < bufferSize ifTrue: {
			arguments _ outputBuffer _ data [elementIndex] := firstElement + elementIndex*increment.
		}.
	}.
}.
}. ## End of namespace GPUBlockConversion
