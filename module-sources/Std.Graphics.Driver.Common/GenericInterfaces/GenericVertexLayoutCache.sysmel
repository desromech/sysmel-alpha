namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

#**
 * I am a generic implementation for a vertex layout cache
 *#
class GenericVertexLayoutCache superclass: VertexLayoutCache; definition: {
    public field device type: RenderingDeviceWeakRef.
    protected field mutex type: Std Mutex.
    protected field vertexLayouts type: Std Collections Dictionary(VertexLayoutDescription, VertexLayoutRef).

    override method getOrCreateWithDescription: (description: VertexLayoutDescription const ref) ::=> VertexLayoutRef := {
        mutex withLock: {
            vertexLayouts at: description ifPresent: {:(VertexLayoutRef ref)existent :: Void |
                return: existent
            }
        }.

        let strongDevice := device asRCRef.
        strongDevice ifNil: {
            return: VertexLayoutRef nil.
        }.

        let result mutable := strongDevice createVertexLayoutWithDescription: description.
        mutex withLock: {
            vertexLayouts at: description put: result
        }.

        result
    }.
}.

compileTime constant GenericVertexLayoutCacheRef := GenericVertexLayoutCache rcRef.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
