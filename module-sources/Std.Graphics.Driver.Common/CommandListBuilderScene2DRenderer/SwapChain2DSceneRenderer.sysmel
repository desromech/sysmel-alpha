namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Std Math Geometry.

#**
 * I am a 2D scene renderer that draws onto a specific swap chain.
 *#
class SwapChain2DSceneRenderer superclass: Scene2D Scene2DRenderer; definition: {
    protected field extent type: UInt32x2.
    protected field renderingQueue type: CommandQueueRef.
    protected field swapChain type: SwapChainRef.

    protected field device type: RenderingDeviceRef.
    protected field renderPasses type: Std Collections Vector(RenderPassRef).
    protected field commandListAllocators type: Std Collections Vector(CommandListAllocatorRef).
    protected field stateTrackers type: Std Collections Vector(StateTrackerRef).
    protected field fences type: Std Collections Vector(FenceRef).

    protected field perFrameSceneRenderers type: Std Collections Vector(StateTracker2DSceneRendererRef).

    protected field currentClearColor type: Float32x4.
    protected field isOutOfDate type: Boolean8.

    meta definition: {
        method for: (swapChain: SwapChainRef const ref) on: (theRenderingQueue: CommandQueueRef const ref) on: (theDevice: RenderingDeviceRef const ref) withExtent: (anExtent: UInt32x2) ::=> SwapChain2DSceneRenderer rcRef := {
            SwapChain2DSceneRenderer new
                initializeWithSwapChain: swapChain on: theRenderingQueue on: theDevice extent: anExtent;
                yourself
        }.
    }.

    method initializeWithSwapChain: (theSwapChain: SwapChainRef const ref) on: (theRenderingQueue: CommandQueueRef const ref) on: (theDevice: RenderingDeviceRef const ref) extent: (theExtent: UInt32x2) ::=> Void := {
        swapChain := theSwapChain.
        renderingQueue := theRenderingQueue.
        device := theDevice.
        extent := theExtent.

        let bufferCount := swapChain getFramebufferCount.
        commandListAllocators reserve: bufferCount.
        stateTrackers reserve: bufferCount.
        renderPasses reserve: bufferCount.
        perFrameSceneRenderers reserve: bufferCount.
        fences resizeTo: bufferCount.
        0 until: bufferCount do: {:i :: Void |

            {
                let commandListAllocator := device createCommandAllocatorOfType: CommandListType Direct for: renderingQueue.
                commandListAllocators add: commandListAllocator.

                let stateTracker := device createDeferredStateTrackerOfType: CommandListType Direct for: commandListAllocator.
                stateTrackers add: stateTracker
            }.

            let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                RenderPassColorAttachmentDescription()
                    format: swapChain colorBufferFormat;
                    beginAction: RenderPassAttachmentAction Clear;
                    endAction: RenderPassAttachmentAction Keep;
                    clearValue: Float32x4(0, 0, 1, 1);
                    yourself
            ).

            let renderPass := device createRenderPass: colorAttachments depthStencilAttachment: nil.
            renderPasses add: renderPass.

            perFrameSceneRenderers add: (StateTracker2DSceneRenderer new
                    extent: extent;
                    device: device;
                    yourself).
        }.
    }.

    const method extent => UInt32x2
        := extent.

    const method swapChain => SwapChainRef const ref
        := swapChain.

    const method isOutOfDate => Boolean8
        := isOutOfDate.

    override method newSceneBuilder => Scene2D BuilderRef
        := device createScene2DBuilder.

    override method clearColor: (color: Float32x4) ::=> Void := {
        currentClearColor := color.
    }.

    override method renderScene: (rootNode: Scene2D NodeRef const ref) ::=> Void := {
        isOutOfDate ifTrue: {return: void}.

        let backBuffer := swapChain getCurrentBackBuffer.
        let backBufferIndex := swapChain getCurrentBackBufferIndex.

        let allocator ref := commandListAllocators[backBufferIndex].
        let renderPass ref := renderPasses[backBufferIndex].
        let stateTracker ref := stateTrackers[backBufferIndex].
        let perFrameSceneRenderer ref := perFrameSceneRenderers[backBufferIndex].
        let fence ref := fences[backBufferIndex].
        fence ifNotNil: {
            fence wait
        } ifNil: {
            fence := device createFence.
            fence ifNil: {return: void}.
        }.

        ## Set the actual clear color in the render pass.
        renderPass setColorAttachment: 0 clearValue: currentClearColor.

        allocator resetAllocator.
    	stateTracker
            resetFor: allocator;
            beginRenderPass: renderPass on: backBuffer contentOnBundle: false;
    		setViewport: (RectangleI32 min: Int32x2 zeros max: (extent castTo: Int32x2));
    		setScissor: (RectangleI32 min: Int32x2 zeros max: (extent castTo: Int32x2)).

        rootNode ifNotNil: {
            perFrameSceneRenderer
                stateTracker: stateTracker;
                renderScene: rootNode
        }.

        stateTracker
            endRenderPass;
            close.

        renderingQueue
            submitCommandList: (stateTracker upCastFor: CommandList);
            signalFence: fence.
    }.

    override method present => Void := {
        swapChain swapBuffers selectCase: #{
        SwapChainPresentationError OutOfDate : {
            isOutOfDate := true
        }.
        SwapChainPresentationError Suboptimal : {
            isOutOfDate := true
        }.
        SwapChainPresentationError Ok : {}.
        }
    }.
}.

compileTime constant SwapChain2DSceneRendererRef := SwapChain2DSceneRenderer rcRef.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
