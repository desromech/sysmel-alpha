namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Std Math Geometry.
useNamespace: Std Graphics Scene2DMesh.

#**
 * I am a 2D scene renderer that draws onto a specific state tracker.
 *#
class StateTracker2DSceneRenderer superclass: MeshListBuilder2DSceneRenderer; definition: {
    public field stateTracker type: StateTrackerRef.

    protected field shaderSignature type: ShaderSignatureRef.

    protected field sampler type: SamplerRef.
    protected field samplingStateBinding type: ShaderResourceBindingsRef.

    protected field transformationStateBuffer type: BufferRef.
    protected field transformationStateBinding type: ShaderResourceBindingsRef.

    protected field vertexBuffer type: BufferRef.
    protected field vertexLayout type: VertexLayoutRef.
    protected field vertexBinding type: VertexBindingRef.

    protected field indexBuffer type: BufferRef.

    protected field texturingBindingDictionary type: Std Collections Dictionary(TextureView pointer, ShaderResourceBindingsRef).
    protected field texturingBindings type: Std Collections Vector(ShaderResourceBindingsRef).
    protected field nextAvailableTexturingBindings type: UIntPointer.

    private field currentActiveClipSubmesh type: Int32.
    private field lastActiveTextureView type: TextureViewRef.

    override method renderScene: (rootNode: Scene2D NodeRef const ref) ::=> Void := {
        rootNode ifNil: { return: void }.

        super renderScene: rootNode.

        stateTracker ifNil: { return: void }.

        self submitVertices && self submitIndices && self submitMatrices ifFalse: {
            return: void
        }.

        stateTracker
            useShaderSignature: shaderSignature;
            useGraphicShaderBindings: samplingStateBinding;
            useGraphicShaderBindings: transformationStateBinding;
            vertexShader: SimpleShader vertex shaderEntryPointInfo address;
            fragmentShader: SimpleShader coloredFragment shaderEntryPointInfo address;
            useVertexBinding: vertexBinding;
            useIndexBuffer: indexBuffer.

        nextAvailableTexturingBindings := 0.
        lastActiveTextureView := TextureViewRef nil.
        currentActiveClipSubmesh := -1.
        texturingBindingDictionary removeAll.
        meshBuilder submeshes do: {:each :: Void |
            self renderSubmesh: each.
        }.
    }.

    method activateClipSubmesh: (clipSubmeshIndex: Int32) ::=> Void := {
        ## TODO: Implement support for polygon based clipping by using the stencil buffer.

        let newClippingBounds mutable := RectangleF32 extent: (extent castTo: Float32x2).
        let currentClipSubmesh mutable := clipSubmeshIndex.

        ## TODO: Avoid this loop by keeping a stack of active clipping bounds.
        while: currentClipSubmesh >= 0 do: {
            let submesh ref := meshBuilder submeshes[currentClipSubmesh castTo: UIntPointer].
            newClippingBounds := newClippingBounds intersectionWith: submesh boundingBox.
            currentClipSubmesh := submesh clipSubmesh
        }.

        newClippingBounds isEmpty ifTrue: {
            stateTracker setScissor: RectangleI32().
        } ifFalse: {
            stateTracker setScissor: newClippingBounds asRectangleI32
        }.

        currentActiveClipSubmesh := clipSubmeshIndex.
    }.

    method renderSubmesh: (submesh: Submesh ref) ::=> Void := {
        submesh clipSubmeshType = ClipSubmeshType None ifFalse: {return: void}.
        submesh clipSubmesh = currentActiveClipSubmesh ifFalse: {
            self activateClipSubmesh: submesh clipSubmesh
        }.

        submesh fontFaceWithSize isNotNil && submesh textureView isNil ifTrue: {
            let (let texture, let textureView) := (submesh fontFaceWithSize rcObjectAddress castTo: RenderingDeviceFontFaceWithSize pointer) _
                validRenderingTextureAndView.
            submesh
                texture: texture;
                textureView: textureView.
        }.

        submesh textureView ~~ lastActiveTextureView ifTrue: {
            submesh textureView ifNil: {
                stateTracker fragmentShader: SimpleShader coloredFragment shaderEntryPointInfo address.
            } ifNotNil: {
                let binding := self getOrCreateTextureBindingFor: submesh textureView.
                binding ifNil: {
                    stateTracker fragmentShader: SimpleShader coloredFragment shaderEntryPointInfo address.
                } ifNotNil: {
                    submesh fontFaceWithSize ifNil: {
                        stateTracker fragmentShader: SimpleShader texturedFragment shaderEntryPointInfo address.
                    } ifNotNil: {
                        stateTracker fragmentShader: SimpleShader textFragment shaderEntryPointInfo address.
                    }.
                    stateTracker useGraphicShaderBindings: binding
                }
            }.

            lastActiveTextureView := submesh textureView
        }.

        stateTracker
            blendingEquation: submesh blendingMode asBlendingEquation;
            primitiveTopology: submesh primitiveTopology;
            drawElements: submesh indexCount instanceCount: 1 firstIndex: submesh firstIndex baseVertex: 0baseInstance: 0.
    }.

    method submitVertices => Boolean8 := {
        let requiredSize := meshBuilder vertices size * MeshVertex instanceSize.
        vertexBuffer isNil || requiredSize > vertexBuffer size ifTrue: {
            self createVertexBufferWithCapacity: meshBuilder vertices size.
            vertexBuffer ifNil: {
                return: false.
            }
        }.

        requiredSize > 0 ifTrue: {
            vertexBuffer uploadAt: 0 size: requiredSize data: meshBuilder vertices data
        }.

        true
    }.

    method createVertexBufferWithCapacity: (requiredCapacity: UIntPointer) ::=> Void := {
        let newCapacity := (requiredCapacity asLargerPowerOfTwo max: 16) * MeshVertex instanceSize.
        vertexBuffer := device createBuffer: (BufferDescription()
            size: newCapacity;
            heapType: MemoryHeapType HostToDevice;
            usageModes: BufferUsageMode Array;
            mainUsageMode: BufferUsageMode Array;
            mappingFlags: BufferMappingFlags DynamicStorage;
            stride: MeshVertex instanceSize;
            yourself
        ) initialData: nil.

        vertexLayout ifNil: {
            let layoutDescription := VertexLayoutDescription()
                addAttribute: (VertexAttributeDescription()
                    location: 0;
                    format: PixelFormat R32G32_Float;
                    offset: 0;
                    yourself);
                addAttribute: (VertexAttributeDescription()
                    location: 2;
                    format: PixelFormat R32G32_Float;
                    offset: 8;
                    yourself);
                addAttribute: (VertexAttributeDescription()
                    location: 1;
                    format: PixelFormat R32G32B32A32_Float;
                    offset: 16;
                    yourself);
                addBufferWithStride: MeshVertex instanceSize;
                yourself.

            vertexLayout := device getDefaultVertexLayoutCache getOrCreateWithDescription: layoutDescription.
            vertexBinding := device createVertexBindingFor: vertexLayout.
        }.

        let vertexBuffers mutable := BufferRef array (vertexBuffer).
        vertexBinding bindVertexBuffers: vertexBuffers.
    }.

    method submitIndices => Boolean8 := {
        let requiredSize := meshBuilder indices size * 2.
        indexBuffer isNil || requiredSize > indexBuffer size ifTrue: {
            self createIndexBufferWithCapacity: meshBuilder indices size.
            indexBuffer ifNil: {
                return: false.
            }
        }.

        requiredSize > 0 ifTrue: {
            indexBuffer uploadAt: 0 size: requiredSize data: meshBuilder indices data
        }.

        true
    }.

    method createIndexBufferWithCapacity: (requiredCapacity: UIntPointer) ::=> Void := {
        let newCapacity := (requiredCapacity asLargerPowerOfTwo max: 16)*2.
        indexBuffer := device createBuffer: (BufferDescription()
            size: newCapacity;
            heapType: MemoryHeapType HostToDevice;
            usageModes: BufferUsageMode ElementArray;
            mainUsageMode: BufferUsageMode ElementArray;
            mappingFlags: BufferMappingFlags DynamicStorage;
            stride: 2;
            yourself
        ) initialData: nil.
    }.

    method submitMatrices => Boolean8 := {
        transformationStateBuffer ifNil: {
            let shaderSignatureDescription := ShaderSignatureDescription()
                ## Sampling state.
                addBank: (ShaderSignatureBankDescription()
                    addElementWithType: ShaderBindingType Sampler;
                    yourself
                );

                ## Transformation state.
                addBank: (ShaderSignatureBankDescription()
                    addElementWithType: ShaderBindingType UniformBuffer;
                    yourself
                );

                ## Texturing state.
                addBank: (ShaderSignatureBankDescription()
                    addElementWithType: ShaderBindingType SampledImage;
                    yourself
                );
                yourself.
            shaderSignature := device getDefaultShaderSignatureCache getOrCreateWithDescription: shaderSignatureDescription.

            sampler := device createSampler: (SamplerDescription()
                filter: TextureFilter MinLinear | TextureFilter MagLinear | TextureFilter MipmapLinear;
                addressU: TextureAddressMode Wrap;
                addressV: TextureAddressMode Wrap;
                addressW: TextureAddressMode Wrap;
                maxLod: 10000.0f;
                yourself).

            samplingStateBinding := shaderSignature createShaderResourceBindings: 0.
            samplingStateBinding bindOn: 0 sampler: sampler.

            transformationStateBuffer := device createBuffer: (BufferDescription()
                size: 256;
                heapType: MemoryHeapType HostToDevice;
                usageModes: BufferUsageMode Uniform;
                mainUsageMode: BufferUsageMode Uniform;
                mappingFlags: BufferMappingFlags DynamicStorage;
                stride: 0;
                yourself
            ) initialData: nil.

            transformationStateBinding := shaderSignature createShaderResourceBindings: 1.
            transformationStateBinding bindOn: 0 uniformBuffer: transformationStateBuffer.
        }.

        {
            let transformationState mutable := TransformationState()
                projectionMatrix: (Float32x4x4 reverseDepthOrthoLeft: 0 right: extent x
                    bottom: extent y top: 0
                    near: -100.0f far: 100.0f
                    invertedY: device shouldInvertProjectionY);
                yourself.
            transformationStateBuffer uploadAt: 0 size: TransformationState instanceSize data: transformationState address
        }.

        true.
    }.

    method getOrCreateTextureBindingFor: (textureView: TextureViewRef const ref) ::=> ShaderResourceBindingsRef := {
        texturingBindingDictionary at: textureView rcObjectAddress ifAbsentPut: { :: ShaderResourceBindingsRef |
            nextAvailableTexturingBindings >= texturingBindings size ifTrue: {
                texturingBindings add: (shaderSignature createShaderResourceBindings: 2)
            }.

            let result := texturingBindings[nextAvailableTexturingBindings].
            result bindOn: 0 sampledTextureView: textureView.
            nextAvailableTexturingBindings := nextAvailableTexturingBindings + 1.
            result
        }
    }.

}.

compileTime constant StateTracker2DSceneRendererRef := StateTracker2DSceneRenderer rcRef.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
