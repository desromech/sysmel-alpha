namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Std Math Geometry.

#**
 * I am a texture atlas font face size. I put a bunch font
 *#
class TextureAtlasFontFaceWithSize superclass: RenderingDeviceFontFaceWithSize; definition: {
    compileTime constant FontTextureWidth := 2048.

    private field originalFontFace type: FontFaceWithSizeRef.
    private field device type: RenderingDeviceWeakRef.

    private field hasConvertedLatin1Set type: Boolean8.
    private field mutex type: Std Mutex.
    private field codePointDictionary type: Std Collections Dictionary(Char32, GlyphRef).
    private field adaptedGlyphs type: Std Collections Dictionary(GlyphRef, GlyphRef).

    private field fontFaceForm type: FormRef.
    private field hasValidTexture type: Boolean8.
    private field texture type: TextureRef.
    private field textureView type: TextureViewRef.

    private field destinationPosition type: UInt32x2.
	private field currentRowMaxHeight type: UInt32.

    override method initialize => Void := {
        destinationPosition := 1.
    }.

    method increaseHeighTo: (newHeight: UInt32) ::=> Void := {
        let newFontFaceForm := Form extent: UInt32x2(FontTextureWidth, newHeight) pixelFormat: PixelFormat R8_UNorm.
        fontFaceForm ifNotNil: {
            let sourceBlitter := fontFaceForm makeBlitter.
            newFontFaceForm makeBlitter copyPixelsFrom: sourceBlitter at: sourceBlitter clippedBounds into: 0
        }.

        fontFaceForm := newFontFaceForm.
        texture := nil.
        textureView := nil.
    }.

    method ensureSpaceFor: (glyphExtent: UInt32x2) ::=> Void := {
    	destinationPosition x + glyphExtent x + 1 > FontTextureWidth ifTrue: {
            destinationPosition := UInt32x2(1, destinationPosition y + currentRowMaxHeight + 1).
    		currentRowMaxHeight := 0.
    	}.

        currentRowMaxHeight := currentRowMaxHeight max: glyphExtent y.
        fontFaceForm isNil || fontFaceForm extent y < currentRowMaxHeight ifTrue: {
            self increaseHeighTo: (destinationPosition y + currentRowMaxHeight + 1) asLargerPowerOfTwo
        }.

    }.

    method createAdaptedGlyph: (originalGlyph: GlyphRef const ref) ::=> GlyphRef := {
        let originalGlyphForm := originalGlyph asForm.
        originalGlyphForm ifNil: {
            return: GlyphRef nil
        }.

        ## Make the space for the next glyph.
        self ensureSpaceFor: originalGlyphForm extent.

        ## Copy the glyph.
        {
            let sourceBlitter mutable := originalGlyphForm makeBlitter.
            sourceBlitter pixelFormat: PixelFormat R8_UNorm.
            fontFaceForm makeBlitter copyPixelsFrom: sourceBlitter at: sourceBlitter clippedBounds into: (destinationPosition castTo: Int32x2)
        }.

        let atlasRectangle := RectangleF32 min: (destinationPosition castTo: Float32x2) extent: (originalGlyphForm extent castTo: Float32x2).

        ## Advance the position.
        destinationPosition := destinationPosition + UInt32x2(originalGlyphForm extent x + 1, 0).

        ## Invalidate the texture.
        hasValidTexture := false.
        TextureAtlasGlyph new
            initializeAdaptingFrom: originalGlyph inAtlasLocation: atlasRectangle;
            upCastFor: Glyph
    }.

    method getOrCreateAdaptedGlyph: (originalGlyph: GlyphRef const ref) ::=> GlyphRef := {
        originalGlyph ifNil: {
            return: originalGlyph
        }.

        adaptedGlyphs at: originalGlyph ifPresent: {:(GlyphRef ref)existent :: Void |
            return: existent
        }.

        let adapted := self createAdaptedGlyph: originalGlyph.
        adaptedGlyphs at: originalGlyph put: adapted.
        adapted
    }.

    override method getOrCreateGlyphForCodePoint: (codePoint: Char32) ::=> GlyphRef := {
        mutex withLock: {
            hasConvertedLatin1Set ifFalse: {
                0 until: 255 do: {:(Char32)i :: Void |
                    self convertNewGlyphForCodePoint: i.
                }.
                hasConvertedLatin1Set := true.
            }.

            codePointDictionary at: codePoint ifPresent: {:(GlyphRef ref)existent :: Void |
                return: existent
            }.

            self convertNewGlyphForCodePoint: codePoint
        }.
    }.

    method convertNewGlyphForCodePoint: (codePoint: Char32) ::=> GlyphRef := {
        let originalGlyph := originalFontFace getOrCreateGlyphForCodePoint: codePoint.
        originalGlyph ifNil: {
            codePointDictionary at: codePoint put: GlyphRef nil.
            return: GlyphRef nil
        }.

        let adaptedGlyph := self getOrCreateAdaptedGlyph: originalGlyph.
        codePointDictionary at: codePoint put: adaptedGlyph.

        adaptedGlyph
    }.

    method initializeWith: (theOriginalFontFace: FontFaceWithSizeRef) for: (theDevice: RenderingDeviceWeakRef const ref) ::=> Void := {
        originalFontFace := theOriginalFontFace.
        device := theDevice.

        maxAdvance := originalFontFace maxAdvance.
        ascender := originalFontFace ascender.
        descender := originalFontFace descender.
        height := originalFontFace height.
        underlinePosition := originalFontFace underlinePosition.
        underlineThickness := originalFontFace underlineThickness.
    }.

    method validateTextureAndView => Void := {
        fontFaceForm ifNil: {return: void}.

        texture ifNil: {
            let strongDevice := device asRCRef.
            strongDevice ifNotNil: {
                texture := strongDevice createTexture: (TextureDescription()
                    type: TextureType Texture2D;
                    width: fontFaceForm extent x;
                    height: fontFaceForm extent y;
                    depth: 1;
                    layers: 1;
                    miplevels: 1;
                    format: PixelFormat R8_UNorm;
                    usageModes: TextureUsageMode CopyDestination | TextureUsageMode Sampled;
                    mainUsageMode: TextureUsageMode Sampled;
                    heapType: MemoryHeapType DeviceLocal;
                    sampleCount: 1;
                    sampleQuality: 0;
                    yourself).
                texture ifNotNil: {
                    textureView := texture getOrCreateFullView
                }.
            }.
        }.

        texture ifNotNil: {
            texture uploadTextureLevel: 0 layer: 0
                pitch: (fontFaceForm pitch castTo: Int32) slicePitch: (fontFaceForm pitch * fontFaceForm extent y castTo: Int32)
                data: fontFaceForm pixels getPointer
        }.

        hasValidTexture := true.
    }.

    override method validRenderingTextureAndView => (TextureRef -- TextureViewRef) := {

        mutex withLock: {
            hasValidTexture ifFalse: {
                self validateTextureAndView.
            }.

            return: (texture, textureView)
        }
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
