namespace Stdn definition: {
namespace Graphics definition: {
namespace GUI definition: {

useNamespace: Stdn Graphics Core.
useNamespace: SDL2.
useNamespace: Stdn Graphics Driver SoftRenderer.

class SDL2SoftwareRendererSwapChain superclass: SoftSwapChain; definition: {
    protected field window type: SDL2Window pointer.
    protected field rendererHandle type: SDL_Renderer pointer.
    protected field textureHandle type: SDL_Texture pointer.
    protected field textureExtent type: UInt32x2.

    meta method for: (window: SDL2Window ref) ::=> SDL2SoftwareRendererSwapChain sharedPointer := {
        let renderer := SDL_CreateRenderer(window handle, -1, SDL_RENDERER_PRESENTVSYNC).
        renderer ifNil: {
            return: SDL2SoftwareRendererSwapChain sharedPointer nil
        }.

        let result := SDL2SoftwareRendererSwapChain sharedNew.
        result _ initializeWithWindow: window address handle: renderer.
        result.
    }.

    method initializeWithWindow: (theWindow: SDL2Window pointer) handle: (theRenderer: SDL_Renderer pointer) ::=> Void := {
        window := theWindow.
        rendererHandle := theRenderer.
    }.

    override method presentColorbuffer: (colorBuffer: SoftTextureViewPtr const ref) ::=> SwapChainPresentationError := {
        self validateTexture.

        ## Copy the pixels.
        {
            let pixels mutable type: UInt8 pointer.
            let pitch mutable type: Int32.

            SDL_LockTexture(textureHandle, nil, pixels address reinterpretCastTo: Void pointer pointer, pitch address) = 0 ifFalse: {
                return: SwapChainPresentationError Error.
            }.

            let destBlitter := Blitter newValue
                extent: textureExtent;
                pitch: pitch;
                pixelFormat: PixelFormat B8G8R8A8_UNormSRGB;
                pixels: pixels;
                applyFullClippingBounds;
                initializeCachedState;
                yourself.
            let sourceBlitter ref := colorBuffer _ pixelsBlitter.
            destBlitter copyPixelsFrom: sourceBlitter at: sourceBlitter clippedBounds into: Int32x2 zeros.
            SDL_UnlockTexture(textureHandle).
        }.

        ## Copy the texture
        SDL_RenderCopy(rendererHandle, textureHandle, nil, nil).

        ## Present the rendering output.
        SDL_RenderPresent(rendererHandle).

        SwapChainPresentationError Ok.
    }.

    override method finalize => Void := {
        self destroy.
    }.

    method destroy => Void := {
        textureHandle ifNotNil: {
            SDL_DestroyTexture(textureHandle).
            rendererHandle := nil.
        }.

        rendererHandle ifNotNil: {
            SDL_DestroyRenderer(rendererHandle).
            rendererHandle := nil.
        }.

        window := nil.
    }.

    method validateTexture => Void := {
        textureHandle ifNotNil: {
            return: void
        }.

        textureExtent := creationInfo extent.
        textureHandle := SDL_CreateTexture(rendererHandle, SDL_PIXELFORMAT_BGRA32, SDL_TEXTUREACCESS_STREAMING, textureExtent x castTo: Int32, textureExtent y castTo: Int32).
    }.

}.

}. ## End of namespace GUI
}. ## End of namespace Graphics
}. ## End of namespace Stdn
