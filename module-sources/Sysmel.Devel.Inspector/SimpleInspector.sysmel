namespace Smalltalk definition: {
useNamespace: Norphic.

ProtoObject definition: {
    method simpleInspectorEmitItemsInto: inspector := {
        self
    }.
}.

Collection definition: {
    method simpleInspectorEmitItemsInto: inspector := {
        self doWithIndex: {:each :index :: Void |
            inspector addKey: index value: each
        }.
        self
    }.
}.

gcclass SimpleInspector definition: {
    public field inspectedObject.
    protected field norphicWindow type: SystemWindowNorph rcPointer.

    protected field label type: LabelNorph rcPointer.
    protected field listView type: ListViewNorph rcPointer.
    protected field evaluationEditor type: TextAreaNorph rcPointer.

    meta definition: {
        method openOn: anObject
            := self new
                openOn: anObject;
                yourself
    }.

    method createWidgets := {
        label := LabelNorph rcNew.
        listView := ListViewNorph rcNew.
        evaluationEditor := TextAreaNorph rcNew.
        self
    }.

    method initializePresentation := {
        label _ text: ((inspectedObject printStringLimitedTo: 30) castTo: String) asStdnMutableString.
        inspectedObject simpleInspectorEmitItemsInto: self.
        self
    }.

    method addKey: key value: value := {
        listView _ addItem: (key asString -- ": " -- value printString) asStdnMutableString.
        ##Std stdout << "Inspector add key " << key << " value " << value; nl.
        self.
    }.

    method buildLayout := {
        norphicWindow _
            buildLayoutWith: {:b :: Void |
                b verticalPanedWith: {:b :: Void |
                    b
                        verticalBoxWith: {:b :: Void |
                            b
                                element: label with: {:c :: Void | c allBorders; borderSize: 2};
                                element: listView with: {:c :: Void | c expanded; allBorders; borderSize: 2; proportion: 1.0f}
                        };
                        element: evaluationEditor
                }.
            };
            autolayout: true;
            updateLayout.
        self
    }.

    method openOn: anObject := {
        self
            inspectedObject: anObject;
            open
    }.

    method open := {
        norphicWindow := SystemWindowNorph createFor: Std Graphics GUI WindowSystem activeWindowSystem
            title: "Inspector" asMutableString extent: Int32x2(400, 400).
        self
            createWidgets;
            buildLayout;
            initializePresentation.
        self
    }.

    method close := {
        norphicWindow ifNotNil: {
            norphicWindow _ destroy.
            norphicWindow reset
        }.

        self
    }.
}.

Object definition: {
    method inspect
        := SimpleInspector openOn: self
}.

}.
