namespace Stdn definition: {
namespace Math definition: {
namespace Geometry definition: {

sealed template GenericRectangle(ST: Type)
    := class superclass: GenericGeometricShape(ST); definition: {
    public field min type: Vector2.
    public field max type: Vector2.

    meta definition: {
        const inline method min: (theMinCorner: Vector2) max: (theMaxCorner: Vector2) ::=> Rectangle
            := Rectangle basicNewValue min: theMinCorner; max: theMaxCorner; yourself.

        const inline method empty ::=> Rectangle
            := self min: Vector2 infinityOrMaxValue max: Vector2 negativeInfinityOrMinValue.

        const inline method center: (theCenter: Vector2) halfExtent: (theHalfExtent: Vector2) ::=> Rectangle
            := self min: theCenter - theHalfExtent max: theCenter + theHalfExtent.

        const inline method center: (theCenter: Vector2) extent: (theExtent: Vector2) ::=> Rectangle
            := self center: theCenter halfExtent: theExtent / 2.

        const inline method extent: (theExtent: Vector2) ::=> Rectangle
            := self min: Vector2 zeros max: theExtent.

        const inline method min: (theMinCorner: Vector2) extent: (theExtent: Vector2) ::=> Rectangle
            := self min: theMinCorner max: theMinCorner + theExtent.
    }.

    const inline method center => Vector2
        := min + (max - min) / (2 castTo: Scalar).

    const inline method halfExtent => Vector2
        := (max - min) / (2 castTo: Scalar).

    const inline method extent => Vector2
        := max - min.

    inline method bottomLeft => Vector2
        := min.

    inline method bottomRight => Vector2
        := Vector2 x: max x y: min y .

    inline method topRight => Vector2
        := max.

    inline method topLeft => Vector2
        := Vector2 x: min x y: max y .

    const inline method translatedBy: (translation: Vector2) ::=> SelfType
        := SelfType min: min + translation max: max + translation.

    const inline method isEmpty ::=> Boolean8
        := min x > max x || min y > max y.

    const inline method includesPoint: (point: Vector2) ::=> Boolean8
        := (min x <= point x && point x <= max x) &&
           (min y <= point y && point y <= max y).

    const inline method includesRectangle: (other: Rectangle const ref) ::=> Boolean8
        := (min x <= other min x && other max x <= max x) &&
           (min y <= other min x && other max x <= max y).

    const inline method includesPointExclusively: (point: Vector2) ::=> Boolean8
        := (min x <= point x && point x < max x) &&
           (min y <= point y && point y < max y).

    const inline method includesRectangleExclusively: (other: Rectangle const ref) ::=> Boolean8
        := (min x <= other min x && other max x < max x) &&
           (min y <= other min x && other max x < max y).

    const inline method intersectionWith: (other: Rectangle const ref) ::=> SelfType
        := SelfType min: (min max: other min) max: (max min: other max).

    const inline method unionWith: (other: Rectangle const ref) ::=> SelfType
        := SelfType min: (min min: other min) max: (max max: other max).

    const inline method unionWith: (other: Vector2 const ref) ::=> SelfType
        := SelfType min: (min min: other) max: (max max: other).

    compileTime if: Scalar isPrimitiveFloatType then: {
        method intersectionWithRay: (ray: Ray2d const ref) ::=> ParametricCurveIntersectionResult := {
            ## Slab testing algorithm from: A Ray-Box Intersection Algorithm andEfficient Dynamic Voxel Rendering. By Majercik et al

            let t0 := (min - ray origin)*ray inverseDirection.
            let t1 := (max - ray origin)*ray inverseDirection.
            let tmin := t0 min: t1.
            let tmax := t0 max: t1.
            let maxTMin := (tmin x max: tmin y) max: ray tmin.
            let minTMax := (tmax x min: tmax y) min: ray tmax.

            let hasIntersection := maxTMin <= minTMax.
            hasIntersection ifFalse: {
                return: ParametricCurveIntersectionResult empty.
            }.


            return: (ParametricCurveIntersectionResult with: (maxTMin min: minTMax))
        }.

        method hasIntersectionWithRay: (ray: Ray2d const ref) ::=> Boolean8
            := (self intersectionWithRay: ray) isPresent.

        method computePenetrationNormalAndDistanceForPoint: (point: Vector2) ::=> (Vector2 -- Scalar) := {
            let delta := point - self center.
            let deltaAbsolute := delta abs / self halfExtent.
            let normal := deltaAbsolute x >= deltaAbsolute y ifTrue: {
                Vector2(delta x sign, 0)
            } ifFalse: {
                Vector2(0, delta y sign)
            }.

            let penetrationDistance := delta - self halfExtent*normal dot: normal.
            (normal, penetrationDistance)
    	}.

    }.
}.

compileTime constant RectangleI32 := GenericRectangle(Int32).
compileTime constant RectangleF32 := GenericRectangle(Float32).
compileTime constant RectangleF64 := GenericRectangle(Float64).

} ## End of namespace Geometry
} ## End of namespace Math
} ## End of namespace Stdn
