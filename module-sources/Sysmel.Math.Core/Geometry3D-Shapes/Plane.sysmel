namespace Stdn definition: {
namespace Math definition: {
namespace Geometry definition: {

#**
 * I represent an implicit line plane equation of the form:
 * <N, P> = d.
 * => Nx X1 + Ny X2 + Nz X3 - d = 0
 *#
sealed template GenericPlane(ST: Type)
    := class superclass: GenericGeometricShape(ST); definition: {

    public field normal type: Vector3.
    public field distance type: Scalar.

    meta definition: {
        static inline method normal: (theNormal: Vector3) distance: (theDistance: Scalar) ::=> InstanceType
            := InstanceType() normal: theNormal; distance: theDistance; yourself.

        static inline method point: (firstPoint: Vector3) point: (secondPoint: Vector3) point: (thirdPoint: Vector3) ::=> InstanceType := {
            let u := secondPoint - firstPoint.
            let v := thirdPoint - firstPoint.
            let n := (u cross: v) normalized.
            let d := n dot: firstPoint.
            InstanceType normal: n distance: d
        }.
    }.

    const inline method pointDistance: (point: Vector3 const ref) ::=> Scalar
        := (normal dot: point) - distance.

    const inline method isInFront: (point: Vector3 const ref) ::=> Boolean8
        := (self pointDistance: point) > 0.

    const inline method isBehind: (point: Vector3 const ref) ::=> Boolean8
        := (self pointDistance: point) < 0.

}.

compileTime constant PlaneF32 := GenericPlane(Float32).
compileTime constant PlaneF64 := GenericPlane(Float64).

} ## End of namespace Geometry
} ## End of namespace Math
} ## End of namespace Stdn
