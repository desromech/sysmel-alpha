namespace Std definition: {
namespace Math definition: {
namespace LinearAlgebra definition: {

sealed template GenericAffineTransform2d(ST: Type)
    := class superclass: GenericLinearAlgebra(ST); definition: {
    public field matrix type: Matrix2x2.
    public field translation type: Vector2.

    const inline method asMatrix2x3 => Matrix2x3
        := Matrix2x3(matrix firstColumn, matrix secondColumn, translation).

    const inline method asMatrix3x3 => Matrix3x3
        := Matrix3x3(Vector3(matrix firstColumn, 0), Vector3(matrix secondColumn, 0), Vector3(translation, 1)).

    inline method setIdentity => Void := {
        matrix := Matrix2x2 identity.
        translation := Vector2 zeros.
    }.

    const inline method isTranslationOnly => Boolean8
        := matrix isIdentity.

    inline method translateBy: (newTranslation: Vector2) ::=> Void := {
        translation := newTranslation + translation.
    }.

    inline method applyMatrix: (newMatrix: Matrix2x2) ::=> Void := {
        matrix := newMatrix * matrix.
        translation := newMatrix * translation.
    }.

    inline method transformWith: (other: SelfType const ref) ::=> Void := {
        let newMatrix := other matrix * matrix.
        let newTranslation := translation + (other matrix * other translation).

        matrix := newMatrix.
        translation := newTranslation.
    }.

    inline method scaleBy: (scale: Vector2) ::=> Void := {
        self applyMatrix: (Matrix2x2 scale: scale)
    }.

    compileTime if: Scalar isPrimitiveFloatType then: {
        inline method rotateByRadians: (angle: Scalar) ::=> Void := {
            self applyMatrix: (Matrix2x2 rotation: angle)
        }.

        inline method rotateByDegrees: (angle: Scalar) ::=> Void := {
            self rotateByRadians: angle degreesToRadians
        }.
    }.

    const inline method transformVector: (vector: Vector2) ::=> Vector2
        := matrix * vector.

    const  inline method transformPoint: (point: Vector2) ::=> Vector2
        := matrix * point + translation.

    macro method restoreAfter: aBlock := {
        let oldTransform := __astBuilder gensym: #oldTransform.
        ``{
            let `,oldTransform := `,self.
            try: `,aBlock finally: {
                `,self := `,oldTransform
            }.
        } asSequenceWithoutLexicalScope
    }.
}.

compileTime constant AffineTransform2dI32 := GenericAffineTransform2d(Int32).
compileTime constant AffineTransform2dF32 := GenericAffineTransform2d(Float32).
compileTime constant AffineTransform2dF64 := GenericAffineTransform2d(Float64).

} ## End of namespace LinearAlgebra
} ## End of namespace Math
} ## End of namespace Std
