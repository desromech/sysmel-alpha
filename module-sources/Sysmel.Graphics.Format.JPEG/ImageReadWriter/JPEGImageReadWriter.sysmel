namespace Stdn definition: {
namespace Graphics definition: {
namespace ImageFormats definition: {

useNamespace: Stdn Graphics Core.
useNamespace: LibJPEG.

compileTime constant JPEGInputBufferSize := 4096.
compileTime constant JPEGOutputBufferSize := 4096.

class JPEGError superclass: Error; definition: {

}.

function jpegErrorRaiseFunction(cinfo: j_common_ptr) => Void := {
    cinfo _ err _ output_message(cinfo).

    let exception mutable := JPEGError().
    exception signal
}.

struct JPEGStreamSource definition: {
    public field pub type: jpeg_source_mgr.
    public field stream type: Stdn IO Stream pointer.
    public field buffer type: UInt8 pointer.
    public field startOfFile type: Boolean8.
}.

function jpegInitSource(cinfo: j_decompress_ptr) => Void := {
    let source := cinfo _ src reinterpretCastTo: JPEGStreamSource pointer.
    source _ startOfFile: true.
}.

function jpegFillInputBuffer(cinfo: j_decompress_ptr) => Int32 := {
    let source := cinfo _ src reinterpretCastTo: JPEGStreamSource pointer.
    let readedCount mutable := source _ stream _ read: source _ buffer size: JPEGInputBufferSize.
    readedCount <= 0 ifTrue: {
        source _ startOfFile ifTrue: {
            Stdn stderr << "Empty jpeg file"; nl.
            jpegErrorRaiseFunction(cinfo)
        }.

        ## Insert fake EOI.
        source _ buffer[0] := 16rff.
        source _ buffer[1] := JPEG_EOI.
        readedCount := 2.
    }.

    source _ pub
        next_input_byte: source _ buffer;
        bytes_in_buffer: (readedCount castTo: UIntPointer).
    source _ startOfFile: false.
    1
}.

function jpegSkipInputData(cinfo: j_decompress_ptr, byteCount: CTypes Long) => Void := {
    let source := cinfo _ src.
    byteCount < 0 ifTrue: {return: void}.

    let remainingByteCount mutable := byteCount castTo: UIntPointer.
    while: remainingByteCount > source _ bytes_in_buffer do: {
        remainingByteCount := remainingByteCount - source _ bytes_in_buffer.
        source _ fill_input_buffer(cinfo).
    }.

    source _
        next_input_byte: source _ next_input_byte + remainingByteCount;
        bytes_in_buffer: source _ bytes_in_buffer - remainingByteCount
}.

function jpegTermSource(cinfo: j_decompress_ptr) => Void := {
    ## Nothing is required here.
}.

function setJpegStreamSource(cinfo: j_decompress_ptr, stream: Stdn IO Stream pointer) => Void := {
    let source := cinfo _ mem _ alloc_small(cinfo, JPOOL_PERMANENT, JPEGStreamSource instanceSize) reinterpretCastTo: JPEGStreamSource pointer.
    source _
        stream: stream;
        buffer: (cinfo _ mem _ alloc_small(cinfo, JPOOL_PERMANENT, JPEGInputBufferSize) reinterpretCastTo: UInt8 pointer);
        startOfFile: false.
    source _ pub
        init_source: jpegInitSource address;
        fill_input_buffer: jpegFillInputBuffer address;
        skip_input_data: jpegSkipInputData address;
        resync_to_restart: jpeg_resync_to_restart address;
        term_source: jpegTermSource address;
        bytes_in_buffer: 0;
        next_input_byte: nil.

    cinfo _ src: source _ pub address.
}.

struct JPEGStreamDestination definition: {
    public field pub type: jpeg_destination_mgr.
    public field stream type: Stdn IO Stream pointer.
    public field buffer type: UInt8 pointer.
}.

function jpegInitDestination(cinfo: j_compress_ptr) => Void := {
    let destination := cinfo _ dest reinterpretCastTo: JPEGStreamDestination pointer.
    destination _ pub
        next_output_byte: destination _ buffer;
        free_in_buffer: JPEGOutputBufferSize.
}.

function jpegEmptyOutputBuffer(cinfo: j_compress_ptr) => Int32 := {
    let destination := cinfo _ dest reinterpretCastTo: JPEGStreamDestination pointer.
    let succeeded := (destination _ stream _ write: destination _ buffer size: JPEGOutputBufferSize) = JPEGOutputBufferSize.

    destination _ pub
        next_output_byte: destination _ buffer;
        free_in_buffer: JPEGOutputBufferSize.
    succeeded ifFalse: {
        jpegErrorRaiseFunction(cinfo).
    }.

    1
}.

function jpegTermDestination(cinfo: j_compress_ptr) => Void := {
    jpegEmptyOutputBuffer(cinfo).
    let destination := cinfo _ dest reinterpretCastTo: JPEGStreamDestination pointer.

    let toWriteCount := (JPEGOutputBufferSize castTo: UIntPointer) - destination _ pub free_in_buffer.
    toWriteCount > 0 ifTrue: {
        destination _ stream _ write: destination _ buffer size: toWriteCount.
    }.

    destination _ stream _ flush
}.

function setJpegStreamDestination(cinfo: j_compress_ptr, stream: Stdn IO Stream pointer) => Void := {
    let destination := cinfo _ mem _ alloc_small(cinfo, JPOOL_PERMANENT, JPEGStreamDestination instanceSize) reinterpretCastTo: JPEGStreamDestination pointer.
    destination _
        stream: stream;
        buffer: (cinfo _ mem _ alloc_small(cinfo, JPOOL_PERMANENT, JPEGOutputBufferSize) reinterpretCastTo: UInt8 pointer).
    destination _ pub
        init_destination: jpegInitDestination address;
        empty_output_buffer: jpegEmptyOutputBuffer address;
        term_destination: jpegTermDestination address.

    cinfo _ dest: destination _ pub address.
}.

class JPEGImageReadWriter superclass: ImageReadWriter; definition: {
    const override method supportsExtension: (extension: Char8 const arraySlice) ::=> Boolean8
        := extension = "jpeg" || extension = "jpg".

    const override method supportsMimeType: (mimeType: Char8 const arraySlice) ::=> Boolean8
        := mimeType = "image/jpeg".

    const override method readFormFromStream: (inputStream: Stdn IO Stream ref) ::=> FormPtr := {
        let cinfo mutable := jpeg_decompress_struct().
        let jerr mutable := jpeg_error_mgr().

        cinfo err: jpeg_std_error(jerr address).
        jerr error_exit: jpegErrorRaiseFunction address.

        let result mutable := FormPtr nil.
        try:
        {
            jpeg_create_decompress(cinfo address).

            ## Create the source.
            setJpegStreamSource(cinfo address, inputStream address).

            ## Read the header.
            jpeg_read_header(cinfo address, 1).

            ## Read the width, height and compute the form pixel format.
            let width := cinfo image_width castTo: UInt32.
            let height := cinfo image_height castTo: UInt32.
            let numComponents := cinfo num_components castTo: UInt32.
            let pixelFormat := cinfo num_components selectCase: #{
            1 : PixelFormat R8_UNorm.
            3 : PixelFormat R8G8B8_UNormSRGB.
            _ : (return: FormPtr nil)
            }.

            ## Start the decompression.
            jpeg_start_decompress(cinfo address).

            let destPitch := width * pixelFormat bytesPerPixel.

            result := Form sharedNew.
            result _
                extent: UInt32x2(width, height);
                pitch: destPitch;
                pixelFormat: pixelFormat.
            result _ pixels reset: (Stdn zmalloc(destPitch * height) reinterpretCastTo: UInt8 pointer).

            let rowBuffer := cinfo mem _ alloc_sarray(cinfo address, JPOOL_PERMANENT, width * numComponents, 1).
            let destRow mutable := result _ pixels getPointer.
            0 until: height do: {:y :: Void |
                jpeg_read_scanlines(cinfo address, rowBuffer, 1).
                Stdn memcpy(destRow, rowBuffer[0], destPitch).
                destRow := destRow + destPitch
            }.

            jpeg_finish_decompress(cinfo address).
        } catch: JPEGError doing: {:e :: Void |
            result reset
        } finally: {
            jpeg_destroy_decompress(cinfo address).
        }.

        result
    }.

    const override method putForm: (form: Form ref) onStream: (outputStream: Stdn IO Stream ref) ::=> Void := {
        let cinfo mutable := jpeg_compress_struct().
        let jerr mutable := jpeg_error_mgr().

        cinfo err: jpeg_std_error(jerr address).
        jerr error_exit: jpegErrorRaiseFunction address.

        try:
        {
            jpeg_create_compress(cinfo address).


            ## Create the source.
            setJpegStreamDestination(cinfo address, outputStream address).

            ## Set the compression parameters.
            let sourceComponentCount := form pixelFormat componentCount.
            let sourceBytesPerPixel := form pixelFormat bytesPerPixel.
            let resultComponentCount := sourceComponentCount > 1 ifTrue: 3 ifFalse: 1.
            let resultColorSpace := sourceComponentCount > 1 ifTrue: J_COLOR_SPACE JCS_RGB ifFalse: J_COLOR_SPACE JCS_GRAYSCALE.

            cinfo
                image_width: form width;
                image_height: form height;
                input_components: resultComponentCount;
                in_color_space: resultColorSpace.
            jpeg_set_defaults(cinfo address).

            jpeg_start_compress(cinfo address, 1).

            let rowPointer mutable type: JSAMPROW.

            sourceComponentCount = 1 && sourceBytesPerPixel = 1 ||
            sourceComponentCount = 3 && sourceBytesPerPixel = 3 ifTrue: {
                while: cinfo next_scanline < cinfo image_height do: {
                    rowPointer := form pixels getPointer + form pitch * cinfo next_scanline.
                    jpeg_write_scanlines(cinfo address, rowPointer address, 1)
                }.
            } ifFalse: {
                let scanlineData mutable type: UInt8 uniquePointer.
                scanlineData reset: (Stdn zmalloc((resultComponentCount castTo: UIntPointer) * form width) reinterpretCastTo: UInt8 pointer).

                while: cinfo next_scanline < cinfo image_height do: {
                    let sourcePixel mutable := form pixels getPointer + form pitch * cinfo next_scanline.
                    let destPixel mutable := scanlineData getPointer.

                    0 until: form width do: {:x :: Void |
                        let fetchedPixel := sourceComponentCount = sourceBytesPerPixel ifTrue: {
                            let fetchedPixelComponents mutable type: (UInt8 array: 3).
                            0 until: (sourceBytesPerPixel min: 3) do: {:i :: Void |
                                fetchedPixelComponents[i] := sourcePixel[i]
                            }.

                            let swizzledPixel := form pixelFormat swizzleLoadedUnorm8x4: UInt8x4(fetchedPixelComponents[0], fetchedPixelComponents[1], fetchedPixelComponents[2], 255).
                        } ifFalse: {
                            let decodedPixel := form pixelFormat fetchFromMemory: sourcePixel.
                            (decodedPixel * 255 + 0.5f clampMin: 0 max: 255) castTo: UInt8x4.
                        }.

                        sourceComponentCount = 1 ifTrue: {
                            destPixel[0] := fetchedPixel r.
                        } ifFalse: {
                            destPixel[0] := fetchedPixel r.
                            destPixel[1] := fetchedPixel g.
                            destPixel[2] := fetchedPixel b.
                        }.

                        sourcePixel := sourcePixel + sourceBytesPerPixel.
                        destPixel := destPixel + cinfo input_components.
                    }.

                    rowPointer := scanlineData getPointer.
                    jpeg_write_scanlines(cinfo address, rowPointer address, 1)
                }.
            }.

            jpeg_finish_compress(cinfo address).
        } catch: JPEGError doing: {:e :: Void |
        } finally: {
            jpeg_destroy_compress(cinfo address).
        }.
    }.

}.

global JPEGImageReadWriterRegistration mutable type: ImageReadWriterRegisterer(JPEGImageReadWriter).

} ## End of namespace ImageFormats
} ## End of namespace Graphics
} ## End of namespace Stdn
