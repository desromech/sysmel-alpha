namespace Std definition: {
namespace Graphics definition: {
namespace Driver definition: {
namespace SoftRenderer definition: {

useNamespace: Std Graphics Core.

#**
 * I am a CPU software based rendering swap chain.
 *#
class SoftSwapChain superclass: SwapChain; definition: {
    protected field creationInfo type: SwapChainCreationInfo.
    protected field colorBuffers type: Std Collections Vector(SoftTextureViewRef).
    protected field framebuffers type: Std Collections Vector(FramebufferRef).
    protected field currentBackBufferIndex type: UInt32.

    method initializeWith: (swapChainCreationInfo: SwapChainCreationInfo const ref) for: (renderingQueue: CommandQueueRef const ref) on: (device: SoftRenderingDevice ref) ::=> Boolean8 := {
        creationInfo := swapChainCreationInfo.
        creationInfo oldSwapChain := nil.

        creationInfo
            extent: (creationInfo extent max: UInt32x2 ones);
            bufferCount: (creationInfo bufferCount max: 1).

        colorBuffers reserve: creationInfo bufferCount.
        framebuffers reserve: creationInfo bufferCount.
        0 until: creationInfo bufferCount do: {:i :: Void |
            ## Create the color buffer.
            let colorBuffer := device createTexture: (TextureDescription()
    			type: TextureType Texture2D;
    			width: creationInfo extent x;
    			height: creationInfo extent y;
    			depth: 1;
    			layers: 1;
    			miplevels: 1;
    			format: creationInfo colorBufferFormat;
    			usageModes: TextureUsageMode ColorAttachment;
    			mainUsageMode: TextureUsageMode ColorAttachment;
    			heapType: MemoryHeapType DeviceLocal;
    			sampleCount: 1;
    			yourself).
            colorBuffer ifNil: {
                return: false
            }.

    		let colorBufferTextureView := colorBuffer getOrCreateFullView.
            colorBuffers add: (colorBufferTextureView downCastFor: SoftTextureView).

            ## TODO: Create the depth buffer.
            let depthStencilView mutable := TextureViewRef nil.

            ## Create the framebuffer
            let colorAttachments mutable := TextureViewRef array(colorBufferTextureView).
            let framebuffer := device createFramebuffer: creationInfo extent colorViews: colorAttachments depthStencilView: depthStencilView.
            framebuffer ifNil: {
                return: false.
            }.

            framebuffers add: framebuffer
        }.

        true
    }.

    override method destroy => Void := {
        ## By default do nothing here.
    }.

    override method colorBufferFormat => PixelFormat := {
        creationInfo colorBufferFormat
    }.

    override method depthStencilFormat => PixelFormat := {
        creationInfo depthStencilFormat
    }.

    override method getExtent => UInt32x2
        := creationInfo extent.

    override method getLayerCount => UInt32
        := 1.

    override method swapBuffers => SwapChainPresentationError := {
        let newFrontBuffer := currentBackBufferIndex.
        currentBackBufferIndex := (currentBackBufferIndex + 1u) % framebuffers size castTo: UInt32.

        self presentColorbuffer: colorBuffers[newFrontBuffer].
    }.

    virtual method presentColorbuffer: (colorBuffer: SoftTextureViewRef const ref) ::=> SwapChainPresentationError
        := SwapChainPresentationError Ok.

    override method getCurrentBackBuffer => FramebufferRef := {
        framebuffers[currentBackBufferIndex]
    }.

    override method getCurrentBackBufferIndex => UInt32 := {
        currentBackBufferIndex
    }.

    override method getCurrentBackBufferForLayer: (layerIndex: UInt32) ::=> FramebufferRef := {
        layerIndex selectCase: #{
        0 : {self getCurrentBackBuffer}.
        _ : {FramebufferRef nil}.
        }
    }.

    override method getFramebufferCount => UInt32
        := framebuffers size castTo: UInt32.

    override method setOverlayPosition: (position: Int32x2) ::=> Void := {
        ## Not implemented.
    }
}.

compileTime constant SoftSwapChainRef := SoftSwapChain rcRef.

}. ## End of namespace SoftRenderer
}. ## End of namespace Driver
}. ## End of namespace Graphics
}. ## End of namespace Std
