namespace Std definition: {
namespace Graphics definition: {
namespace Driver definition: {
namespace SoftRenderer definition: {

useNamespace: Std Graphics Core.

#**
 * I am an specification for a vertex attribute.
 *#
class SoftVertexBinding superclass: VertexBinding; definition: {
    public field layout type: SoftVertexLayout rcPointer.

    public field buffers type: Std Collections Vector(SoftBuffer rcPointer).
    public field offsets type: Std Collections Vector(UIntPointer).
    public field bufferStartPointers type: Std Collections Vector(UInt8 const pointer).

    method initializeWithLayout: (theLayout: SoftVertexLayout rcPointer const ref) ::=> Void := {
        layout := theLayout.
        let bufferCount := layout _ strides size.
        buffers resizeTo: bufferCount.
        offsets resizeTo: bufferCount.
        bufferStartPointers resizeTo: bufferCount.
    }.

    override method getVertexLayout => VertexLayoutPtr
        := layout upCastFor: VertexLayout.

    override method bindVertexBuffers: (theVertexBuffers: VertexBuffers) ::=> Void := {
        Std assert: theVertexBuffers size = buffers size.
        0 until: buffers size do: {:i :: Void |
            buffers[i] := theVertexBuffers[i] downCastFor: SoftBuffer.
            offsets[i] := 0
        }.

        self computeBufferStartPointers.
    }.

    override method bindVertexBuffers: (theVertexBuffers: VertexBuffers) offset: (theOffsets: Offsets) ::=> Void := {
        Std assert: theVertexBuffers size = buffers size.
        Std assert: offsets size = buffers size.
        0 until: buffers size do: {:i :: Void |
            buffers[i] := theVertexBuffers[i] downCastFor: SoftBuffer.
            offsets[i] := theOffsets[i]
        }.

        self computeBufferStartPointers.
    }.

    method computeBufferStartPointers => Void := {
        0 until: buffers size do: {:i :: Void |
            let buffer ref := buffers[i].
            buffer ifNil: {
                bufferStartPointers[i] := nil
            } ifNotNil: {
                bufferStartPointers[i] := buffer _ memoryStartPointer + offsets[i]
            }
        }
    }.

    const inline method fetchVertex: (index: UInt32) instanceID: (instanceID: UInt32) into: (out: GPU NativeVertexShaderIOInterface Inputs ref) ::=> Void := {
        let strides ref := layout _ strides.

        layout _ attributes do: {:attribute :: Void |
            let vertexIndex := attribute divisor == 0
                ifTrue: {index}
                ifFalse: {instanceID / attribute divisor}.
            let attributeStride := strides[attribute bufferIndex].
            let bufferPointer := bufferStartPointers[attribute bufferIndex].

            bufferPointer ifNotNil: {
                let vertexPointer := bufferPointer + (attributeStride*vertexIndex + attribute offset).
                attribute location < 16 ifTrue: {
                    attribute format fetchFrom: vertexPointer intoShaderInput: out locations[attribute location] address
                }
            }.
        }.
    }.
}.

}. ## End of namespace SoftRenderer
}. ## End of namespace Driver
}. ## End of namespace Graphics
}. ## End of namespace Std
