namespace Std definition: {
namespace Graphics definition: {
namespace Driver definition: {
namespace SoftRenderer definition: {

useNamespace: Std Graphics Core.


#**
 * I am a CPU based rendering driver. Since I do not require special graphical support, I am constructed as a singleton.
 *#
class SoftRenderingDriver superclass: RenderingDriver; definition: {
    override method initialize => Void := {
        RenderingDriverRegistry default registerDriver: self address
    }.

    override method finalize => Void := {
        RenderingDriverRegistry default unregisterDriver: self address
    }.

    field mainDevice type: SoftRenderingDevice rcRef.

    meta definition: {
        global Singleton mutable type: SoftRenderingDriver.
    }.

    override const method isSoftRenderingDriver => Boolean8
        := true.

    override method getMainDevice => RenderingDevice rcRef := {
        mainDevice ifNil: {
            mainDevice := SoftRenderingDevice new.
        }.

        mainDevice upCastFor: RenderingDevice
    }.
}.

}. ## End of namespace SoftRenderer
}. ## End of namespace Driver
}. ## End of namespace Graphics
}. ## End of namespace Std
