namespace Std definition: {
namespace Graphics definition: {
namespace Driver definition: {
namespace SoftRenderer definition: {

useNamespace: Std Graphics Core.


#**
 * I am a CPU based rendering driver. Since I do not require special graphical support, I am constructed as a singleton.
 *#
class SoftRenderingDevice superclass: RenderingDevice; definition: {
    private field defaultCommandQueue type: CommandQueueRef.
    private field defaultShaderSignatureCache type: ShaderSignatureCacheRef.
    private field defaultVertexLayoutCache type: VertexLayoutCacheRef.
    private field defaultShaderCache type: ShaderCacheRef.
    private field defaultPipelineStateCache type: PipelineStateCacheRef.
    private field defaultFontCache type: RenderingDeviceFontCacheRef.

    override method initialize => Void := {
        defaultCommandQueue := SoftCommandQueue new upCastFor: CommandQueue.
        defaultShaderSignatureCache := self createShaderSignatureCache.
        defaultVertexLayoutCache := self createVertexLayoutCache.
        defaultShaderCache := self createShaderCache.
        defaultPipelineStateCache := self createPipelineStateCache.
        defaultFontCache := self createFontCache.
    }.

    override method isSoftRenderingDevice => Boolean8
        := true.

    override method createBuffer: (description: BufferDescription const ref) initialData: (initialData: Void const pointer) ::=> BufferRef := {
        let buffer := SoftBuffer new.
        let memory := Std zmalloc(description size).
        memory ifNil: {
            return: BufferRef nil.
        }.

        initialData ifNotNil: {
            Std memcpy(memory, initialData, description size).
        }.

        buffer initializeWithDescription: description memory: memory.
        buffer upCastFor: Buffer.
    }.

    override method createShaderSignatureBuilder ::=> ShaderSignatureBuilderRef
        := SoftShaderSignatureBuilder new upCastFor: ShaderSignatureBuilder.

    override method createShaderLibraryFromSource: (shaderModuleSource: Char8 const arraySlice) shaderLanguage: (shaderLanguage: ShaderSourceLanguage) stageType: (stageType: ShaderStageType) ::=> ShaderLibraryHandleRef
        := ShaderLibraryHandleRef nil.

    override method createShaderLibraryFromBlob: (shaderModuleBlob: UInt8 const arraySlice) ::=> ShaderLibraryHandleRef
        := ShaderLibraryHandleRef nil.

    override method createShaderLibraryFromModule: (shaderModule: GPU ShaderModuleInfo const ref) ::=> ShaderLibraryHandleRef := {
        SoftShaderLibraryHandle new
            moduleInfo: shaderModule address;
            upCastFor: ShaderLibraryHandle
    }.

    override method createShaderStageFromSource: (shaderStageSource: Char8 const arraySlice) shaderLanguage: (shaderLanguage: ShaderSourceLanguage) stageType: (stageType: ShaderStageType) ::=> ShaderStageHandleRef
        := ShaderStageHandleRef nil.

    override method createShaderStageFromBlob: (shaderStageBlob: UInt8 const arraySlice) stageType: (stageType: ShaderStageType) ::=> ShaderStageHandleRef
        := ShaderStageHandleRef nil.

    override method createShaderStageFromEntryPoint: (entryPointInfo: GPU ShaderEntryPointInfo const ref) ::=> ShaderStageHandleRef := {
        SoftShaderStageHandle new
            entryPointInfo: entryPointInfo;
            upCastFor: ShaderStageHandle
    }.

    override method createTexture: (description: TextureDescription const ref) ::=> TextureRef := {
        let result := SoftLinearTexture new.
        (result initializeWithDescription: description) ifFalse: {
            return: TextureRef nil
        }.

        result upCastFor: Texture
    }.

    override method createSampler: (description: SamplerDescription const ref) ::=> SamplerRef := {
        let result := SoftSampler new.
        (result initializeWithDescription: description) ifFalse: {
            return: SamplerRef nil
        }.

        result upCastFor: Sampler
    }.

    override method createComputePipelineState: (description: ComputePipelineStateDescription const ref) ::=> PipelineStateRef := {
        PipelineStateRef nil
    }.

    override method createGraphicsPipelineState: (description: GraphicsPipelineStateDescription const ref) ::=> PipelineStateRef := {
        let result := SoftGraphicsPipeline new
            description: description;
            yourself.
        (result fetchCachedPipelineState) ifFalse: {
            return: PipelineStateRef nil.
        }.

        result upCastFor: PipelineState.
    }.

    override method createVertexLayout => VertexLayoutRef := {
        SoftVertexLayout new upCastFor: VertexLayout
    }.

    override method createVertexBindingFor: (layout: VertexLayoutRef const ref) ::=> VertexBindingRef := {
        layout ifNil: {
            return: VertexBindingRef nil.
        }.

        let softwareLayout := layout downCastFor: SoftVertexLayout.
        SoftVertexBinding new
            initializeWithLayout: softwareLayout;upCastFor: VertexBinding
    }.

    override method createCommandAllocatorOfType: (type: CommandListType) for: (queue: CommandQueueRef const ref) ::=> CommandListAllocatorRef := {
        SoftCommandListAllocator new
            commandListType: type;
            upCastFor: CommandListAllocator
    }.

    override method createCommandListOfType: (type: CommandListType) for: (allocator: CommandListAllocatorRef const ref) initialPipelineState: (initialPipeline: PipelineStateRef const ref) ::=> CommandListRef := {
        allocator ifNil: {
            return: CommandListRef nil
        }.

        let softAllocator := allocator downCastFor: SoftCommandListAllocator.
        softAllocator commandListType = type ifFalse: {
            return: CommandListRef nil
        }.

        SoftCommandList new
            commandListType: type;
            upCastFor: CommandList
    }.

    override method createDeferredStateTrackerOfType: (type: CommandListType) for: (allocator: CommandListAllocatorRef const ref) ::=> StateTrackerRef := {
        let commandList := self createCommandListOfType: type for: allocator.
        commandList ifNil: {
            return: StateTrackerRef nil.
        }.

        GenericStateTracker new
            commandList: commandList;
            shaderCache: self getDefaultShaderCache;
            pipelineStateCache: self getDefaultPipelineStateCache;
            upCastFor: StateTracker
    }.

    override method createFramebuffer: (extent: UInt32x2) colorViews: (colorViews: TextureViewRef const arraySlice) depthStencilView: (depthStencilView: TextureViewRef const ref) ::=> FramebufferRef := {
        let result := SoftFramebuffer new.

        result colorAttachments reserve: colorViews size.
        result attachmentTextures reserve: colorViews size + (depthStencilView ifNil: 0u ifNotNil: 1u).
        colorViews do: {:each :: Void |
            let colorView := each downCastFor: SoftTextureView.
            colorView ifNil: {
                return: FramebufferRef nil
            }.

            result colorAttachments add: colorView.
            result attachmentTextures add: colorView texture asRCRef.
        }.

        result
            extent: extent.
        let softDepthStencilView := depthStencilView downCastFor: SoftTextureView.
        softDepthStencilView ifNotNil: {
            result depthStencilAttachment: softDepthStencilView.
            result attachmentTextures add: softDepthStencilView texture asRCRef.
        }.

        result upCastFor: Framebuffer
    }.

    override method createRenderPass: (colorAttachments: RenderPassColorAttachmentDescription const arraySlice) depthStencilAttachment: (depthStencilAttachment: RenderPassDepthStencilAttachmentDescription const pointer) ::=> RenderPassRef := {
        let result := SoftRenderPass new.
        result colorAttachments addAll: colorAttachments.
        depthStencilAttachment ifNil: {
            result hasDepthStencilAttachment: false.
        } ifNotNil: {
            result
                hasDepthStencilAttachment: true;
                depthStencilAttachment: depthStencilAttachment _.
        }.
        result
            extractColorAttachmentFormats;
            extractSampleCountAndQuality.

        result upCastFor: RenderPass
    }.

    override method getDefaultCommandQueue => CommandQueueRef const ref
        := defaultCommandQueue.

    override method createFence => FenceRef
        := SoftFence new upCastFor: Fence.

    override method createSwapChain: (swapChainCreationInfo: SwapChainCreationInfo const ref) for: (renderingQueue: CommandQueueRef const ref) ::=> SwapChainRef := {
        let result := SoftSwapChain new.
        (result initializeWith: swapChainCreationInfo for: renderingQueue on: self) ifFalse: {
            return: SwapChainRef nil
        }.

        result upCastFor: SwapChain.
    }.

    override method waitForIdle => Void := {
        defaultCommandQueue waitForIdle
    }.

    override method hasTopLeftNdcOrigin => Boolean8
        := true.

    override method hasBottomLeftTextureCoordinates => Boolean8
        := false.

    override method createFontCache => RenderingDeviceFontCacheRef
        := NullRenderingDeviceFontCache new upCastFor: RenderingDeviceFontCache.

    override method createShaderSignatureCache => ShaderSignatureCacheRef := {
        GenericShaderSignatureCache new
            device: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: ShaderSignatureCache
    }.

    override method createVertexLayoutCache => VertexLayoutCacheRef := {
        GenericVertexLayoutCache new
            device: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: VertexLayoutCache
    }.

    override method createPipelineStateCache => PipelineStateCacheRef := {
        GenericPipelineStateCache new
            device: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: PipelineStateCache
    }.

    override method createShaderCache => ShaderCacheRef := {
        GenericShaderCache new
            device: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: ShaderCache
    }.

    override method createScene2DBuilder => Scene2D BuilderRef
        := SoftScene2DBuilder new upCastFor: Scene2D Builder.

    override method getDefaultShaderSignatureCache => ShaderSignatureCacheRef const ref
        := defaultShaderSignatureCache.

    override method getDefaultVertexLayoutCache => VertexLayoutCacheRef const ref
        := defaultVertexLayoutCache.

    override method getDefaultPipelineStateCache => PipelineStateCacheRef const ref
        := defaultPipelineStateCache.

    override method getDefaultShaderCache => ShaderCacheRef const ref
        := defaultShaderCache.

    override method getDefaultFontCache => RenderingDeviceFontCacheRef const ref
        := defaultFontCache.
}.

}. ## End of namespace SoftRenderer
}. ## End of namespace Driver
}. ## End of namespace Graphics
}. ## End of namespace Std
