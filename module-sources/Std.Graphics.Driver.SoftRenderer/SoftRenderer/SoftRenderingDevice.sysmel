namespace Std definition: {
namespace Graphics definition: {
namespace Driver definition: {
namespace SoftRenderer definition: {

useNamespace: Std Graphics Core.


#**
 * I am a CPU based rendering driver. Since I do not require special graphical support, I am constructed as a singleton.
 *#
class SoftRenderingDevice superclass: RenderingDevice; definition: {
    private field defaultCommandQueue type: CommandQueuePtr.
    private field defaultShaderSignatureCache type: ShaderSignatureCachePtr.
    private field defaultVertexLayoutCache type: VertexLayoutCachePtr.
    private field defaultShaderCache type: ShaderCachePtr.
    private field defaultPipelineStateCache type: PipelineStateCachePtr.
    private field defaultFontCache type: RenderingDeviceFontCachePtr.

    override method initialize => Void := {
        defaultCommandQueue := SoftCommandQueue rcNew upCastFor: CommandQueue.
        defaultShaderSignatureCache := self createShaderSignatureCache.
        defaultVertexLayoutCache := self createVertexLayoutCache.
        defaultShaderCache := self createShaderCache.
        defaultPipelineStateCache := self createPipelineStateCache.
        defaultFontCache := self createFontCache.
    }.

    override method isSoftRenderingDevice => Boolean8
        := true.

    override method createBuffer: (description: BufferDescription const ref) initialData: (initialData: Void const pointer) ::=> BufferPtr := {
        let buffer := SoftBuffer rcNew.
        let memory := Std zmalloc(description size).
        memory ifNil: {
            return: BufferPtr nil.
        }.

        initialData ifNotNil: {
            Std memcpy(memory, initialData, description size).
        }.

        buffer _ initializeWithDescription: description memory: memory.
        buffer upCastFor: Buffer.
    }.

    override method createShaderSignatureBuilder ::=> ShaderSignatureBuilderPtr
        := SoftShaderSignatureBuilder rcNew upCastFor: ShaderSignatureBuilder.

    override method createShaderLibraryFromSource: (shaderModuleSource: Char8 const arraySlice) shaderLanguage: (shaderLanguage: ShaderSourceLanguage) stageType: (stageType: ShaderStageType) ::=> ShaderLibraryHandlePtr
        := ShaderLibraryHandlePtr nil.

    override method createShaderLibraryFromBlob: (shaderModuleBlob: UInt8 const arraySlice) ::=> ShaderLibraryHandlePtr
        := ShaderLibraryHandlePtr nil.

    override method createShaderLibraryFromModule: (shaderModule: GPU ShaderModuleInfo const ref) ::=> ShaderLibraryHandlePtr := {
        let result := SoftShaderLibraryHandle rcNew.
        result _ moduleInfo: shaderModule address.
        result upCastFor: ShaderLibraryHandle
    }.

    override method createShaderStageFromSource: (shaderStageSource: Char8 const arraySlice) shaderLanguage: (shaderLanguage: ShaderSourceLanguage) stageType: (stageType: ShaderStageType) ::=> ShaderStageHandlePtr
        := ShaderStageHandlePtr nil.

    override method createShaderStageFromBlob: (shaderStageBlob: UInt8 const arraySlice) stageType: (stageType: ShaderStageType) ::=> ShaderStageHandlePtr
        := ShaderStageHandlePtr nil.

    override method createShaderStageFromEntryPoint: (entryPointInfo: GPU ShaderEntryPointInfo const ref) ::=> ShaderStageHandlePtr := {
        let result := SoftShaderStageHandle rcNew.
        result _ entryPointInfo: entryPointInfo.
        result upCastFor: ShaderStageHandle
    }.

    override method createTexture: (description: TextureDescription const ref) ::=> TexturePtr := {
        let result := SoftLinearTexture rcNew.
        (result _ initializeWithDescription: description) ifFalse: {
            return: TexturePtr nil
        }.

        result upCastFor: Texture
    }.

    override method createSampler: (description: SamplerDescription const ref) ::=> SamplerPtr := {
        let result := SoftSampler rcNew.
        (result _ initializeWithDescription: description) ifFalse: {
            return: SamplerPtr nil
        }.

        result upCastFor: Sampler
    }.

    override method createComputePipelineState: (description: ComputePipelineStateDescription const ref) ::=> PipelineStatePtr := {
        PipelineStatePtr nil
    }.

    override method createGraphicsPipelineState: (description: GraphicsPipelineStateDescription const ref) ::=> PipelineStatePtr := {
        let result := SoftGraphicsPipeline rcNew.
        result _ description := description.
        (result _ fetchCachedPipelineState) ifFalse: {
            return: PipelineStatePtr nil.
        }.

        result upCastFor: PipelineState.
    }.

    override method createVertexLayout => VertexLayout rcPointer := {
        SoftVertexLayout rcNew upCastFor: VertexLayout
    }.

    override method createVertexBindingFor: (layout: VertexLayout rcPointer const ref) ::=> VertexBinding rcPointer := {
        layout ifNil: {
            return: VertexBinding rcPointer nil.
        }.

        let softwareLayout := layout downCastFor: SoftVertexLayout.
        let result := SoftVertexBinding rcNew.
        result _ initializeWithLayout: softwareLayout.
        result upCastFor: VertexBinding
    }.

    override method createCommandAllocatorOfType: (type: CommandListType) for: (queue: CommandQueuePtr const ref) ::=> CommandListAllocatorPtr := {
        let result := SoftCommandListAllocator rcNew.
        result _
            commandListType: type.
        result upCastFor: CommandListAllocator
    }.

    override method createCommandListOfType: (type: CommandListType) for: (allocator: CommandListAllocatorPtr const ref) initialPipelineState: (initialPipeline: PipelineStatePtr const ref) ::=> CommandListPtr := {
        allocator ifNil: {
            return: CommandListPtr nil
        }.

        let softAllocator := allocator downCastFor: SoftCommandListAllocator.
        softAllocator _ commandListType = type ifFalse: {
            return: CommandListPtr nil
        }.

        let result := SoftCommandList rcNew.
        result _
            commandListType: type.
        result upCastFor: CommandList
    }.

    override method createDeferredStateTrackerOfType: (type: CommandListType) for: (allocator: CommandListAllocatorPtr const ref) ::=> StateTrackerPtr := {
        let commandList := self createCommandListOfType: type for: allocator.
        commandList ifNil: {
            return: StateTrackerPtr nil.
        }.

        let result := GenericStateTracker rcNew.
        result _
            commandList: commandList;
            shaderCache: self getDefaultShaderCache;
            pipelineStateCache: self getDefaultPipelineStateCache.

        result upCastFor: StateTracker
    }.

    override method createFramebuffer: (extent: UInt32x2) colorViews: (colorViews: TextureViewPtr const arraySlice) depthStencilView: (depthStencilView: TextureViewPtr const ref) ::=> FramebufferPtr := {
        let result := SoftFramebuffer rcNew.

        result _ colorAttachments reserve: colorViews size.
        result _ attachmentTextures reserve: colorViews size + (depthStencilView ifNil: 0u ifNotNil: 1u).
        colorViews do: {:each :: Void |
            let colorView := each downCastFor: SoftTextureView.
            colorView ifNil: {
                return: FramebufferPtr nil
            }.

            result _ colorAttachments add: colorView.
            result _ attachmentTextures add: colorView _ texture lock.
        }.

        result _
            extent: extent.
        let softDepthStencilView := depthStencilView downCastFor: SoftTextureView.
        softDepthStencilView ifNotNil: {
            result _ depthStencilAttachment: softDepthStencilView.
            result _ attachmentTextures add: softDepthStencilView _ texture lock.
        }.

        result upCastFor: Framebuffer
    }.

    override method createRenderPass: (colorAttachments: RenderPassColorAttachmentDescription const arraySlice) depthStencilAttachment: (depthStencilAttachment: RenderPassDepthStencilAttachmentDescription const pointer) ::=> RenderPassPtr := {
        let result := SoftRenderPass rcNew.
        result _ colorAttachments addAll: colorAttachments.
        depthStencilAttachment ifNil: {
            result _ hasDepthStencilAttachment: false.
        } ifNotNil: {
            result _
                hasDepthStencilAttachment: true;
                depthStencilAttachment: depthStencilAttachment _.
        }.
        result _
            extractColorAttachmentFormats;
            extractSampleCountAndQuality.

        result upCastFor: RenderPass
    }.

    override method getDefaultCommandQueue => CommandQueuePtr const ref
        := defaultCommandQueue.

    override method createFence => FencePtr := {
        SoftFence rcNew upCastFor: Fence
    }.

    override method createSwapChain: (swapChainCreationInfo: SwapChainCreationInfo const ref) for: (renderingQueue: CommandQueuePtr const ref) ::=> SwapChainPtr := {
        let result := SoftSwapChain rcNew.
        (result _ initializeWith: swapChainCreationInfo for: renderingQueue on: self) ifFalse: {
            return: SwapChainPtr nil
        }.

        result upCastFor: SwapChain.
    }.

    override method waitForIdle => Void := {
        defaultCommandQueue _ waitForIdle
    }.

    override method hasTopLeftNdcOrigin => Boolean8
        := true.

    override method hasBottomLeftTextureCoordinates => Boolean8
        := false.

    override method createFontCache => RenderingDeviceFontCachePtr
        := NullRenderingDeviceFontCache rcNew upCastFor: RenderingDeviceFontCache.

    override method createShaderSignatureCache => ShaderSignatureCachePtr := {
        let result := GenericShaderSignatureCache rcNew.
        result _ device: (self asWeakRCPointer upCastFor: RenderingDevice).
        result upCastFor: ShaderSignatureCache
    }.

    override method createVertexLayoutCache => VertexLayoutCachePtr := {
        let result := GenericVertexLayoutCache rcNew.
        result _ device: (self asWeakRCPointer upCastFor: RenderingDevice).
        result upCastFor: VertexLayoutCache
    }.

    override method createPipelineStateCache => PipelineStateCachePtr := {
        let result := GenericPipelineStateCache rcNew.
        result _ device: (self asWeakRCPointer upCastFor: RenderingDevice).
        result upCastFor: PipelineStateCache
    }.

    override method createShaderCache => ShaderCachePtr := {
        let result := GenericShaderCache rcNew.
        result _ device: (self asWeakRCPointer upCastFor: RenderingDevice).
        result upCastFor: ShaderCache
    }.

    override method createScene2DBuilder => Scene2D BuilderRef
        := SoftScene2DBuilder new upCastFor: Scene2D Builder.

    override method getDefaultShaderSignatureCache => ShaderSignatureCachePtr const ref
        := defaultShaderSignatureCache.

    override method getDefaultVertexLayoutCache => VertexLayoutCachePtr const ref
        := defaultVertexLayoutCache.

    override method getDefaultPipelineStateCache => PipelineStateCachePtr const ref
        := defaultPipelineStateCache.

    override method getDefaultShaderCache => ShaderCachePtr const ref
        := defaultShaderCache.

    override method getDefaultFontCache => RenderingDeviceFontCachePtr const ref
        := defaultFontCache.
}.

}. ## End of namespace SoftRenderer
}. ## End of namespace Driver
}. ## End of namespace Graphics
}. ## End of namespace Std
