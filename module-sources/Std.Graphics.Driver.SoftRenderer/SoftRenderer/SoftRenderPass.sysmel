namespace Std definition: {
namespace Graphics definition: {
namespace Driver definition: {
namespace SoftRenderer definition: {

useNamespace: Std Graphics Core.
useNamespace: Std Math Geometry.

class SoftRenderPassExecutionContext definition: {
    compileTime constant MaxColorAttachmentCount := 16.

    public field renderPass type: SoftRenderPass const pointer.
    public field framebuffer type: SoftFramebuffer const pointer.
    public field extent type: UInt32x2.

    public field clippingBounds type: RectangleI32.

    public field colorAttachmentCount type: UInt32.
    public field colorAttachmentBlitters type: (Blitter array: MaxColorAttachmentCount).

    public field hasDepthStencilAttachment type: Boolean8.
    public field depthAttachmentBlitter type: Blitter.

    method startExecution => Void := {
        extent := framebuffer _ extent.

        colorAttachmentCount := (renderPass _ colorAttachments size min: MaxColorAttachmentCount) castTo: UInt32.
        0 until: colorAttachmentCount do: {:i :: Void |
            let attachmentBlitter ref := colorAttachmentBlitters[i].
            let attachmentDescription ref := renderPass _ colorAttachments[i].
            attachmentBlitter := framebuffer _ colorAttachments[i] pixelsBlitter.

            attachmentDescription beginAction = RenderPassAttachmentAction Clear ifTrue: {
                attachmentBlitter setAllPixelsToColor: attachmentDescription clearValue.
            }.
        }.

        hasDepthStencilAttachment := renderPass _ hasDepthStencilAttachment.
        hasDepthStencilAttachment ifTrue: {
            let attachmentDescription ref := renderPass _ depthStencilAttachment.
            depthAttachmentBlitter := framebuffer _ depthStencilAttachment pixelsBlitter.

            attachmentDescription beginAction = RenderPassAttachmentAction Clear ifTrue: {
                depthAttachmentBlitter setAllPixelsToColor: attachmentDescription clearValue depth.
            }.
        }.

        clippingBounds := RectangleI32 min: Int32x2 zeros max: (extent castTo: Int32x2).
    }.

    method endExecution => Void := {
        renderPass := nil.
        framebuffer := nil.
    }.
}.

#**
 * I am a CPU only implementation for a render pass.
 *#
class SoftRenderPass superclass: RenderPass; definition: {
    protected field colorAttachmentFormats type: Std Collections Vector(PixelFormat).
    protected field sampleCount type: UInt32.
    protected field sampleQuality type: UInt32.

    public field colorAttachments type: Std Collections Vector(RenderPassColorAttachmentDescription).
    public field depthStencilAttachment type: RenderPassDepthStencilAttachmentDescription.
    public field hasDepthStencilAttachment type: Boolean8.

    const method beginExecutionOn: (framebuffer: SoftFramebuffer ref) ::=> SoftRenderPassExecutionContext := {
        SoftRenderPassExecutionContext()
            renderPass: self address;
            framebuffer: framebuffer address;
            startExecution;
            yourself.
    }.

    override method setColorAttachment: (attachmentIndex: UInt32) clearValue: (clearValue: Float32x4) ::=> Void := {
        attachmentIndex < colorAttachments size ifTrue: {
            colorAttachments[attachmentIndex] clearValue: clearValue
        }
    }.

    const override method colorAttachmentFormats => PixelFormat const arraySlice
        := colorAttachmentFormats asArraySlice.

    const override method depthStencilFormat => PixelFormat := {
        hasDepthStencilAttachment ifTrue: depthStencilAttachment format ifFalse: PixelFormat Unknown.
    }.

    const override method sampleCount => UInt32
        := sampleCount.

    const override method sampleQuality => UInt32
        := sampleQuality.

    method extractColorAttachmentFormats => Void := {
        colorAttachmentFormats reserve: colorAttachments size.
        colorAttachments do: {:each :: Void |
            colorAttachmentFormats add: each format.
        }.
    }.

    method extractSampleCountAndQuality => Void := {
        sampleCount := 1u.
        sampleQuality := 0u.

        hasDepthStencilAttachment ifTrue: {
            sampleCount := depthStencilAttachment sampleCount.
            sampleQuality := depthStencilAttachment sampleQuality.
            return: void
        }.

        colorAttachments isNotEmpty ifTrue: {
            sampleCount := colorAttachments[0] sampleCount.
            sampleQuality := colorAttachments[0] sampleQuality.
            return: void
        }.
    }.
}.

}. ## End of namespace SoftRenderer
}. ## End of namespace Driver
}. ## End of namespace Graphics
}. ## End of namespace Std
