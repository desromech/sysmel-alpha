namespace Std definition: {
namespace Testing definition: {

#**
 * I a class that takes care of running tests.
 *#
class TestRunner superclass: Object; definition: {
    meta definition: {
        let defaultInstance mutable type: TestRunner uniquePointer.
        let defaultInstanceOnceCreation mutable type: Std OnceFlag.

        method defaultInstance => TestRunner ref := {
            defaultInstanceOnceCreation do: {
                defaultInstance reset: TestRunner nativeNew
            }.

            defaultInstance _
        }.
    }.

    public field errorTestCount type: UInt32.
    public field failingTestCount type: UInt32.
    public field passingTestCount type: UInt32.
    public field skippedTestCount type: UInt32.
    field isCurrentTestPassing type: Boolean8.

    method runningTestCount => UInt32
        := errorTestCount + failingTestCount + passingTestCount.

    method printReport => Void := {
        Std stdout << "==============================================="; nl.
        Std stdout << "Native test execution report:"; nl.
        Std stdout << "==============================================="; nl.
        Std stdout << "Running test count: " << self runningTestCount; nl.
        self skippedTestCount > 0 ifTrue: {
            Std stdout << "Skipped test count: " << self skippedTestCount; nl.
        }.
        self failingTestCount > 0 ifTrue: {
            Std stdout << "Failing test count: " << self failingTestCount; nl.
        }.
        self errorTestCount > 0 ifTrue: {
            Std stdout << "Error test count: " << self errorTestCount; nl.
        }.
        Std stdout << "Passing test count: " << self passingTestCount; nl.
    }.

    method runAllTests => Boolean8 := {
        let casesToRun mutable type: Std Collections Vector(Std Reflection TypeInformationRef).
       
        TestCase asTypeInformation subclasses do: {:testCaseClass :: Void |
            (testCaseClass children anySatisfy: {:(Std Reflection ProgramEntityRef const ref)child :: Boolean8 |
                self isValidUnitTestMethod: child
            }) ifTrue: {
                casesToRun add: testCaseClass
            }
        }.

        casesToRun do: {:testCase :: Void |
            self runTestCase: testCase
        }.

        self failingTestCount == 0 && self errorTestCount == 0.
    }.

    method isValidUnitTestMethod: (programEntity: Std Reflection ProgramEntityRef const ref) ::=> Boolean8
        := programEntity isMessageMethodInformation
        && (programEntity name startsWith: "test")
        && (programEntity name includes: ':') not.

    method runTestCase: (testCase: Std Reflection TypeInformationRef const ref) ::=> Void := {
        Std stdout << "--- Running test case " << testCase qualifiedName; nl.
        testCase children do: {:child :: Void |
            (self isValidUnitTestMethod: child) ifTrue: {
                self runTestCase: testCase test: (child downCastFor: Std Reflection MessageMethodInformation)
            }
        }.
    }.

    method runTestCase: (testCase: Std Reflection TypeInformationRef const ref) test: (test: Std Reflection MessageMethodInformationRef const ref) ::=> Void := {
        Std stdout << test name << "... ".
        Std stdout flush.

        isCurrentTestPassing := true.
        self runTestCase: testCase testCatchingNativeExceptions: test.
        isCurrentTestPassing ifTrue: {
            Std stdout << "Passing."; nl.
        }.

        self countPassingTest.
    }.


    method runTestCase: (testCase: Std Reflection TypeInformationRef const ref) testCatchingNativeExceptions: (test: Std Reflection MessageMethodInformationRef const ref) ::=> Void := {
        try: {
            try: {
                try: {
                    self doRunTestCase: testCase testCatchingNativeExceptions: test
                } catch: TestSkipException doing: {:exception :: Void |
                    self countSkippedTest.
                    Std stdout << "Skipped."; nl.
                }
            } catch: Std AssertionFailure doing: {:exception :: Void |
                self countFailingTest.
                Std stdout << "Failure:"; nl.
                Std stdout << exception; nl.
            }
        } catch: Std Error doing: {:exception :: Void |
            self countErrorTest.
            Std stdout << "Error:"; nl.
            Std stdout << exception; nl.
        }
    }.

    method doRunTestCase: (testCase: Std Reflection TypeInformationRef const ref) testCatchingNativeExceptions: (test: Std Reflection MessageMethodInformationRef const ref) ::=> Void := {
        let testCaseObject := testCase rcNewRef downCastFor: TestCase.
        let testFunctionPointer := test entryPoint reinterpretCastTo: ((TestCase pointer) => Void) pointer.
        testFunctionPointer(testCaseObject rcObjectAddress)
    }.

    method countPassingTest => Void := {
        isCurrentTestPassing ifTrue: {
            passingTestCount := passingTestCount + 1
        }
    }.

    method countErrorTest => Void := {
        errorTestCount := errorTestCount + 1.
        isCurrentTestPassing  := false.
    }.

    method countFailingTest => Void := {
        failingTestCount := failingTestCount + 1.
        isCurrentTestPassing  := false.
    }.

    method countSkippedTest => Void := {
        skippedTestCount := skippedTestCount + 1.
        isCurrentTestPassing  := false.
    }.
}.

} ## End of namespace Testing
} ## End of namespace Std
