namespace Stdn definition: {
namespace Graphics definition: {
namespace Core definition: {

useNamespace: Stdn Math Geometry.

#**
 * I am a 2D scene renderer that draws onto a specific swap chain.
 *#
class SwapChain2DSceneRenderer superclass: Scene2D Scene2DRenderer; definition: {
    protected field extent type: UInt32x2.
    protected field renderingQueue type: CommandQueuePtr.
    protected field swapChain type: SwapChainPtr.

    protected field device type: RenderingDevicePtr.
    protected field renderPasses type: Stdn Collections Vector(RenderPassPtr).
    protected field commandListAllocators type: Stdn Collections Vector(CommandListAllocatorPtr).
    protected field stateTrackers type: Stdn Collections Vector(StateTrackerPtr).
    protected field fences type: Stdn Collections Vector(FencePtr).

    protected field perFrameSceneRenderers type: Stdn Collections Vector(StateTracker2DSceneRendererPtr).

    protected field currentClearColor type: Float32x4.
    protected field isOutOfDate type: Boolean8.

    meta definition: {
        method for: (swapChain: SwapChainPtr const ref) on: (theRenderingQueue: CommandQueuePtr const ref) on: (theDevice: RenderingDevicePtr const ref) withExtent: (anExtent: UInt32x2) ::=> SwapChain2DSceneRenderer sharedPointer := {
            let result := SwapChain2DSceneRenderer sharedNew.
            result _ initializeWithSwapChain: swapChain on: theRenderingQueue on: theDevice extent: anExtent.
            result
        }.
    }.

    method initializeWithSwapChain: (theSwapChain: SwapChainPtr const ref) on: (theRenderingQueue: CommandQueuePtr const ref) on: (theDevice: RenderingDevicePtr const ref) extent: (theExtent: UInt32x2) ::=> Void := {
        swapChain := theSwapChain.
        renderingQueue := theRenderingQueue.
        device := theDevice.
        extent := theExtent.

        let bufferCount := swapChain _ getFramebufferCount.
        commandListAllocators reserve: bufferCount.
        stateTrackers reserve: bufferCount.
        renderPasses reserve: bufferCount.
        perFrameSceneRenderers reserve: bufferCount.
        fences resizeTo: bufferCount.
        0 until: bufferCount do: {:i :: Void |

            {
                let commandListAllocator := device _ createCommandAllocatorOfType: CommandListType Direct for: renderingQueue.
                let commandList := device _ createCommandListOfType: CommandListType Direct for: commandListAllocator.
                commandList _ close.

                commandListAllocators add: commandListAllocator.

                let stateTracker := GenericStateTracker sharedNew.
                stateTracker _
                    commandList: commandList;
                    shaderCache: device _ getDefaultShaderCache;
                    pipelineStateCache: device _ getDefaultPipelineStateCache.
                stateTrackers add: (stateTracker upCastFor: StateTracker)
            }.

            let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                RenderPassColorAttachmentDescription()
                    format: swapChain _ colorBufferFormat;
                    beginAction: RenderPassAttachmentAction Clear;
                    endAction: RenderPassAttachmentAction Keep;
                    clearValue: Float32x4(0, 0, 1, 1);
                    yourself
            ).

            let renderPass := device _ createRenderPass: colorAttachments depthStencilAttachment: nil.
            renderPasses add: renderPass.

            let sceneRenderer := StateTracker2DSceneRenderer sharedNew.
            sceneRenderer _
                extent: extent;
                device: device.
            perFrameSceneRenderers add: sceneRenderer.
        }.
    }.

    const method extent => UInt32x2
        := extent.

    const method swapChain => SwapChainPtr const ref
        := swapChain.

    const method isOutOfDate => Boolean8
        := isOutOfDate.

    override method newSceneBuilder => Scene2D BuilderPtr
        := device _ createScene2DBuilder.

    override method clearColor: (color: Float32x4) ::=> Void := {
        currentClearColor := color.
    }.

    override method renderScene: (rootNode: Scene2D NodePtr const ref) ::=> Void := {
        isOutOfDate ifTrue: {return: void}.

        let backBuffer := swapChain _ getCurrentBackBuffer.
        let backBufferIndex := swapChain _ getCurrentBackBufferIndex.

        let allocator ref := commandListAllocators[backBufferIndex].
        let renderPass ref := renderPasses[backBufferIndex].
        let stateTracker ref := stateTrackers[backBufferIndex].
        let perFrameSceneRenderer ref := perFrameSceneRenderers[backBufferIndex].
        let fence ref := fences[backBufferIndex].
        fence ifNotNil: {
            fence _ wait
        } ifNil: {
            fence := device _ createFence.
            fence ifNil: {return: void}.
        }.

        ## Set the actual clear color in the render pass.
        renderPass _ setColorAttachment: 0 clearValue: currentClearColor.

        allocator _ resetAllocator.
    	stateTracker _
            resetFor: allocator;
            beginRenderPass: renderPass on: backBuffer contentOnBundle: false;
    		setViewport: (RectangleI32 min: Int32x2 zeros max: (extent castTo: Int32x2));
    		setScissor: (RectangleI32 min: Int32x2 zeros max: (extent castTo: Int32x2)).

        rootNode ifNotNil: {
            perFrameSceneRenderer _
                stateTracker: stateTracker;
                renderScene: rootNode
        }.

        stateTracker _
            endRenderPass;
            close.

        renderingQueue _
            submitCommandList: (stateTracker upCastFor: CommandList);
            signalFence: fence.
    }.

    override method present => Void := {
        swapChain _ swapBuffers selectCase: #{
        SwapChainPresentationError OutOfDate : {
            isOutOfDate := true
        }.
        SwapChainPresentationError Suboptimal : {
            isOutOfDate := true
        }.
        SwapChainPresentationError Ok : {}.
        }
    }.
}.

compileTime constant SwapChain2DSceneRendererPtr := SwapChain2DSceneRenderer sharedPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Stdn
