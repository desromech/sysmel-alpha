namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

#**
 * I am a generic implementation for a shader signature cache
 *#
class GenericShaderSignatureCache superclass: ShaderSignatureCache; definition: {
    public field device type: RenderingDeviceWeakPtr.
    protected field mutex type: Std Mutex.
    protected field shaderSignatures type: Std Collections Dictionary(ShaderSignatureDescription, ShaderSignaturePtr).

    override method getOrCreateWithDescription: (description: ShaderSignatureDescription const ref) ::=> ShaderSignaturePtr := {
        mutex withLock: {
            shaderSignatures at: description ifPresent: {:(ShaderSignaturePtr ref)existent :: Void |
                return: existent
            }
        }.

        let strongDevice := device lock.
        strongDevice ifNil: {
            return: ShaderSignaturePtr nil.
        }.

        let result mutable := strongDevice _ createShaderSignatureWithDescription: description.
        mutex withLock: {
            shaderSignatures at: description put: result
        }.

        result
    }.
}.

compileTime constant GenericShaderSignatureCachePtr := GenericShaderSignatureCache rcPointer.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
