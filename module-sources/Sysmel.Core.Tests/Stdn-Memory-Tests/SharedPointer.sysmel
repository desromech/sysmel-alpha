namespace Stdn definition: {
namespace Memory definition: {
namespace Tests definition: {

class BinaryTreeNode superclass: Stdn SharedObject; definition: {
    field counter type: ConstructionDestructionCounter.
    protected field parent type: BinaryTreeNode weakPointer.
    protected field left type: BinaryTreeNode sharedPointer.
    protected field right type: BinaryTreeNode sharedPointer.

    method parent => BinaryTreeNode sharedPointer
        := parent lock.

    method parent: (theParent: BinaryTreeNode weakPointer const ref) ::=> Void
        := parent := theParent.

    method left => BinaryTreeNode sharedPointer const ref
        := left.

    method left: (child: BinaryTreeNode sharedPointer const ref) ::=> Void := {
        left ifNotNil: {
            left _ parent reset.
        }.

        child _ parent: self asWeakPointer.
        left := child.
    }.

    method right => BinaryTreeNode sharedPointer const ref
        := right.

    method right: (child: BinaryTreeNode sharedPointer const ref) ::=> Void := {
        right ifNotNil: {
            right _ parent reset.
        }.

        child _ parent: self asWeakPointer.
        right := child.
    }.

    method destroy => Void := {
        self parent ifNotNil: {:p :: Void |
            p _ removeChild: self address
        }
    }.

    method removedFromParent: (aParent: BinaryTreeNode pointer) ::=> Void := {
        self parent getPointer == aParent ifTrue: {
            parent reset.
        }
    }.

    method removeChild: (aChild: BinaryTreeNode pointer) ::=> Void := {
        left getPointer == aChild ifTrue: {
            left _ removedFromParent: self address.
            left reset.
        }.

        right getPointer == aChild ifTrue: {
            right _ removedFromParent: self address.
            right reset.
        }.
    }.
}.

class SharedPointerTest superclass: Stdn Testing TestCase; definition: {
    override method setUp => Void := {
        ConstructionDestructionCounter resetTotalCount.
    }.

    test: testNil with: {
        let pointer := Int32 sharedPointer nil.
        self assert: pointer getPointer equals: nil.
        self assert: pointer isNil.
        self deny: pointer isNotNil.
    }.

    test: testDefault with: {
        let pointer mutable type: Int32 sharedPointer.
        self assert: pointer isNil.
    }.

    test: testSharedNew with: {
        {
            let pointer := ConstructionDestructionCounter sharedNew.
            self assert: ConstructionDestructionCounter totalCount equals: 1.
            self assert: pointer isNotNil.
        }.

        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.

    test: testReset with: {
        {
            let pointer mutable := ConstructionDestructionCounter sharedNew.
            self assert: ConstructionDestructionCounter totalCount equals: 1.
            self assert: pointer isNotNil.

            let other := ConstructionDestructionCounter nativeNew.
            self assert: ConstructionDestructionCounter totalCount equals: 2.

            pointer reset: other.
            self assert: ConstructionDestructionCounter totalCount equals: 1.

            pointer reset.
            self assert: ConstructionDestructionCounter totalCount equals: 0.

            pointer reset: ConstructionDestructionCounter nativeNew.
            self assert: ConstructionDestructionCounter totalCount equals: 1.
        }.

        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.


    test: testTwoLevelTree with: {
        {
            let three := {
                let root := BinaryTreeNode sharedNew.
                root _ left: BinaryTreeNode sharedNew.

                self assert: ConstructionDestructionCounter totalCount equals: 2.
                root.
            }.
            self assert: ConstructionDestructionCounter totalCount equals: 2.
        }.

        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.

    test: testChildSelfDestroy with: {
        {
            let three := {
                let root := BinaryTreeNode sharedNew.
                root _ left: BinaryTreeNode sharedNew.

                self assert: ConstructionDestructionCounter totalCount equals: 2.
                root.
            }.
            self assert: ConstructionDestructionCounter totalCount equals: 2.

            three _ left _ destroy.
            self assert: ConstructionDestructionCounter totalCount equals: 1.
        }.

        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.

    test: testDeepThreeChildSelfDestroy with: {
        {
            let three := {
                let root := BinaryTreeNode sharedNew.
                let child := BinaryTreeNode sharedNew.
                child _
                    left: BinaryTreeNode sharedNew;
                    right: BinaryTreeNode sharedNew.
                root _
                    left: child;
                    right: BinaryTreeNode sharedNew.

                self assert: ConstructionDestructionCounter totalCount equals: 5.
                root.
            }.
            self assert: ConstructionDestructionCounter totalCount equals: 5.

            three _ left _ destroy.
            self assert: ConstructionDestructionCounter totalCount equals: 2.
        }.

        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.

    test: testDeepChildSelfDestroy with: {
        {
            let three := {
                let root := BinaryTreeNode sharedNew.
                let child := BinaryTreeNode sharedNew.
                child _
                    left: BinaryTreeNode sharedNew;
                    right: BinaryTreeNode sharedNew.
                root _
                    left: child;
                    right: BinaryTreeNode sharedNew.

                self assert: ConstructionDestructionCounter totalCount equals: 5.
                root.
            }.
            self assert: ConstructionDestructionCounter totalCount equals: 5.

            three _ left _ left _ destroy.
            self assert: ConstructionDestructionCounter totalCount equals: 4.
        }.

        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.
}.

}. ## namespace Tests
}. ## namespace Memory
}. ## namespace Stdn
