struct ConstructionDestructionCounter definition: {
    meta definition: {
        let totalCount mutable type: Int32.

        method totalCount => Int32 ref
            := totalCount.

        method resetTotalCount => Void
            := totalCount := 0.
    }.

    public field counter type: Int32 pointer.

    method initialize => Void := {
        counter := SelfType totalCount address.
        self increaseCounter.
    }.

    method initializeCopyingFrom: (other: SelfType const ref) ::=> Void := {
        counter := other counter.
        self increaseCounter.
    }.

    method initializeMovingFrom: (other: SelfType tempRef) ::=> Void := {
        counter := other counter.
        other counter := nil.
    }.

    method finalize => Void := {
        self decreaseCounter.
        counter := nil.
    }.

    method increaseCounter => Void := {
        counter ifNotNil: {
            counter _ := counter _ + 1
        }.
    }.

    method decreaseCounter => Void := {
        counter ifNotNil: {
            counter _ := counter _ - 1
        }
    }.

}.

class UniquePointerTest superclass: Stdn Testing TestCase; definition: {
    override method setUp => Void := {
        ConstructionDestructionCounter resetTotalCount.
    }.

    test: testNil with: {
        let pointer := Int32 uniquePointer nil.
        self assert: pointer getPointer equals: nil.
        self assert: pointer isNil.
        self deny: pointer isNotNil.
    }.

    test: testDefault with: {
        let pointer mutable type: Int32 uniquePointer.
        self assert: pointer isNil.
    }.

    test: testUniqueNew with: {
        {
            let pointer := ConstructionDestructionCounter uniqueNew.
            self assert: ConstructionDestructionCounter totalCount equals: 1.
            self assert: pointer isNotNil.
        }.

        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.

    test: testReset with: {
        {
            let pointer mutable := ConstructionDestructionCounter uniqueNew.
            self assert: ConstructionDestructionCounter totalCount equals: 1.
            self assert: pointer isNotNil.

            let other := ConstructionDestructionCounter nativeNew.
            self assert: ConstructionDestructionCounter totalCount equals: 2.

            pointer reset: other.
            self assert: ConstructionDestructionCounter totalCount equals: 1.

            pointer reset.
            self assert: ConstructionDestructionCounter totalCount equals: 0.

            pointer reset: ConstructionDestructionCounter nativeNew.
            self assert: ConstructionDestructionCounter totalCount equals: 1.
        }.

        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.

    test: testRelease with: {
        let escapedPointer := {
            let pointer mutable := ConstructionDestructionCounter uniqueNew.
            self assert: ConstructionDestructionCounter totalCount equals: 1.
            self assert: pointer isNotNil.
            pointer release.
        }.
        self assert: escapedPointer isNotNil.
        self assert: ConstructionDestructionCounter totalCount equals: 1.

        escapedPointer nativeDelete.
        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.

    test: testMove with: {
        {
            let escapedPointer := {
                let pointer := ConstructionDestructionCounter uniqueNew.
                self assert: ConstructionDestructionCounter totalCount equals: 1.
                self assert: pointer isNotNil.
                pointer asMoveReference
            }.
            self assert: escapedPointer isNotNil.
            self assert: ConstructionDestructionCounter totalCount equals: 1.
        }.

        self assert: ConstructionDestructionCounter totalCount equals: 0.
    }.
}.
