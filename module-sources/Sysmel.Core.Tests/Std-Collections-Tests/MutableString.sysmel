namespace Std definition: {
namespace Collections definition: {
namespace Tests definition: {

template MutableBasicStringTestCase(StringClass: Type)
 := class superclass: Std Testing TestCase; definition: {
    test: testEmptyString with: {
        let string type: StringClass.
        self assert: string size equals: 0.
        self assert: string isEmpty.
        self deny: string isNotEmpty.
    }.

    test: testFromLiteral with: {
        let string := StringClass fromLiteral: "Hello World".

        self assert: string isNotEmpty.
        self deny: string isEmpty.
        self assert: string size equals: 11.
        self assert: string first equals: 'H'.
        self assert: string second equals: 'e'.
        self assert: string third equals: 'l'.
        self assert: string fourth equals: 'l'.
        self assert: string fifth equals: 'o'.
        self assert: string sixth equals: ' '.
        self assert: string seventh equals: 'W'.
        self assert: string eighth equals: 'o'.
        self assert: string ninth equals: 'r'.
        self assert: string tenth equals: 'l'.
        self assert: string[10] equals: 'd'.

    }.

    test: testConcat with: {
        self assert: (StringClass fromLiteral: "ab") -- StringClass newValue equals: (StringClass fromLiteral: "ab").
        self assert: StringClass newValue -- (StringClass fromLiteral: "ab") equals: (StringClass fromLiteral: "ab").

        self assert: (StringClass fromLiteral: "ab") -- (StringClass fromLiteral: "cd") equals: (StringClass fromLiteral: "abcd").
        self assert: ((StringClass fromLiteral: "ab") -- (StringClass fromLiteral: "cd")) size equals: 4.
    }.

    test: testCopyFromLast with: {
        self assert: ((StringClass fromLiteral: "test.something.txt") copyFromLast: '.') equals: (StringClass fromLiteral: ".txt").
    }.

    test: testCopyAfterLast with: {
        self assert: ((StringClass fromLiteral: "test.something.txt") copyAfterLast: '.') equals: (StringClass fromLiteral: "txt").
    }.

    test: testCopyUpToLast with: {
        self assert: ((StringClass fromLiteral: "test.something.txt") copyUpToLast: '.') equals: (StringClass fromLiteral: "test.something").
    }.

    test: testCopyUpTo with: {
        self assert: ((StringClass fromLiteral: "test.something.txt") copyUpTo: '.') equals: (StringClass fromLiteral: "test").
    }.

    test: testSplitOnDo with: {
        let lastPartIndex mutable type: UIntPointer.

        "hello: 42 thisWorld: is very :cool" asMutableString splitOn: ':' doWithIndex: {:part :partIndex :: Void |
            partIndex selectCase: #{
                0 : {self assert: part equals: "hello"}.
                1 : {self assert: part equals: " 42 thisWorld"}.
                2 : {self assert: part equals: " is very "}.
                3 : {self assert: part equals: "cool"}.
            }.
            lastPartIndex := partIndex
        }.

        self assert: lastPartIndex equals: 3
    }.
}.

compileTime constant MutableStringTestCase := MutableBasicStringTestCase(String).
compileTime constant MutableWStringTestCase := MutableBasicStringTestCase(WString).
compileTime constant MutableLStringTestCase := MutableBasicStringTestCase(LString).

}. ## namespace Tests
}. ## namespace Collections
}. ## namespace Std
