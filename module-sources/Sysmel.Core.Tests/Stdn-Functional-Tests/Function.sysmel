namespace Stdn definition: {
namespace Tests definition: {

compileTime constant UnaryInt32Function := Stdn Function(Int32 => Int32).
compileTime constant UnaryIntPointerFunction := Stdn Function(IntPointer => IntPointer).

function unaryInt32IdentityFunction(x: Int32) => Int32
    := x.

function intPointerMakePolynomial(a: IntPointer, b: IntPointer, c: IntPointer, d: IntPointer, e: IntPointer, f: IntPointer) => UnaryIntPointerFunction
    := UnaryIntPointerFunction({:(IntPointer)x :: IntPointer|
    a + b*x + c*x*x + d*x*x*x + e*x*x*x*x + f*x*x*x*x*x
}).

class FunctionCase superclass: Stdn Testing TestCase; definition: {
    test: testEmpty with: {
        let f mutable type: UnaryInt32Function.

        self assert: f isInvalid.
        self deny: f isValid.
    }.

    test: testEmpty2 with: {
        let f := UnaryInt32Function().

        self assert: f isInvalid.
        self deny: f isValid.
    }.

    test: testInvalidCallError with: {
        let f mutable type: UnaryInt32Function.
        self should: f(42) raise: Stdn Error.
    }.

    test: testInvalidCallError2 with: {
        self should: UnaryInt32Function()(42) raise: Stdn Error.
    }.

    test: testIdentityFunctionPointer with: {
        let f := UnaryInt32Function for: unaryInt32IdentityFunction address.

        self assert: f(0) equals: 0.
        self assert: f(-1) equals: -1.
        self assert: f(42) equals: 42.
    }.

    test: testIdentityFunctionPointer2 with: {
        let f := UnaryInt32Function(unaryInt32IdentityFunction address).

        self assert: f(0) equals: 0.
        self assert: f(-1) equals: -1.
        self assert: f(42) equals: 42.
    }.

    test: testIdentityFunctionClosure with: {
        let f := UnaryInt32Function for: (function(x: Int32) => Int32 := x).

        self assert: f(0) equals: 0.
        self assert: f(-1) equals: -1.
        self assert: f(42) equals: 42.
    }.

    test: testIdentityFunctionClosure2 with: {
        let f := UnaryInt32Function(function(x: Int32) => Int32 := x).

        self assert: f(0) equals: 0.
        self assert: f(-1) equals: -1.
        self assert: f(42) equals: 42.
    }.

    test: testIdentityBlockClosure with: {
        let f := UnaryInt32Function for: {:(Int32)x :: Int32 | x }.

        self assert: f(0) equals: 0.
        self assert: f(-1) equals: -1.
        self assert: f(42) equals: 42.
    }.

    test: testIdentityBlockClosure2 with: {
        let f := UnaryInt32Function({:(Int32)x :: Int32 | x }).

        self assert: f(0) equals: 0.
        self assert: f(-1) equals: -1.
        self assert: f(42) equals: 42.
    }.

    test: testIdentityFunctionPointerCopy with: {
        let f1 mutable := UnaryInt32Function(unaryInt32IdentityFunction address).
        let f2 mutable := f1.

        self assert: f1(0) equals: 0.
        self assert: f1(-1) equals: -1.
        self assert: f1(42) equals: 42.

        self assert: f2(0) equals: 0.
        self assert: f2(-1) equals: -1.
        self assert: f2(42) equals: 42.

        f1 reset.
        self assert: f2(0) equals: 0.
        self assert: f2(-1) equals: -1.
        self assert: f2(42) equals: 42.
    }.

    test: testIdentityFunctionCopy with: {
        let f1 mutable := UnaryInt32Function(function(x: Int32) => Int32 := x).
        let f2 mutable := f1.

        self assert: f1(0) equals: 0.
        self assert: f1(-1) equals: -1.
        self assert: f1(42) equals: 42.

        self assert: f2(0) equals: 0.
        self assert: f2(-1) equals: -1.
        self assert: f2(42) equals: 42.

        f1 reset.
        self assert: f2(0) equals: 0.
        self assert: f2(-1) equals: -1.
        self assert: f2(42) equals: 42.
    }.

    test: testIdentityBlockClosureCopy with: {
        let f1 mutable := UnaryInt32Function({:(Int32)x :: Int32 | x }).
        let f2 mutable := f1.

        self assert: f1(0) equals: 0.
        self assert: f1(-1) equals: -1.
        self assert: f1(42) equals: 42.

        self assert: f2(0) equals: 0.
        self assert: f2(-1) equals: -1.
        self assert: f2(42) equals: 42.

        f1 reset.
        self assert: f2(0) equals: 0.
        self assert: f2(-1) equals: -1.
        self assert: f2(42) equals: 42.
    }.

    test: testIdentityFunctionPointerMove with: {
        let f1 mutable := UnaryInt32Function(unaryInt32IdentityFunction address).

        self assert: f1(0) equals: 0.
        self assert: f1(-1) equals: -1.
        self assert: f1(42) equals: 42.

        let f2 mutable := f1 asMoveReference.
        self assert: f1 isInvalid.
        self assert: f2(0) equals: 0.
        self assert: f2(-1) equals: -1.
        self assert: f2(42) equals: 42.
    }.

    test: testMakePolynomialCopy with: {
        let p1 mutable := intPointerMakePolynomial(1, 0, 0, 0, 0, 0).

        self assert: p1(0) equals: 1.
        self assert: p1(1) equals: 1.

        let p2 mutable := intPointerMakePolynomial(1, 1, 0, 0, 0, 0).
        self assert: p2(0) equals: 1.
        self assert: p2(1) equals: 2.

        p2 := p1.
        self assert: p2(0) equals: 1.
        self assert: p2(1) equals: 1.
    }.

    test: testMakePolynomialMove with: {
        let p1 mutable := intPointerMakePolynomial(1, 0, 0, 0, 0, 0).

        self assert: p1(0) equals: 1.
        self assert: p1(1) equals: 1.

        let p2 mutable := intPointerMakePolynomial(1, 1, 0, 0, 0, 0).
        self assert: p2(0) equals: 1.
        self assert: p2(1) equals: 2.

        p2 := p1 asMoveReference.
        self assert: p1 isInvalid.
        self assert: p2(0) equals: 1.
        self assert: p2(1) equals: 1.
    }.

    test: testPolynomialVector with: {
        ## This is a test for fixing a memory leak.
        let v mutable type: Stdn Collections Vector(UnaryIntPointerFunction).
        v
            add: intPointerMakePolynomial(1, 0, 0, 0, 0, 0);
            add: intPointerMakePolynomial(1, 1, 0, 0, 0, 0);
            add: intPointerMakePolynomial(1, 1, 1, 0, 0, 0);
            add: intPointerMakePolynomial(1, 1, 1, 1, 0, 0);
            add: intPointerMakePolynomial(1, 1, 1, 1, 1, 0);
            add: intPointerMakePolynomial(1, 1, 1, 1, 1, 1).

        self assert: v size equals: 6.
    }.

    test: testPolynomialVector2 with: {
        ## This is a test for fixing a memory leak.
        let v mutable type: Stdn Collections Vector(UnaryIntPointerFunction).
        0 until: 100 do: {:i :: Void |
            v add: intPointerMakePolynomial(1, i, 0, 0, 0, 0)
        }.

        self assert: v size equals: 100.

        v removeAll.
        0 until: 100 do: {:i :: Void |
            v add: intPointerMakePolynomial(1, i, 0, 0, 0, 0)
        }.
        self assert: v size equals: 100.

    }.
}.

}. ## namespace Tests
}. ## namespace Stdn
