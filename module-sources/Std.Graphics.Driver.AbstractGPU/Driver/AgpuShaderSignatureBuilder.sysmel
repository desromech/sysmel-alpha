namespace Std definition: {
namespace Graphics definition: {
namespace DriverAGPU definition: {

useNamespace: Std Graphics Core.

#**
 * I am a agpu based shader signature builder.
 *#
sealed class AgpuShaderSignatureBuilder superclass: ShaderSignatureBuilder; definition: {
    public field handle type: AGPU ShaderSignatureBuilderRef.

    override method beginBindingBank: (maxBindingsHint: UIntPointer) ::=> Void := {
        handle _ beginBindingBank: (maxBindingsHint castTo: UInt32).
    }.

    override method addBankElementWithType: (bindingType: ShaderBindingType) bindingPointCount: (bindingPointCount: UIntPointer) ::=> Void := {
        handle _ addBindingBankElement: (bindingType castTo: AGPU ShaderBindingType) bindingPointCount: (bindingPointCount castTo: UInt32)
    }.

    override method addPushConstantsWithSize: (size: UIntPointer) ::=> Void := {
        0 until: size / 4  do: {:i :: Void |
            handle _ addBindingConstant
        }
    }.

    override method build => ShaderSignatureRef := {
        let signatureHandle := handle _ build.
        signatureHandle ifNil: {
            return: ShaderSignatureRef nil.
        }.

        AgpuShaderSignature new
            handle: signatureHandle;
            upCastFor: ShaderSignature
    }.
}.

compileTime constant AgpuShaderSignatureBuilderRef := AgpuShaderSignatureBuilder rcRef.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
