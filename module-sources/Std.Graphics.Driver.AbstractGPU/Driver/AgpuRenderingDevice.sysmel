namespace Std definition: {
namespace Graphics definition: {
namespace DriverAGPU definition: {

useNamespace: Std Graphics Core.

#**
 * I am a agpu based device.
 *#
sealed class AgpuRenderingDevice superclass: RenderingDevice; definition: {
    public field handle type: AGPU DeviceRef.
    public field platformHandle type: AGPU Platform pointer.

    private field defaultCommandQueue type: CommandQueueRef.
    private field defaultShaderSignatureCache type: ShaderSignatureCacheRef.
    private field defaultVertexLayoutCache type: VertexLayoutCacheRef.
    private field defaultShaderCache type: ShaderCacheRef.
    private field defaultPipelineStateCache type: PipelineStateCacheRef.
    private field defaultFontCache type: RenderingDeviceFontCacheRef.

    private field nonCoherentAtomSize type: UIntPointer.
    private field minMemoryMapAlignment type: UIntPointer.
    private field minTexelBufferOffsetAlignment type: UIntPointer.
    private field minUniformBufferOffsetAlignment type: UIntPointer.
    private field minStorageBufferOffsetAlignment type: UIntPointer.
    private field minTextureDataOffsetAlignment type: UIntPointer.
    private field minTextureDataPitchAlignment type: UIntPointer.

    method initializeWithHandle: (theHandle: AGPU DeviceRef const ref) platformHandle: (thePlatformHandle: AGPU Platform pointer) ::=> Void := {
        handle := theHandle.
        platformHandle := thePlatformHandle.

        nonCoherentAtomSize := (handle _ getLimitValue: AGPU Limit NonCoherentAtomSize) castTo: UIntPointer.
        minMemoryMapAlignment := (handle _ getLimitValue: AGPU Limit MinMemoryMapAlignment) castTo: UIntPointer.
        minTexelBufferOffsetAlignment := (handle _ getLimitValue: AGPU Limit MinTexelBufferOffsetAlignment) castTo: UIntPointer.
        minUniformBufferOffsetAlignment := (handle _ getLimitValue: AGPU Limit MinUniformBufferOffsetAlignment) castTo: UIntPointer.
        minStorageBufferOffsetAlignment := (handle _ getLimitValue: AGPU Limit MinStorageBufferOffsetAlignment) castTo: UIntPointer.
        minTextureDataOffsetAlignment := (handle _ getLimitValue: AGPU Limit MinTextureDataOffsetAlignment) castTo: UIntPointer.
        minTextureDataPitchAlignment := (handle _ getLimitValue: AGPU Limit MinTextureDataPitchAlignment) castTo: UIntPointer.

        {
            let defaultCommandQueueHandle := handle _ getDefaultCommandQueue.
            defaultCommandQueue := AgpuCommandQueue new
                handle: defaultCommandQueueHandle;
                upCastFor: CommandQueue.
        }.

        defaultShaderSignatureCache := self createShaderSignatureCache.
        defaultVertexLayoutCache := self createVertexLayoutCache.
        defaultShaderCache := self createShaderCache.
        defaultPipelineStateCache := self createPipelineStateCache.
        defaultFontCache := self createFontCache.
    }.

    override method platformName => Char8 const pointer
        := platformHandle _ getName.

    override method name => Char8 const pointer
        := handle _ getName.

    override method createShaderSignatureBuilder ::=> ShaderSignatureBuilderRef := {
        let builderHandle := handle _ createShaderSignatureBuilder.
        builderHandle ifNil: {
            return: ShaderSignatureBuilderRef nil.
        }.

        AgpuShaderSignatureBuilder new
            handle: builderHandle;
            upCastFor: ShaderSignatureBuilder
    }.

    override method createBuffer: (description: BufferDescription const ref) initialData: (initialData: Void const pointer) ::=> BufferRef := {
        let convertedDescription mutable := AGPU BufferDescription()
            size: (description size castTo: UInt32);
            heap_type: (description heapType castTo: AGPU MemoryHeapType);
            usage_modes: (description usageModes castTo: AGPU BufferUsageMask);
            main_usage_mode: (description mainUsageMode castTo: AGPU BufferUsageMask);
            mapping_flags: (description mappingFlags castTo: UInt32);
            stride: (description stride castTo: UInt32);
            yourself.
        let bufferHandle := handle _ createBuffer: convertedDescription address initialData: (initialData reinterpretCastTo: Void pointer).
        bufferHandle ifNil: {
            return: BufferRef nil.
        }.

        AgpuBuffer new
            handle: bufferHandle;
            creationDescription: description;
            upCastFor: Buffer
    }.

    override method createTexture: (description: TextureDescription const ref) ::=> TextureRef := {
        let convertedDescription mutable := AGPU TextureDescription()
            type: (description type castTo: AGPU TextureType);
            width: (description width castTo: UInt32);
            height: (description height castTo: UInt32);
            depth: (description depth castTo: UInt32);
            layers: (description layers castTo: UInt32);
            miplevels: (description miplevels castTo: UInt16);
            format: (description format castTo: AGPU TextureFormat);
            heap_type: (description heapType castTo: AGPU MemoryHeapType);
            usage_modes: (description usageModes castTo: AGPU TextureUsageModeMask);
            main_usage_mode: (description mainUsageMode castTo: AGPU TextureUsageModeMask);
            sample_count: (description sampleCount castTo: UInt32);
            sample_quality: (description sampleQuality castTo: UInt32);
            yourself.

        let textureHandle := handle _ createTexture: convertedDescription address.
        textureHandle ifNil: {
            return: TextureRef nil.
        }.

        AgpuTexture new
            handle: textureHandle;
            creationDescription: description;
            inferCreationAspect;
            upCastFor: Texture
    }.

    override method createColorTextureWithData: (textureData: TextureDataRef const ref ref) ::=> TextureRef := {
        let bytesPerPixel := textureData format bytesPerPixel.
        bytesPerPixel = 3 || bytesPerPixel = 6 ifTrue: {
            let expandedTexture := textureData asTextureDataWithExpandedUnalignedRGBFormats.
            expandedTexture ifNil: {return: TextureRef nil}.
            return: (super createColorTextureWithData: expandedTexture)
        }.

        super createColorTextureWithData: textureData
    }.

    override method createTextureWithData: (textureData: TextureDataRef const ref ref) ::=> TextureRef := {
        let bytesPerPixel := textureData format bytesPerPixel.
        bytesPerPixel = 3 || bytesPerPixel = 6 ifTrue: {
            let expandedTexture := textureData asTextureDataWithExpandedUnalignedRGBFormats.
            expandedTexture ifNil: {return: TextureRef nil}.
            return: (super createTextureWithData: expandedTexture)
        }.

        super createTextureWithData: textureData
    }.

    override method createSampler: (description: SamplerDescription const ref) ::=> SamplerRef := {
        let convertedDescription mutable := AGPU SamplerDescription()
            filter: (description filter castTo: AGPU Filter);
            address_u: (description addressU castTo: AGPU TextureAddressMode);
            address_v: (description addressV castTo: AGPU TextureAddressMode);
            address_w: (description addressW castTo: AGPU TextureAddressMode);
            mip_lod_bias: description mipLodBias;
            maxanisotropy: description maxAnisotropy;
            comparison_enabled: (description comparisonEnabled asBit);
            comparison_function: (description comparisonFunction castTo: AGPU CompareFunction);
            border_color: (AGPU Color4f()
                r: description borderColor r;
                g: description borderColor g;
                b: description borderColor b;
                a: description borderColor a;
                yourself);
            min_lod: description minLod;
            max_lod: description maxLod;
            yourself.

        let samplerHandle := handle _ createSampler: convertedDescription address.
        samplerHandle ifNil: {
            return: SamplerRef nil.
        }.

        AgpuSampler new
            handle: samplerHandle;
            upCastFor: Sampler
    }.

    override method createComputePipelineState: (description: ComputePipelineStateDescription const ref) ::=> PipelineStateRef := {
        let builder := handle _ createComputePipelineBuilder.
        builder ifNil: {
            return: PipelineStateRef nil.
        }.

        (description shaderSignature rcObjectAddress castTo: AgpuShaderSignature pointer) ifNotNil: {:shaderSignature :: Void |
            builder _ setShaderSignature: shaderSignature _ handle
        }.

        (description computeShader rcObjectAddress castTo: AgpuShaderStageHandle pointer) ifNotNil: {:shader :: Void |
            shader _ attachTo: builder
        }.

        let pso := builder _ build.
        pso ifNil: {
            let buildingLog mutable := Std String().
            let logLength := builder _ getBuildingLogLength.
            buildingLog resizeTo: logLength.
            builder _ getBuildingLog: logLength buffer: buildingLog data.

            Std stderr << "Failed to build compute pipeline state:"; nl.
            Std stderr << buildingLog; nl.
            return: PipelineStateRef nil
        }.

        AgpuComputePipelineState new
            handle: pso;
            upCastFor: PipelineState
    }.

    override method createGraphicsPipelineState: (description: GraphicsPipelineStateDescription const ref) ::=> PipelineStateRef := {
        let builder := handle _ createPipelineBuilder.
        builder ifNil: {
            return: PipelineStateRef nil.
        }.

        (description shaderSignature rcObjectAddress castTo: AgpuShaderSignature pointer) ifNotNil: {:shaderSignature :: Void |
            builder _ setShaderSignature: shaderSignature _ handle
        }.

        (description vertexLayout rcObjectAddress castTo: AgpuVertexLayout pointer) ifNotNil: {:vertexLayout :: Void |
            builder _ setVertexLayout: vertexLayout _ handle
        }.

        (description vertexShader rcObjectAddress castTo: AgpuShaderStageHandle pointer) ifNotNil: {:shader :: Void |
            shader _ attachTo: builder
        }.
        (description fragmentShader rcObjectAddress castTo: AgpuShaderStageHandle pointer) ifNotNil: {:shader :: Void |
            shader _ attachTo: builder
        }.
        (description geometryShader rcObjectAddress castTo: AgpuShaderStageHandle pointer) ifNotNil: {:shader :: Void |
            shader _ attachTo: builder
        }.
        (description tessellationControlShader rcObjectAddress castTo: AgpuShaderStageHandle pointer) ifNotNil: {:shader :: Void |
            shader _ attachTo: builder
        }.
        (description tessellationEvaluationShader rcObjectAddress castTo: AgpuShaderStageHandle pointer) ifNotNil: {:shader :: Void |
            shader _ attachTo: builder
        }.

        builder _ setRenderTargetCount: (description colorAttachments size castTo: Int32).
        description colorAttachments doWithIndex: {:attachment :index :: Void |
            let attachmentMask := (1<<index) castTo: Int32.
            let blendingEquation ref := attachment blendingEquation.
            builder _
                setRenderTargetFormat: (index castTo: UInt32) format: (attachment format castTo: AGPU TextureFormat);
                setBlendState: attachmentMask enabled: attachment blendingEnabled asBit;
                setColorMask: attachmentMask redEnabled: attachment colorMask r asBit greenEnabled: attachment colorMask g asBit blueEnabled: attachment colorMask b asBit alphaEnabled: attachment colorMask a asBit.

            attachment blendingEnabled ifTrue: {
                builder _
                    setBlendFunction: attachmentMask
                    sourceFactor: (blendingEquation sourceColorFactor castTo: AGPU BlendingFactor) destFactor: (blendingEquation destColorFactor castTo: AGPU BlendingFactor) colorOperation: (blendingEquation colorOperation castTo: AGPU BlendingOperation)
                    sourceAlphaFactor: (blendingEquation sourceAlphaFactor castTo: AGPU BlendingFactor) destAlphaFactor: (blendingEquation destAlphaFactor castTo: AGPU BlendingFactor) alphaOperation: (blendingEquation alphaOperation castTo: AGPU BlendingOperation)
            }.
        }.

        builder _
            setDepthStencilFormat: (description depthStencilFormat castTo: AGPU TextureFormat);
            setDepthState: description depthTestingEnabled asBit writeMask: description depthWriteMask asBit function: (description depthFunction castTo: AGPU CompareFunction);
            setDepthBias: description depthBiasConstantFactor clamp: description depthBiasClamp slopeFactor: description depthBiasSlopeFactor;

            setStencilState: (description stencilTestingEnabled asBit) writeMask: (description stencilWriteMask) readMask: (description stencilReadMask);
            setStencilFrontFace: (description stencilFrontFaceState stencilFailOperation castTo: AGPU StencilOperation) depthFailOperation: (description stencilFrontFaceState depthFailOperation castTo: AGPU StencilOperation) stencilDepthPassOperation: (description stencilFrontFaceState depthPassOperation castTo: AGPU StencilOperation) stencilFunction: (description stencilFrontFaceState compareFunction castTo: AGPU CompareFunction);
            setStencilBackFace: (description stencilBackFaceState stencilFailOperation castTo: AGPU StencilOperation) depthFailOperation: (description stencilBackFaceState depthFailOperation castTo: AGPU StencilOperation) stencilDepthPassOperation: (description stencilBackFaceState depthPassOperation castTo: AGPU StencilOperation) stencilFunction: (description stencilBackFaceState compareFunction castTo: AGPU CompareFunction);

            setSampleDescription: description sampleCount sampleQuality: description sampleQuality;

            setFrontFace: (description frontFaceOrientation castTo: AGPU FaceWinding);
            setCullMode: (description faceCullingMode castTo: AGPU CullMode);
            setPolygonMode: (description polygonMode castTo: AGPU PolygonMode);
            setPrimitiveType: (description primitiveTopology castTo: AGPU PrimitiveTopology).

        let pso := builder _ build.
        pso ifNil: {
            let buildingLog mutable := Std String().
            let logLength := builder _ getBuildingLogLength.
            buildingLog resizeTo: logLength.
            builder _ getBuildingLog: logLength buffer: buildingLog data.

            Std stderr << "Failed to build graphics pipeline state:"; nl.
            Std stderr << buildingLog; nl.
            return: PipelineStateRef nil.
        }.

        AgpuGraphicsPipelineState new
            handle: pso;
            upCastFor: PipelineState
    }.

    override method createVertexLayout => VertexLayoutRef := {
        let vertexLayoutHandle := handle _ createVertexLayout.
        vertexLayoutHandle ifNil: {
            return: VertexLayoutRef nil.
        }.

        AgpuVertexLayout new
            handle: vertexLayoutHandle;
            upCastFor: VertexLayout
    }.

    override method createVertexBindingFor: (layout: VertexLayoutRef const ref) ::=> VertexBindingRef := {
        let agpuVertexLayout := layout rcObjectAddress castTo: AgpuVertexLayout pointer.
        agpuVertexLayout ifNil: {
            return: VertexBindingRef nil.
        }.

        let bindingHandle := handle _ createVertexBinding: agpuVertexLayout _ handle.
        bindingHandle ifNil: {
            return: VertexBindingRef nil.
        }.

        AgpuVertexBinding new
            handle: bindingHandle;
            vertexLayout: layout;
            upCastFor: VertexBinding
    }.

    override method createCommandAllocatorOfType: (type: CommandListType) for: (queue: CommandQueueRef const ref) ::=> CommandListAllocatorRef := {
        let agpuCommandQueue := queue rcObjectAddress castTo: AgpuCommandQueue pointer.
        agpuCommandQueue ifNil: {
            return: CommandListAllocatorRef nil
        }.

        let allocatorHandle := handle _ createCommandAllocator: (type castTo: AGPU CommandListType) queue: agpuCommandQueue _ handle.
        allocatorHandle ifNil: {
            return: CommandListAllocatorRef nil
        }.

        AgpuCommandListAllocator new
            handle: allocatorHandle;
            upCastFor: CommandListAllocator
    }.

    override method createCommandListOfType: (type: CommandListType) for: (allocator: CommandListAllocatorRef const ref) initialPipelineState: (initialPipeline: PipelineStateRef const ref) ::=> CommandListRef := {
        let agpuAllocator := allocator rcObjectAddress castTo: AgpuCommandListAllocator pointer.
        agpuAllocator ifNil: {
            return: CommandListRef nil
        }.

        let agpuInitialPipeline mutable := AGPU PipelineStateRef().
        initialPipeline ifNotNil: {
            initialPipeline isGraphicsPipelineState ifTrue: {
                agpuInitialPipeline := (initialPipeline rcObjectAddress castTo: AgpuGraphicsPipelineState pointer) _ handle
            }.

            initialPipeline isComputePipelineState ifTrue: {
                agpuInitialPipeline := (initialPipeline rcObjectAddress castTo: AgpuGraphicsPipelineState pointer) _ handle
            }.
        }.

        let commandListHandle := handle _ createCommandList: (type castTo: AGPU CommandListType) allocator: agpuAllocator _ handle initialPipelineState: agpuInitialPipeline.
        commandListHandle ifNil: {
            return: CommandListRef nil
        }.

        AgpuCommandList new
            handle: commandListHandle;
            upCastFor: CommandList
    }.

    override method createDeferredStateTrackerOfType: (type: CommandListType) for: (allocator: CommandListAllocatorRef const ref) ::=> StateTrackerRef := {
        let commandList := self createCommandListOfType: type for: allocator.
        commandList ifNil: {
            return: StateTrackerRef nil.
        }.

        GenericStateTracker new
            commandList: commandList;
            shaderCache: self getDefaultShaderCache;
            pipelineStateCache: self getDefaultPipelineStateCache;
            upCastFor: StateTracker
    }.

    override method getDefaultCommandQueue => CommandQueueRef const ref
        := defaultCommandQueue.

    override method createShaderLibraryFromSource: (shaderModuleSource: Char8 const arraySlice) shaderLanguage: (shaderLanguage: ShaderSourceLanguage) stageType: (stageType: ShaderStageType) ::=> ShaderLibraryHandleRef
        := ShaderLibraryHandleRef nil.

    override method createShaderLibraryFromBlob: (shaderModuleBlob: UInt8 const arraySlice) ::=> ShaderLibraryHandleRef := {
        let shaderHandle := handle _ createShader: AGPU ShaderType Library.
        shaderHandle ifNil: {
            return: ShaderLibraryHandleRef nil
        }.

        shaderHandle _
            setShaderSource: AGPU ShaderLanguage SpirV sourceText: (shaderModuleBlob elements reinterpretCastTo: Char8 const pointer)
                sourceTextLength: (shaderModuleBlob size castTo: UInt32);
                compileShader: "".

        AgpuShaderLibraryHandle new
            handle: shaderHandle;
            upCastFor: ShaderLibraryHandle
    }.

    override method createShaderStageFromSource: (shaderStageSource: Char8 const arraySlice) shaderLanguage: (shaderLanguage: ShaderSourceLanguage) stageType: (stageType: ShaderStageType) ::=> ShaderStageHandleRef
        := ShaderStageHandleRef nil. ## TODO: implement myself.

    override method createShaderStageFromBlob: (shaderStageBlob: UInt8 const arraySlice) stageType: (stageType: ShaderStageType) ::=> ShaderStageHandleRef
        := ShaderStageHandleRef nil. ## TODO: implement myself.

    override method createShaderStageFromEntryPoint: (entryPointInfo: GPU ShaderEntryPointInfo const ref) ::=> ShaderStageHandleRef := {
        entryPointInfo moduleInfo ifNil: {
            return: ShaderStageHandleRef nil
        }.

        let shaderLibrary := self createShaderLibraryFromModule: entryPointInfo moduleInfo _.
        shaderLibrary ifNil: {
            return: ShaderStageHandleRef nil
        }.

        shaderLibrary createHandleForEntryPoint: entryPointInfo.
    }.

    override method createFramebuffer: (extent: UInt32x2) colorViews: (colorViews: TextureViewRef const arraySlice) depthStencilView: (depthStencilView: TextureViewRef const ref) ::=> FramebufferRef := {
        let convertedColorViews mutable type: Std Collections Vector(AGPU TextureViewRef).
        convertedColorViews reserve: colorViews size.
        colorViews do: {:each :: Void |
            let agpuView := each rcObjectAddress castTo: AgpuTextureView const pointer.
            agpuView ifNil: {
                convertedColorViews add: AGPU TextureViewRef()
            } ifNotNil: {
                convertedColorViews add: agpuView _ handle
            }
        }.

        let convertedDepthStencilView mutable type: AGPU TextureViewRef.
        depthStencilView ifNotNil: {
            let agpuView := depthStencilView rcObjectAddress castTo: AgpuTextureView const pointer.
            agpuView ifNotNil: {
                convertedDepthStencilView := agpuView _ handle
            }
        }.

        let framebufferHandle := handle _ createFrameBuffer: extent x height: extent y
            colorCount: (convertedColorViews size castTo: UInt32) colorViews: convertedColorViews data
            depthStencilView: convertedDepthStencilView.
        framebufferHandle ifNil: {
            return: FramebufferRef nil
        }.

        AgpuFramebuffer new
            handle: framebufferHandle;
            upCastFor: Framebuffer
    }.

    override method createRenderPass: (colorAttachments: RenderPassColorAttachmentDescription const arraySlice) depthStencilAttachment: (depthAttachment: RenderPassDepthStencilAttachmentDescription const pointer) ::=> RenderPassRef := {
        let convertedColorAttachments mutable type: Std Collections Vector(AGPU RenderpassColorAttachmentDescription).
        convertedColorAttachments reserve: colorAttachments size.
        let sampleCount mutable type: UInt32 := 1.
        let sampleQuality mutable type: UInt32 := 0.
        colorAttachments do: {:each :: Void |
            sampleCount := each sampleCount.
            sampleQuality := each sampleQuality.

            convertedColorAttachments add: (AGPU RenderpassColorAttachmentDescription()
                format: (each format castTo: AGPU TextureFormat);
                sample_count: each sampleCount;
                sample_quality: each sampleQuality;
                begin_action: (each beginAction castTo: AGPU RenderpassAttachmentAction);
                end_action: (each endAction castTo: AGPU RenderpassAttachmentAction);
                clear_value: (AGPU Color4f() r: each clearValue r; g: each clearValue g; b: each clearValue b; a: each clearValue a; yourself);
                yourself).
        }.

        let renderPassDescription mutable type: AGPU RenderpassDescription.
        renderPassDescription
            color_attachment_count: (convertedColorAttachments size castTo: UInt32);
            color_attachments: convertedColorAttachments data.

        let convertedDepthStencilAttachment mutable type: AGPU RenderpassDepthStencilDescription.
        depthAttachment ifNotNil: {
            sampleCount := depthAttachment _ sampleCount.
            sampleQuality := depthAttachment _ sampleQuality.

            convertedDepthStencilAttachment
                format: (depthAttachment _ format castTo: AGPU TextureFormat);
                sample_count: depthAttachment _ sampleCount;
                sample_quality: depthAttachment _ sampleQuality;
                begin_action: (depthAttachment _ beginAction castTo: AGPU RenderpassAttachmentAction);
                end_action: (depthAttachment _ endAction castTo: AGPU RenderpassAttachmentAction);
                stencil_begin_action: (depthAttachment _ stencilBeginAction castTo: AGPU RenderpassAttachmentAction);
                stencil_end_action: (depthAttachment _ stencilEndAction castTo: AGPU RenderpassAttachmentAction);
                clear_value: (AGPU DepthStencilValue()
                    depth: depthAttachment _ clearValue depth;
                    stencil: depthAttachment _ clearValue stencil;
                    yourself).

            renderPassDescription depth_stencil_attachment: convertedDepthStencilAttachment address
        }.

        let renderPassHandle := handle _ createRenderPass: renderPassDescription address.
        renderPassHandle ifNil: {
            return: RenderPassRef nil
        }.

        let result := AgpuRenderPass new
            handle: renderPassHandle;
            theDepthStencilFormat: (depthAttachment ifNil: {PixelFormat Unknown} ifNotNil: {depthAttachment _ format});
            theSampleCount: sampleCount;
            theSampleQuality: sampleQuality;
            yourself.
        result colorAttachmentFormats reserve: colorAttachments size.
        colorAttachments do: {:each :: Void |
            result colorAttachmentFormats add: each format
        }.

        result upCastFor: RenderPass
    }.

    override method createFence => FenceRef := {
        let fenceHandle := handle _ createFence.
        fenceHandle ifNil: {
            return: FenceRef nil
        }.

        AgpuFence new
            handle: fenceHandle;
            upCastFor: Fence
    }.

    override method createSwapChain: (swapChainCreationInfo: SwapChainCreationInfo const ref) for: (renderingQueue: CommandQueueRef const ref) ::=> SwapChainRef := {
        let agpuCommandQueue := renderingQueue rcObjectAddress castTo: AgpuCommandQueue pointer.
        agpuCommandQueue ifNil: {
            return: SwapChainRef nil
        }.

        let oldSwapChain mutable type: AGPU SwapChain pointer.
        (swapChainCreationInfo oldSwapChain rcObjectAddress castTo: AgpuSwapChain pointer) ifNotNil: { :pointer :: Void |
            oldSwapChain := pointer _ handle getPointer
        }.

        let convertedCreationInfo mutable := AGPU SwapChainCreateInfo()
            display: swapChainCreationInfo display;
            window: swapChainCreationInfo window;
            window_system_name: swapChainCreationInfo windowSystemName asCString;
            surface: swapChainCreationInfo surface;
            colorbuffer_format: (swapChainCreationInfo colorBufferFormat castTo: AGPU TextureFormat);
            depth_stencil_format: (swapChainCreationInfo depthStencilFormat castTo: AGPU TextureFormat);
            width: swapChainCreationInfo extent x;
            height: swapChainCreationInfo extent y;
            layers: swapChainCreationInfo layerCount;
            buffer_count: swapChainCreationInfo bufferCount;
            flags: (swapChainCreationInfo flags castTo: AGPU SwapChainFlags);
            x: swapChainCreationInfo position x;
            y: swapChainCreationInfo position y;
            old_swap_chain: oldSwapChain;
            presentation_mode: (swapChainCreationInfo presentationMode castTo: AGPU SwapChainPresentationMode);
            fallback_presentation_mode: (swapChainCreationInfo fallbackPresentationMode castTo: AGPU SwapChainPresentationMode);
            yourself.

        let swapChainHandle := handle _ createSwapChain: agpuCommandQueue _ handle swapChainInfo: convertedCreationInfo address.
        swapChainHandle ifNil: {
            return: SwapChainRef nil
        }.

        let result := AgpuSwapChain new
            handle: swapChainHandle;
            creationInfo: swapChainCreationInfo;
            yourself.
        result creationInfo oldSwapChain: nil.

        result upCastFor: SwapChain
    }.

    override method waitForIdle => Void := {
        handle _ finishExecution
    }.

    override method hasTopLeftNdcOrigin => Boolean8
        := handle _ hasTopLeftNdcOrigin ~= 0.

    override method hasBottomLeftTextureCoordinates => Boolean8
        := handle _ hasBottomLeftTextureCoordinates ~= 0.

    override method nonCoherentAtomSize => UIntPointer
        := nonCoherentAtomSize.
    override method minMemoryMapAlignment => UIntPointer
        := minMemoryMapAlignment.
    override method minTexelBufferOffsetAlignment => UIntPointer
        := minTexelBufferOffsetAlignment.
    override method minUniformBufferOffsetAlignment => UIntPointer
        := minUniformBufferOffsetAlignment.
    override method minStorageBufferOffsetAlignment => UIntPointer
        := minStorageBufferOffsetAlignment.

    override method minTextureDataOffsetAlignment => UIntPointer
        := minTextureDataOffsetAlignment.

    override method minTextureDataPitchAlignment => UIntPointer
        := minTextureDataPitchAlignment.

    override method createShaderSignatureCache => ShaderSignatureCacheRef := {
        GenericShaderSignatureCache new
            device: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: ShaderSignatureCache
    }.

    override method createVertexLayoutCache => VertexLayoutCacheRef := {
        GenericVertexLayoutCache new
            device: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: VertexLayoutCache
    }.

    override method createPipelineStateCache => PipelineStateCacheRef := {
        GenericPipelineStateCache new
            device: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: PipelineStateCache
    }.

    override method createShaderCache => ShaderCacheRef := {
        GenericShaderCache new
            device: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: ShaderCache
    }.

    override method createFontCache => RenderingDeviceFontCacheRef := {
        TextureAtlasRenderingDeviceFontCache new
            initializeWithDevice: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: RenderingDeviceFontCache
    }.

    override method createScene2DBuilder => Scene2D BuilderRef := {
        GenericScene2DBuilder new
            device: (self asWeakRCRef upCastFor: RenderingDevice);
            upCastFor: Scene2D Builder
    }.

    override method getDefaultShaderSignatureCache => ShaderSignatureCacheRef const ref
        := defaultShaderSignatureCache.

    override method getDefaultVertexLayoutCache => VertexLayoutCacheRef const ref
        := defaultVertexLayoutCache.

    override method getDefaultPipelineStateCache => PipelineStateCacheRef const ref
        := defaultPipelineStateCache.

    override method getDefaultShaderCache => ShaderCacheRef const ref
        := defaultShaderCache.

    override method getDefaultFontCache => RenderingDeviceFontCacheRef const ref
        := defaultFontCache.
}.

compileTime constant AgpuRenderingDeviceRef := AgpuRenderingDevice rcRef.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
