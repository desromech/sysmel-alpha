namespace Std definition: {
namespace Graphics definition: {
namespace DriverAGPU definition: {

useNamespace: Std Graphics Core.

#**
 * I am a agpu based driver.
 *#
sealed class AgpuRenderingDriver superclass: RenderingDriver; definition: {
    override method initialize => Void := {
        RenderingDriverRegistry default registerDriver: self address
    }.

    override method finalize => Void := {
        RenderingDriverRegistry default unregisterDriver: self address
    }.

    field mutex type: Std Mutex.
    field mainDevice type: AgpuRenderingDevice weakRCPointer.

    meta definition: {
        global Singleton mutable type: AgpuRenderingDriver.
    }.

    method createDefaultDevice => AgpuRenderingDevicePtr := {
        ## Find the platform.
        let agpuPlatform mutable type: AGPU Platform pointer.
        AGPU agpuGetPlatforms(1, agpuPlatform address, nil).
        agpuPlatform ifNil: {
            Std stderr << "Failed to get AGPU platform"; nl.
            return: AgpuRenderingDevicePtr nil.
        }.

        let debugLayerEnabledVariable := LibC getenv("AGPU_DEBUG").
        let debugLayerEnabled mutable := debugLayerEnabledVariable isNotNil && (debugLayerEnabledVariable[0] ~= 'n' && debugLayerEnabledVariable[0] ~= '0').
        compileTime if: Compiler compilationTarget isWindowsStore then: {
            debugLayerEnabled := true
        }.

        let deviceOpenInfo mutable := AGPU DeviceOpenInfo()
            debug_layer: debugLayerEnabled asBit;
            yourself.

        let deviceHandle := agpuPlatform _ openDevice: deviceOpenInfo address.
        deviceHandle ifNil: {
            Std stderr << "Failed to open the device"; nl.
            return: AgpuRenderingDevicePtr nil.
        }.

        let result := AgpuRenderingDevice rcNew.
        result _ initializeWithHandle: deviceHandle platformHandle: agpuPlatform.
        result
    }.

    const override method isHardwareRenderingDriver => Boolean8
        := true.

    override method getMainDevice => RenderingDevice rcPointer := {
        let strongMainDevice mutable := mainDevice lock.
        strongMainDevice ifNil: {
            strongMainDevice := mainDevice lock.
            mutex withLock: {
                strongMainDevice ifNil: {
                    strongMainDevice := self createDefaultDevice.
                    mainDevice := strongMainDevice.
                }.
            }.
        }.

        strongMainDevice upCastFor: RenderingDevice
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
