namespace Std definition: {
namespace Graphics definition: {
namespace Core definition: {

struct GraphicsPipelineStateColorAttachmentDescription definition: {
    const inline method = (other: SelfType const ref) ::=> Boolean8
        := format = other format &&
            colorMask = other colorMask &&
            blendingEnabled = other blendingEnabled &&
            blendingEquation = other blendingEquation.
    Std Utility NotEqualsMethodMixin.

    const inline method hash ::=> Std Hash
        := format hash ^
            colorMask hash ^
            blendingEnabled hash ^
            blendingEquation hash.

    public field format type: PixelFormat.
    public field colorMask type: Boolean8x4.

    public field blendingEnabled type: Boolean8.
    public field blendingEquation type: BlendingEquation.
    public field blendingConstant type: Float32x4.
}.

struct StencilFaceState definition: {
    const inline method = (other: SelfType const ref) ::=> Boolean8
        := stencilFailOperation = other stencilFailOperation &&
            depthFailOperation = other depthFailOperation &&
            depthPassOperation = other depthPassOperation &&
            compareFunction = other compareFunction.
    Std Utility NotEqualsMethodMixin.

    const inline method hash ::=> Std Hash
        := stencilFailOperation hash ^
            depthFailOperation hash ^
            depthPassOperation hash ^
            compareFunction hash.

    public field stencilFailOperation type: StencilOperation.
    public field depthFailOperation type: StencilOperation.
    public field depthPassOperation type: StencilOperation.
    public field compareFunction type: CompareFunction.
}.

#**
 * Graphics pipeline state description.
 *#
struct GraphicsPipelineStateDescription definition: {
    method initialize => Void := {
        polygonMode := PolygonMode Fill.
        faceCullingMode := FaceCullingMode None.
        frontFaceOrientation := FrontFaceOrientation CounterClockwise.

        sampleCount := 1.
    }.

    public field shaderSignature type: ShaderSignaturePtr.

    ## Shader stages.
    public field vertexShader type: ShaderStageHandlePtr.
    public field fragmentShader type: ShaderStageHandlePtr.
    public field geometryShader type: ShaderStageHandlePtr.
    public field tessellationControlShader type: ShaderStageHandlePtr.
    public field tessellationEvaluationShader type: ShaderStageHandlePtr.

    ## Rasterization state.
    public field frontFaceOrientation type: FrontFaceOrientation.
    public field faceCullingMode type: FaceCullingMode.
    public field polygonMode type: PolygonMode.
    public field primitiveTopology type: PrimitiveTopology.
    public field vertexLayout type: VertexLayoutPtr.

    ## Color attachments
    public field colorAttachments type: Std Collections Vector(GraphicsPipelineStateColorAttachmentDescription).

    ## Depth buffer.
    public field depthTestingEnabled type: Boolean8.
    public field depthWriteMask type: Boolean8.
    public field depthStencilFormat type: PixelFormat.
    public field depthFunction type: CompareFunction.

    public field depthBiasConstantFactor type: Float32.
    public field depthBiasSlopeFactor type: Float32.
    public field depthBiasClamp type: Float32.

    ## Multi sampling
    public field sampleCount type: UInt32.
    public field sampleQuality type: UInt32.

    ## Stencil buffer.
    public field stencilTestingEnabled type: Boolean8.
    public field stencilReadMask type: Int32.
    public field stencilWriteMask type: Int32.

    public field stencilFrontFaceState type: StencilFaceState.
    public field stencilBackFaceState type: StencilFaceState.

    const inline method = (other: SelfType const ref) ::=> Boolean8 := {
        shaderSignature = other shaderSignature &&

        ## Shader stages.
        vertexShader = other vertexShader &&
        fragmentShader = other fragmentShader &&
        geometryShader = other geometryShader &&
        tessellationControlShader = other tessellationControlShader &&
        tessellationEvaluationShader = other tessellationEvaluationShader &&

        ## Rasterization state.
        frontFaceOrientation = other frontFaceOrientation &&
        faceCullingMode = other faceCullingMode &&
        polygonMode = other polygonMode &&
        primitiveTopology = other primitiveTopology &&
        vertexLayout = other vertexLayout &&

        ## Color attachments
        colorAttachments = other colorAttachments &&

        ## Depth buffer.
        depthTestingEnabled = other depthTestingEnabled &&
        depthWriteMask = other depthWriteMask &&
        depthStencilFormat = other depthStencilFormat &&
        depthFunction = other depthFunction &&

        depthBiasConstantFactor = other depthBiasConstantFactor &&
        depthBiasSlopeFactor = other depthBiasSlopeFactor &&
        depthBiasClamp = other depthBiasClamp &&

        ## Multi sampling
        sampleCount = other sampleCount &&
        sampleQuality = other sampleQuality &&

        ## Stencil buffer.
        stencilTestingEnabled = other stencilTestingEnabled &&
        stencilReadMask = other stencilReadMask &&
        stencilWriteMask = other stencilWriteMask &&

        stencilFrontFaceState = other stencilFrontFaceState &&
        stencilBackFaceState = other stencilBackFaceState
    }.

    Std Utility NotEqualsMethodMixin.

    const inline method hash ::=> Std Hash := {
        shaderSignature hash ^

        ## Shader stages.
        vertexShader hash ^
        fragmentShader hash ^
        geometryShader hash ^
        tessellationControlShader hash ^
        tessellationEvaluationShader hash ^

        ## Rasterization state.
        frontFaceOrientation hash ^
        faceCullingMode hash ^
        polygonMode hash ^
        primitiveTopology hash ^
        vertexLayout hash ^

        ## Color attachments
        colorAttachments hash ^

        ## Depth buffer.
        depthTestingEnabled hash ^
        depthWriteMask hash ^
        depthStencilFormat hash ^
        depthFunction hash ^

        depthBiasConstantFactor hash ^
        depthBiasSlopeFactor hash ^
        depthBiasClamp hash ^

        ## Multi sampling
        sampleCount hash ^
        sampleQuality hash ^

        ## Stencil buffer.
        stencilTestingEnabled hash ^
        stencilReadMask hash ^
        stencilWriteMask hash ^

        stencilFrontFaceState hash ^
        stencilBackFaceState hash
    }.

    method addColorAttachmentWithFormat: (format: PixelFormat) ::=> Void := {
        colorAttachments add: (GraphicsPipelineStateColorAttachmentDescription()
            format: format;
            colorMask: Boolean8x4(true, true, true, true);
            yourself)
    }.

    method setAllBlendingEquationsTo: (equation: BlendingEquation const ref) ::=> Void := {
        colorAttachments do: {:each :: Void |
            each
                blendingEnabled: true;
                blendingEquation: equation.
        }
    }.
}.

}. ## End of namespace Core
}. ## End of namespace Graphics
}. ## End of namespace Std
