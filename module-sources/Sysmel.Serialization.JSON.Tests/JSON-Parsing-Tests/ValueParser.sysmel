namespace Stdn definition: {
namespace Serialization definition: {
namespace JSON definition: {
namespace Tests definition: {

class ValueParserTest superclass: Stdn Testing TestCase; definition: {

    test: testInteger with: {
        self assert: ((ValueParser parseString: "1" asMutableString) get: UInt64) equals: 1.
        self assert: ((ValueParser parseString: "-1" asMutableString) get: Int64) equals: -1.
    }.

    test: testFloat with: {
        self assert: ((ValueParser parseString: "1.0" asMutableString) get: Float64) equals: 1.0f.
    }.

    test: testString with: {
        self assert: ((ValueParser parseString: "\"Hello World\"" asMutableString) get: Stdn String) equals: "Hello World" asMutableString.
    }.

    test: testKeywords with: {
        self assert: ((ValueParser parseString: "nil" asMutableString) get: _UndefinedType) equals: nil.
        self assert: ((ValueParser parseString: "true" asMutableString) get: Boolean8) equals: true.
        self assert: ((ValueParser parseString: "false" asMutableString) get: Boolean8) equals: false.
    }.

    test: testEmptyList with: {
        let parsedList := (ValueParser parseString: "[]" asMutableString) get: ListPtr.
        self assert: parsedList _ elements isEmpty.
    }.

    test: testSingleElementList with: {
        let parsedList := (ValueParser parseString: "[1]" asMutableString) get: ListPtr.
        self assert: (parsedList _ elements first get: UInt64) equals: 1.
    }.

    test: testThreeElementList with: {
        let parsedList := (ValueParser parseString: "[1, -2, 2.5]" asMutableString) get: ListPtr.
        self assert: (parsedList _ elements first get: UInt64) equals: 1.
        self assert: (parsedList _ elements second get: Int64) equals: -2.
        self assert: (parsedList _ elements third get: Float64) equals: 2.5.
    }.

    test: testEmptyObject with: {
        let parsedObject := (ValueParser parseString: "{}" asMutableString) get: ObjectPtr.
        self assert: parsedObject _ elements isEmpty.
    }.

    test: testSingleElementObject with: {
        let parsedObject := (ValueParser parseString: "{\"first\": 1}" asMutableString) get: ObjectPtr.
        self assert: ((parsedObject _ elements at: "first" asMutableString) get: UInt64) equals: 1.
    }.

    test: testThreeElementObject with: {
        let parsedObject := (ValueParser parseString: "{\"first\": 1, \"second\": -2, \"third\": 2.5}" asMutableString) get: ObjectPtr.
        self assert: ((parsedObject _ elements at: "first" asMutableString) get: UInt64) equals: 1.
        self assert: ((parsedObject _ elements at: "second" asMutableString) get: Int64) equals: -2.
        self assert: ((parsedObject _ elements at: "third" asMutableString) get: Float64) equals: 2.5.
    }.
}.

} ## End of namespace Tests
}. ## End of namespace JSON
}. ## End of namespace Serialization
}. ## End of namespace Stdn
