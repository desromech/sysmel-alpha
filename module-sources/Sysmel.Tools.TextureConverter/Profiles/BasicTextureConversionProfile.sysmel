namespace Sysmel definition: {
namespace Tools definition: {
namespace TextureConverter definition: {

useNamespace: Std Graphics Core.

#**
 * I am a texture converter.
 *#
class BasicTextureConversionProfile superclass: TextureConversionProfile; definition: {
    override method name => Char8 const arraySlice
        := "basic".

    override method description => Char8 const arraySlice
        := "Basic texture conversion with mipmap generation without compression.".

    virtual method minMipLevelExtentFor: (inputTextureData: TextureDataRef const ref) withParameters: (parameters: Parameters const ref) ::=> UInt32x3
        := UInt32x3 ones.

    virtual method maxMipLevelExtentFor: (inputTextureData: TextureDataRef const ref) withParameters: (parameters: Parameters const ref) ::=> UInt32x3
        := UInt32x3 infinityOrMaxValue.

    virtual method encodeColorTexture: (inputTextureData: TextureDataRef const ref) withParameters: (parameters: Parameters const ref) inputFormat: (inputFormat: PixelFormat) ::=> TextureDataRef := {
        parameters targetFormat isUnknown ifTrue: {return: inputTextureData}.

        inputTextureData convertFromPixelFormat: inputTextureData srgbFormat intoFormat: parameters targetFormat
            resultFormat: parameters targetFormat asLinearFormat srgbFormat: parameters targetFormat.
    }.

    virtual method encodeNonColorTexture: (inputTextureData: TextureDataRef const ref) withParameters: (parameters: Parameters const ref) inputFormat: (inputFormat: PixelFormat) ::=> TextureDataRef := {
        parameters targetFormat isUnknown ifTrue: {return: inputTextureData}.

        inputTextureData convertFromPixelFormat: inputTextureData format intoFormat: parameters targetFormat
            resultFormat: parameters targetFormat srgbFormat: parameters targetFormat asSRGBFormat.
    }.

    virtual method encodeNormalMapTexture: (inputTextureData: TextureDataRef const ref) withParameters: (parameters: Parameters const ref) inputFormat: (inputFormat: PixelFormat) ::=> TextureDataRef := {
        parameters targetFormat isUnknown ifTrue: {return: inputTextureData}.

        inputTextureData convertFromPixelFormat: inputTextureData format intoFormat: parameters targetFormat
            resultFormat: parameters targetFormat srgbFormat: parameters targetFormat asSRGBFormat.
    }.

    override method convertTextureData: (inputTextureData: TextureDataRef const ref) withParameters: (parameters: Parameters const ref) ::=> TextureDataRef := {
        ## Convert the input texture into something more convenient to operate on.
        let convertedTextureData mutable := parameters usageType selectCase: #{
            TextureUsageType Color : {inputTextureData asTextureDataExpandedForConversions}.
            TextureUsageType NonColorData : {inputTextureData asNonColorTextureDataExpandedForConversions}.
            TextureUsageType NormalMap : {inputTextureData asNormalMapTextureDataExpandedForConversions}.
        }.
        convertedTextureData ifNil: {convertedTextureData := inputTextureData}.

        ## Generate mipmaps.
        parameters generateMipmaps ifTrue: {
            let withMipmaps mutable := parameters usageType selectCase: #{
                TextureUsageType Color : {convertedTextureData generateColorMiplevels}.
                TextureUsageType NonColorData : {convertedTextureData generateMiplevels}.
                TextureUsageType NormalMap : {convertedTextureData generateNormalMiplevels}.
            }.

            withMipmaps ifNotNil: {
                convertedTextureData := withMipmaps
            }.

            let minMipLevelExtent := parameters minMipLevelExtent max: (self minMipLevelExtentFor: inputTextureData withParameters: parameters).
            let maxMipLevelExtent := parameters maxMipLevelExtent min: (self maxMipLevelExtentFor: inputTextureData withParameters: parameters).
            convertedTextureData := convertedTextureData clipMiplevelsToMinExtent: minMipLevelExtent maxExtent: maxMipLevelExtent
        }.

        convertedTextureData header flags: convertedTextureData flags | TextureDataFlags HasGeneratedMipmaps.

        ## Convert the processed texture into the target format for storage.
        parameters usageType selectCase: #{
            TextureUsageType Color : {self encodeColorTexture: convertedTextureData withParameters: parameters inputFormat: inputTextureData srgbFormat}.
            TextureUsageType NonColorData : {self encodeNonColorTexture: convertedTextureData withParameters: parameters inputFormat: inputTextureData format}.
            TextureUsageType NormalMap : {self encodeNormalMapTexture: convertedTextureData withParameters: parameters inputFormat: inputTextureData format}.
        }.
    }.
}.

global basicTextureConversionProfileRegistration mutable type: TextureConversionProfileRegisterer(BasicTextureConversionProfile).

} ## End of namespace Tools
} ## End of namespace TextureConverter
} ## End of namespace Sysmel
