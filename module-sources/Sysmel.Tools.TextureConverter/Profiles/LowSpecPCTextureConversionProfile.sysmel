namespace Sysmel definition: {
namespace Tools definition: {
namespace TextureConverter definition: {

useNamespace: Std Graphics Core.

PixelFormat extend: {
    inline method asDefaultTargetTextureFormatForLowSpecPC => SelfType := {
        self selectCase: #{
        R8G8B8A8_UNorm : BC3_UNorm.
        R8G8B8A8_UNormSRGB : BC3_UNormSRGB.

        R8G8B8_UNorm : BC1_UNorm.
        R8G8B8_UNormSRGB : BC1_UNormSRGB.

        B8G8R8_UNorm : BC1_UNorm.
        B8G8R8_UNormSRGB : BC1_UNormSRGB.

        R8_UNorm : BC1_UNorm.
        R8G8_UNorm : BC1_UNorm.
        _ : self .
        }
    }.
}.

#**
 * I am a texture converter.
 *#
class LowSpecPCTextureConversionProfile superclass: BasicTextureConversionProfile; definition: {
    override method name => Char8 const arraySlice
        := "low-spec-pc".

    override method description => Char8 const arraySlice
        := "Desktop PC with D3D 9 Block Code compressed textures (DXT1, DXT3 and DXT5).".

    override method encodeColorTexture: (inputTextureData: TextureDataRef const ref) withParameters: (parameters: Parameters const ref) inputFormat: (inputFormat: PixelFormat) ::=> TextureDataRef := {
        let targetFormat := parameters targetFormat isUnknown
            ifTrue: {inputFormat asDefaultTargetTextureFormatForLowSpecPC}
            ifFalse: {parameters targetFormat}.

        inputTextureData convertFromPixelFormat: inputTextureData srgbFormat intoFormat: targetFormat
            resultFormat: targetFormat asLinearFormat srgbFormat: targetFormat.
    }.

    override method encodeNonColorTexture: (inputTextureData: TextureDataRef const ref) withParameters: (parameters: Parameters const ref) inputFormat: (inputFormat: PixelFormat) ::=> TextureDataRef := {
        let targetFormat := parameters targetFormat isUnknown
            ifTrue: {inputFormat asDefaultTargetTextureFormatForLowSpecPC}
            ifFalse: {parameters targetFormat}.

        inputTextureData convertFromPixelFormat: inputTextureData format intoFormat: targetFormat
            resultFormat: targetFormat srgbFormat: targetFormat asSRGBFormat.
    }.

    override method encodeNormalMapTexture: (inputTextureData: TextureDataRef const ref) withParameters: (parameters: Parameters const ref) inputFormat: (inputFormat: PixelFormat) ::=> TextureDataRef := {
        let targetFormat := parameters targetFormat isUnknown
            ifTrue: {PixelFormat BC3_UNorm}
            ifFalse: {parameters targetFormat}.

        let swizzledTexture := inputTextureData swizzleComponentsForRXGBNormalMap.
        swizzledTexture ifNil: {
            return: (super encodeNormalMapTexture: inputTextureData withParameters: parameters inputFormat: inputFormat)
        }.

        swizzledTexture convertFromPixelFormat: inputTextureData format intoFormat: targetFormat
            resultFormat: targetFormat srgbFormat: targetFormat asSRGBFormat.
    }.
}.

global lowSpecPCTextureConversionProfileRegistration mutable type: TextureConversionProfileRegisterer(LowSpecPCTextureConversionProfile).

} ## End of namespace Tools
} ## End of namespace TextureConverter
} ## End of namespace Sysmel
