namespace Sysmel definition: {
namespace Tools definition: {
namespace TextureConverter definition: {

useNamespace: Std Graphics Core.

#**
 * I am a texture converter.
 *#
class TextureConversionProfileRegistry superclass: Std RCObject; definition: {
    meta definition: {
        let singleton mutable type: TextureConversionProfileRegistry uniquePointer.
        let singletonOnceCreation mutable type: Std OnceFlag.

        method uniqueInstance => TextureConversionProfileRegistry ref := {
            singletonOnceCreation do: {
                singleton reset: TextureConversionProfileRegistry nativeNew.
            }.

            singleton _
        }.
    }.

    private field mutex type: Std Mutex.
    private field registeredProfiles type: Std Collections Vector(TextureConversionProfile rcPointer).

    method addProfile: (profile: TextureConversionProfile rcPointer const ref) ::=> Void := {
        mutex withLock: {
            registeredProfiles add: profile
        }
    }.

    method getProfiles ::=> Std Collections Vector(TextureConversionProfile rcPointer) := {
        mutex withLock: {
            return: registeredProfiles
        }.
    }.

    method findNamed: (name: Char8 const arraySlice) default: (default: TextureConversionProfile rcPointer const ref) ::=> TextureConversionProfile rcPointer := {
        mutex withLock: {
            registeredProfiles do: {:each :: Void |
                each _ name = name ifTrue: {
                    return: each
                }
            }
        }.

        default
    }.
}.

template TextureConversionProfileRegisterer (T: Type)
    := class definition: {

    method initialize => Void := {
        TextureConversionProfileRegistry uniqueInstance addProfile: (T rcNew upCastFor: TextureConversionProfile)
    }.
}.
} ## End of namespace Tools
} ## End of namespace TextureConverter
} ## End of namespace Sysmel
