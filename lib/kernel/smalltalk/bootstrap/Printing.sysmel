namespace Smalltalk definition: {

ProtoObject extend: {
    method printOnNativeTextStreamWriter: (writer: StdNative IO TextStreamWriter ref) := {
        self printString printOnNativeTextStreamWriter: writer.
		self
    }.
}.

Object extend: {
    method asString
        := self printString.
    method printString
		:= self printStringLimitedTo: 50000.
    method printStringLimitedTo: limit
        := self printStringLimitedTo: limit using: {:stream :: Void | self printOn: stream}.

    method printStringLimitedTo: limit using: printBlock
        := String streamContents: printBlock limitedTo: limit.

    method printOn: aStream
        := aStream nextPutAll: "a "; nextPutAll: self class name.

    method storeString
		:= "TODO: Object >>#storeString".
}.

UndefinedObject extend: {
    method printOn: aStream
		:= aStream nextPutAll: "nil".
}.

True extend: {
    method printOn: aStream
        := aStream nextPutAll: "true".
}.

False extend: {
    method printOn: aStream
        := aStream nextPutAll: "falseClass".
}.

String extend: {
	method asString
		:= self.

    method printOnNativeTextStreamWriter: (writer: StdNative IO TextStreamWriter ref) := {
		__data size > 0 ifTrue: {
		    writer write: __data [0] address size: __data size
		}.

		self
    }.

}.

Behavior extend: {
	method name
		:= "A subclass of something".

    method printOn: aStream
		:= aStream nextPutAll: self name.
}.

Metaclass extend: {
    method printOn: aStream
        := aStream print: thisClass; nextPutAll: " class".
}.

SmallInteger extend: {
    method printOnNativeTextStreamWriter: (writer: StdNative IO TextStreamWriter ref) := {
        writer << self __decodeSmallInteger.
		self
    }.
}.

Character extend: {
    method printOnNativeTextStreamWriter: (writer: StdNative IO TextStreamWriter ref) := {
        writer << self __decodeCharacter.
		self
    }.
}.

StdNative IO TextStreamWriter extend: {
    method << (object: ProtoObject) => SelfType ref := {
        object printOnNativeTextStreamWriter: self.
        self
    }
}.

}.
