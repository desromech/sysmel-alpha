namespace Smalltalk definition: {

ModuleInformation definition: {

    method allExtensionsDo: aBlock ::=> Void := {
        extensionMacros ifNotNil: {
            extensionMacros do: aBlock
        }.

        extensionOverloadedMethods ifNotNil: {
            extensionOverloadedMethods do: aBlock
        }.

        extensionMethods ifNotNil: {
            extensionMethods do: aBlock
        }.
    }.

    method startUp => Void := {
        StdNative stdout << "Module startup: " << name; nl.
        ## Apply all of the extensions.
        self allExtensionsDo: {:each :: Void | each apply }
    }.

    method shutDown => Void  := {
        ##StdNative stdout << "Module " << name << " shutDown called."; nl
    }.
}.

ProgramEntityExtensionElement definition: {
    method printOn: aStream := {
        super printOn: aStream.
        aStream nextPutAll: " extendedParent: "; print: extendedParent;
        	  nextPutAll: " name: "; print: name;
              nextPutAll: " extension: "; print: extension.
    }.
}.

ExtensionMacroMessage definition: {
    method apply := {
        ##StdNative stdout << "TODO: Apply " << self; nl.
        self
    }.
}.

ExtensionOverloadedMethod definition: {
    method apply := {
        ##StdNative stdout << "TODO: Apply " << self; nl.
        self
    }.
}.

ExtensionMethod definition: {
    method apply := {
        StdNative stdout << "Apply " << self; nl.
        extendedParent methodDict at: name put: extension.
        self
    }.
}.

namespace Runtime definition: {

function callModuleStartUp(module: ModuleInformation) => Void := {
    module startUp
}.

function callModuleShutdown(module: ModuleInformation) => Void := {
    module shutDown
}.

Compiler compilationTarget managedObjectModel
    moduleStartUpFunction: callModuleStartUp;
    moduleShutDownFunction: callModuleShutdown.
}. ## End of namespace Runtime

}. ## End of namespace Smalltalk
