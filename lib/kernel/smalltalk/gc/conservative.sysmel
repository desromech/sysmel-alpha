namespace SysmelKernel definition: {

Compiler addLinkerArguments: #("-lgc").

namespace BoehmGC definition: {
    function GC_init externC() => Void.
    function GC_malloc externC(size: UIntPointer) => Void pointer.
}.

class SysmelGC definition: {
    method initialize => Void := {
        <nogc>
        BoehmGC GC_init().
    }.

    method finalize => Void := {
        <nogc>
    }.

    method allocate: (objectSize: UIntPointer)
        variableDataSize: (variableDataSize: UInt32)
        initializingWith: (basicInitializer: _BasicInitializeFunctionPointerType)
          ::=> _ObjectHeader pointer := {
        <nogc>

        ## Allocate the object memory.
        let allocatedObject := BoehmGC GC_malloc(objectSize) reinterpretCastTo: _ObjectHeader pointer.
        StdNative memset(allocatedObject, 0, objectSize).

        ## Set the allocated object class.
        allocatedObject value
            __variableDataSize: variableDataSize.

        ## Perform the basic initialization. This sets the vtable pointers.
        basicInitializer _ (allocatedObject).

        return: allocatedObject
    }.

	method allocate: (instanceSize: UIntPointer) instanceAlignment: (instanceAligment: UIntPointer)
		copyingFromPrototype: (prototype: Void pointer)
		  ::=> _ObjectHeader pointer := {
		<nogc>

        ## Allocate the object memory.
        let allocatedObject := BoehmGC GC_malloc(instanceSize) reinterpretCastTo: _ObjectHeader pointer.

		## Copy the data from the prototype
        StdNative memcpy(allocatedObject, prototype, instanceSize).

        return: allocatedObject
	}.
}.

global globalSysmelGC mutable type: SysmelGC; constructionPriority: -1000.

}.
