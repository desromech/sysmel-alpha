namespace Sysmel definition: {
Compiler compilationTarget
    managedClassTypeTrait: trait ManagedClassTrait;
    dynamicObjectType: type Dynobject.

Type extend: {
    message gcpointer -> _CompilerObjectType := {
        return: (self pointerFor: #gc)
    }.
}.

ManagedClassTrait uses: AnyValue;
definition: {
}.

UndefinedType conversionTo: ManagedClassTrait doOn: {
    evaluation: $$Pharo {
        value: value targetType: targetType at: position
            ^ value sameValueButWithType: targetType
    }.
    codeGeneration: $$Pharo {
        convertSSAValue: sourceValue to: targetType with: builder at: messageNode
            ^ targetType defaultSSAValueWith: builder
    }.
}.

// Variable data trait

}.

namespace Smalltalk definition: {

// Meta circular hierarchy
gcclass ProtoObject.
gcclass Metaclass.

ProtoObject metaClassClass: Metaclass.

gcclass Object superclass: ProtoObject.
    gcclass Behavior superclass: Object.
        gcclass ClassDescription superclass: Behavior.
            gcclass Class superclass: ClassDescription.
            gcclass Metaclass superclass: ClassDescription.

    // BooleanBit
    gcclass Boolean superclass: Object.
        gcclass True superclass: Boolean.
        gcclass False superclass: Boolean.

    // Undefind object
    gcclass UndefinedObject superclass: Object.

    // Numbers
    gcclass Magnitude superclass: Object.
        gcclass Number superclass: Magnitude.
            gcclass Float superclass: Number.
                gcclass BoxedFloat64 superclass: Float.
                gcclass SmallFloat64 superclass: Float.
            gcclass Integer superclass: Number.
                gcclass LargeInteger superclass: Integer.
                    gcclass LargeNegativeInteger superclass: LargeInteger.
                    gcclass LargePositiveInteger superclass: LargeInteger.
                gcclass SmallInteger superclass: Integer.


    gcclass GCLayout superclass: Object.

// Essential collections
gcclass Collection superclass: Object.
    gcclass HashedCollection superclass: Collection.
        gcclass Dictionary superclass: HashedCollection.
        gcclass MethodDictionary superclass: Dictionary.
    gcclass SequenceableCollection superclass: Collection.
        gcclass ArrayedCollection superclass: SequenceableCollection.
            gcclass Array superclass: ArrayedCollection.
            gcclass ByteArray superclass: ArrayedCollection.
            gcclass FloatArray superclass: ArrayedCollection.
            gcclass IntegerArray superclass: ArrayedCollection.
            gcclass WordArray superclass: ArrayedCollection.

            gcclass String superclass: ArrayedCollection.
                gcclass Symbol superclass: String.

// Methods
gcclass CompiledMethod superclass: Object.

// ProtoObject
ProtoObject type superclass: Class.

ProtoObject definition: {
    // We use a fixed 16-byte object header, to be able to use SSE instructions.

    field __class private type: Behavior. // TODO: Point into the vtable, instead of the class.

    if: UIntPointer instanceSize == 4 then: {
        // TODO: Support big-endian.
        field __padding private type: Behavior.
    }.

    // 32 bits: gc color, isPinned, isImmutable.
    field _ private bits: 5; type: UInt32.

    field __gcBits private type: UInt32; bits: 3.
    field __isPinned private type: UInt32; bits: 1.
    field __isImmutable private type: UInt32; bits: 1.
    field __identityHash private type: UInt32; bits: 22.

    // Variable data size
    field __variableDataSize private type: UInt32.
}.

Behavior uses: Type; definition: {
    field superclass public type: Behavior.
    field methodDict public type: MethodDictionary.
    field gclayout public type: GCLayout.
    field slots public type: Array.

    field instanceDataSize public type: UIntPointer.
    field instanceDataAlignment public type: UIntPointer.

    field variableInstanceElementSize public type: UIntPointer.
    field variableInstanceElementAlignment public type: UIntPointer.

    // TODO: Suport InstanceType as the return type.
    message basicNew -> ProtoObject := {
        LibC printf ("basicNew called").
        return: nil
    }.

    message asReceiverType -> SelfType := {
        [[compileTime]]
        return: self
    }.

    message cvariadicCoercionType -> SelfType := {
        [[compileTime]]
        return: self
    }.

    message lookupSelector: (selector: Object) ::-> Object := {
        [[staticBinding]]
        [[nogc]]
        LibC printf("Behavior %p >> lookupSelector: %p\n", self, selector).

        if: superclass == nil then: {
            return: nil.
        }.

        return: (superclass lookupSelector: selector)
    }.
}.

Class definition: {
    field name protected type: Symbol.

    message name -> Symbol := {
        return: name
    }.
}.

Metaclass definition: {
    field thisClass protected type: Behavior.

    message isMetaType -> BooleanBit := {
        return: true
    }.
}.

// GCLayoutRecord
struct GCLayoutRecord definition: {
    field type public type: UIntPointer.
    field offset public type: UIntPointer.
    field size public type: UIntPointer.
}.

// GCLayout
GCLayout definition: {
    field records public type: GCLayoutRecord array.
}.

// String
String definition: {
    field __data protected type: UInt8 array.
}.

//-----------------------------------------------------------------------------
ProtoObject definition: {
    message class -> Behavior := {
        [[compileTime]]
        [[staticBinding]]
        [[nogc]]
        return: __class
    }.

    message identityHash -> UInt32 := {
        [[compileTime]]
        [[staticBinding]]
        [[nogc]]
        return: __identityHash
    }.

    message == (other: ProtoObject) -> BooleanBit := {
        [[compileTime]]
        [[staticBinding]]
        [[intrinsic: #"dynobject.identityEquals"]]

    }.

    message ~~ (other: ProtoObject) -> BooleanBit := {
        [[compileTime]]
        [[staticBinding]]
        [[intrinsic: #"dynobject.identityNotEquals"]]
    }.
}.

//-----------------------------------------------------------------------------
// Important collections
HashedCollection definition: {
    field tally protected type: UIntPointer.
    field array protected type: Array.
}.

//-----------------------------------------------------------------------------
// Literals
let literalConversionRule := {

    evaluation: $$Pharo {
        value: value into: targetType at: coercionPosition
            "Literal -> Object eval"
            self halt.
            ^ value sameValueButWithType: targetType
    }.

    codeGeneration: $$Pharo {
        convertSSAValue: sourceValue to: targetType with: builder at: messageNode
            ^ builder addDynamicLiteral: sourceValue
    }.
}.

_LiteralSymbol conversionTo: Symbol doOn: literalConversionRule.
_LiteralString conversionTo: String doOn: literalConversionRule.
_LiteralInteger conversionTo: Integer doOn: literalConversionRule.
_LiteralFloat conversionTo: Float doOn: literalConversionRule.

//-----------------------------------------------------------------------------
// Normal message lookup
namespace Runtime definition: {
function messageLookupFromBehavior(behavior: Behavior, object: ProtoObject, selector: Object, fallbackTrampoline: Void pointer) -> Void pointer := {
    [[nogc]]
    LibC printf("messageLookupFromBehavior behavior %p object %p selector %p\n", behavior, object, selector).
    let method := behavior lookupSelector: selector.

    if: selector == #doesNotUnderstand: then: {
        LibC printf("Fatal error: Failed to lookup doesNotUnderstand:\n").
        LibC abort().
    }.

    if: method == nil then: {
        LibC printf("TODO: Implement support for doesNotUnderstand\n", method).
        LibC abort().
    }.

    LibC printf("Found method: %p\n", method).
    LibC abort().
    return: fallbackTrampoline
}.

function normalMessageLookup(object: ProtoObject, selector: Object, fallbackTrampoline: Void pointer) -> Void pointer := {
    [[nogc]]
    LibC printf("normalMessageLookup object %p selector %p\n", object, selector).
    return: messageLookupFromBehavior(object class, object, selector, fallbackTrampoline).
}.

Compiler compilationTarget objectModel
    sysmelMessageLookupFunction: normalMessageLookup;
    yourself
}.

}.
