namespace SysmelKernel definition: {

compileTimeConstant _BasicInitializeFunctionPointerType := ((Void pointer) => Void) pointer.

struct GCFunctionStackMapEntry definition: {
    field stackFrameSize public type: UInt32.
    field _ public type: UInt32.

    field safePointCount public type: UInt32.
    field rootCount public type: UInt32.

    field compiledMethod public type: UIntPointer. ## Can be null

    ## Safe points
    message safePoints => UIntPointer pointer
        := (self address [1]) address reinterpretCastTo: UIntPointer pointer.

    ## The root count with extra padding, if needed.
    if: UIntPointer instanceSize == 4 then: {
        message paddedRootCount => UInt32
            := rootCount.
    } else: {
        message paddedRootCount => UInt32
            := (rootCount & 1) == 0
                ifTrue: {rootCount}
                ifFalse: {rootCount + 1}.
    }.

    ## Roots
    message roots => Int32 pointer
        := self safePoints[safePointCount] address reinterpretCastTo: Int32 pointer.

    ## Next stack map entry address.
    message next => GCFunctionStackMapEntry pointer
        := self roots[self paddedRootCount] address reinterpretCastTo: GCFunctionStackMapEntry pointer.
}.

if: Compiler hasGarbageCollectionStackMap then: {
	global __sysmel_gc_section_start external externC mutable type: GCFunctionStackMapEntry.
	global __sysmel_gc_section_end external externC mutable type: GCFunctionStackMapEntry.
} else: {
	global __sysmel_gc_section_start externC mutable type: GCFunctionStackMapEntry.
	global __sysmel_gc_section_end externC mutable type: GCFunctionStackMapEntry.
}.


#**
 * _ObjectHeader
 * The header an object.
 *#
struct _ObjectHeader definition: {
    ## Pointer towards the main virtual table. Objects that implement interfaces
    ## can have additional vtables.
    field __vtable public type: Void pointer.

    if: UIntPointer instanceSize == 4 then: {
        ## TODO: Support big-endian.
        field __padding public type: UInt32.
    }.

    ## 32 bits: gc color, isPinned, isImmutable.
    field _ public bits: 5; type: UInt32.

    field __gcBits public type: UInt32; bits: 3.
    field __isPinned public type: UInt32; bits: 1.
    field __isImmutable public type: UInt32; bits: 1.
    field __identityHash public type: UInt32; bits: 22.

    ## Variable data size
    field __variableDataSize public type: UInt32.
}.

class SysmelGC definition: {
    field memoryHeap mutable type: StdNative NativeMemoryHeap.
    message printStackMap => Void := {
        <nogc>

        let start := __sysmel_gc_section_start address.
        let end := __sysmel_gc_section_end address.
        StdNative stdout << "Stack map start " << start << " end " << end; nl.

        for: (let position mutable := start) while: (position ~~ end) do: {
            StdNative stdout << "position " << position << " roots " << position _ rootCount << " safePoints " << position _ safePointCount; nl.
        } continueWith: (position := position _ next).
    }.

    message allocate: (objectSize: UIntPointer)
        variableDataSize: (variableDataSize: UInt32)
        initializingWith: (basicInitializer: _BasicInitializeFunctionPointerType)
          ::=> _ObjectHeader pointer := {
        <nogc>

        ##self printStackMap.

        ## Allocate the object memory.
        let allocatedObject := (memoryHeap allocate: objectSize) reinterpretCastTo: _ObjectHeader pointer.
        LibC memset(allocatedObject, 0, objectSize).

        ## Set the allocated object class.
        allocatedObject value
            __variableDataSize: variableDataSize.

        ## Perform the basic initialization. This sets the vtable pointers.
        basicInitializer _ (allocatedObject).

        return: allocatedObject
    }.
}.

global globalSysmelGC mutable type: SysmelGC.

}.

#**
 * This is the entry point for a sysmel image.
 *#
function __sylsif_entryPoint externC(sysmelImageMetadata: Void pointer, argc: Int32, argv: Char const pointer pointer) => Int32 := {
    LibC printf("__sylsif_entryPoint executed. Image metadata: %p\n", sysmelImageMetadata).
    return: 0.
}.
