namespace SysmelKernel definition: {

## Implement assignValue: in any value for better error reporting.
AnyValue macro selector: #assignValue: doOn: #{
semanticAnalysis: $$Pharo {
    node: node environment: environment position: aSourcePosition
        | reference referenceType value valueType |
        value := node arguments first semanticAnalysisInEnvironment: environment.
        reference := node receiver semanticAnalysisInEnvironment: environment.

        valueType := value evaluateTypeInEnvironment: environment.
        referenceType := reference evaluateTypeInEnvironment: environment.
        self error: 'Cannot assign value of type {1} into immutable value of type {2}' format:
            {valueType asString . referenceType asString} at: aSourcePosition
}.

}.

ReferenceType macro selector: #assignValue: doOn: #{
## Compile time evaluation
evaluation: $$Pharo {
    node: node environment: environment
        | reference rawValue coercedValue |

        "Evaluate the argument first"
        rawValue := node arguments first evaluateInEnvironment: environment.

        "Coerce the argument into the expected type."
        coercedValue := node coercionRule convertValue: rawValue into: node coercionType at: node position.

        "Evaluate the reference"
        reference := node receiver evaluateInEnvironment: environment.
        (reference type isReferenceType not or: [reference type referenced isConstantType ]) ifTrue: [
            self error: 'Expected a non-const reference for compile time assignation.' at: node position
        ].

        reference value sysmelSetReferencedValue: coercedValue.
        ^ reference
}.

## Semantic analysis
semanticAnalysis: $$Pharo {
    node: node environment: environment position: aSourcePosition
        | reference referenceType referencedType value valueType coercionType coercionRule |

        reference := node receiver semanticAnalysisInEnvironment: environment.
        referenceType := reference evaluateTypeInEnvironment: environment.

        "Allow overriding assignValue:"
        referencedType := referenceType referenced.
        (referencedType lookupSelector: #assignValue:) ifNotNil: [ :method |
            method parent name ~= #AnyValue ifTrue: [
                ^ method semanticAnalyzeMessage: node inEnvironment: environment at: aSourcePosition
            ].
        ].

        value := node arguments first semanticAnalysisInEnvironment: environment.
        valueType := value evaluateTypeInEnvironment: environment.
        self assert: referenceType isReferenceType.

        coercionType := referenceType referenced.
        coercionType isConstantType ifTrue: [
            self error: 'Cannot assign to constant.' at: aSourcePosition.
        ].

        coercionRule := valueType node: value coercedImplicitlyInto: coercionType at: node.
        ^ node copyForSemanticAnalysis
            metaMethod: self;
            receiver: reference;
            arguments: {value};
            coercionType: coercionType;
            coercionRule: coercionRule;
            valueType: referenceType;
            yourself
}.

## Code generation
codeGeneration: $$Pharo {
    node: messageNode builder: builder
        | value coercionType valueNode valueType reference instruction |
        valueNode := messageNode arguments first.
        valueType := valueNode type.

        coercionType := messageNode coercionType.
        value := messageNode coercionRule convertSSAValue: (valueNode generateSSACodeWith: builder) to: coercionType with: builder at: messageNode.

        reference := messageNode receiver generateSSACodeWith: builder.

        instruction := builder store: value in: reference.
        instruction volatile: coercionType isVolatileType.

        ^ reference
}.

}.

}. ## End of namespace SysmelKernel
