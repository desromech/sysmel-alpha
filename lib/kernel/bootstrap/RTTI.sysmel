namespace StdNative definition: {
namespace Reflection definition: {

## I am an instance of a program entity reflection data.
class ProgramEntity superclass: GCObjectHeader; definition: {
}.

## I am an instance of basic type information. I provide the bare minimun that is
## required for moving/copying any native object from one location to another by
## erasing its type. I am used for implementing the throwing of native exceptions.
class TypeInformation superclass: ProgramEntity; definition: {
    public field superclass type: TypeInformation pointer.
    public field instanceDataSize type: UIntPointer.
    public field instanceDataAlignment type: UIntPointer.

    public field basicInitializationFunctionPointer type: BasicInitializeFunctionPointerType.
    public field copyConstructorFunctionPointer type: CopyConstructorFunctionPointerType.
    public field moveConstructorFunctionPointer type: MoveConstructorFunctionPointerType.
    public field finalizeFunctionPointer type: FinalizeFunctionPointerType.

    const inline method instanceSize => UIntPointer
        := instanceDataSize.
    const inline method instanceAlignment => UIntPointer
        := instanceDataAlignment.
    const method isPointerReinterpretableTo: (other: TypeInformation const pointer) ::=> Boolean8 := {
        ## Am I the other type information?
        self address == other ifTrue: {
            return: true.
        }.

        ## Check in my base class.
        superclass ifNotNil: {
            return: (superclass _ isPointerReinterpretableTo: other)
        }.

        false
    }.
}.

class NamespaceInformation superclass: ProgramEntity; definition: {
}.


class ModuleNamespaceInformation superclass: ProgramEntity; definition: {
    public field sharedNamespace type: NamespaceInformation pointer.
}.

class ModuleInformation superclass: ProgramEntity; definition: {
    public field globalNamespace type: ModuleNamespaceInformation pointer.
}.

function typeInformationFromPointerToVTable(vtablePointer: Void const pointer) => TypeInformation pointer
    := (vtablePointer reinterpretCastTo: TypeInformation pointer const pointer const pointer)
        _ [-1].

_BehaviorType extend: {
    macro method asTypeInformation := ``(`,self reinterpretCastTo: StdNative Reflection TypeInformation const pointer).
}.

Compiler compilationTarget
    typeInformationNativeClass: TypeInformation;
    moduleNamespaceInformationNativeClass: ModuleNamespaceInformation;
    moduleInformationNativeClass: ModuleInformation.

}. ## End of namespace Reflection
}. ## End of namespace StdNative
