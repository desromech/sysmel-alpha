namespace SysmelKernel definition: {
    // ifTrue:ifFalse
    BooleanType macro expansionRule ifTrue: trueAction :=
        ``(if: `,self then: `,trueAction).
    BooleanType macro expansionRule ifFalse: falseAction :=
        ``(if: `,self not then: `,falseAction).

    BooleanType macro expansionRule ifTrue: trueAction ifFalse: falseAction :=
        ``(if: `,self then: `,trueAction else: `,falseAction).
    BooleanType macro expansionRule ifFalse: falseAction ifTrue: trueAction :=
        ``(if: `,self then: `,trueAction else: `,falseAction).

    // isNil
    PointerType macro expansionRule isNil := ``(`,self == nil).
    PointerType macro expansionRule isNotNil := ``(`,self ~~ nil).

    // ifNil:ifNotNil
    // TODO: Add higienic symbols.
    PointerType macro expansionRule ifNil: nilAction :=
        ``(if: `,self == nil then: `,nilAction).
    PointerType macro expansionRule ifNotNil: notNilAction :=
        ``(if: `,self ~~ nil then: `,notNilAction).

    PointerType macro expansionRule ifNotNil: notNilAction ifNil: nilAction :=
        ``(if: `,self ~~ nil then: `,notNilAction else: `,nilAction).
    PointerType macro expansionRule ifNil: nilAction ifNotNil: notNilAction :=
        ``(if: `,self == nil then: `,nilAction else: `,notNilAction).


    // floorAlignedTo:
    PrimitiveIntegerType macro expansionRule floorAlignedTo: alignment := ``(
        `,self & (`,alignment negated castTo: `,SelfType)
    ).

    // alignedTo:
    PrimitiveIntegerType macro expansionRule alignedTo: alignment := ``(
        (`,self + `,alignment - 1) & (`,alignment negated castTo: `,SelfType)
    ).

    // isAlignedTo:
    PointerType macro expansionRule isAlignedTo: alignment :=
        ``(((`,self reinterpretCastTo: UIntPointer) & (`,alignment - 1 castTo: UIntPointer)) == 0).

    // Bitwise logarithm base 2
    NumericalType macro expansionRule log2Floor :=
        ``(`,self highBit - 1).

    /**
     * According to https://en.wikipedia.org/wiki/Binary_logarithm:
     * floor(log2(n)) = ceil(log2(n + 1)) - 1
     * => ceil(log2(n + 1)) = floor(log2(n)) + 1
     * => ceil(log2(n)) = floor(log2(n - 1)) + 1
     */
    NumericalType macro expansionRule log2Ceil :=
        ``((`,self - 1) log2Floor + 1).

    // Bitwise manipulation.
    IntegerType macro expansionRule bitClear: bits :=
        ``(`,self & (`,bits bitInvert)).

    IntegerType macro expansionRule allMask: mask :=
        ``((`,self & `,mask) == `,bits).

    IntegerType macro expansionRule anyMask: mask :=
        ``((`,self & `,mask) ~~ 0).

    IntegerType macro expansionRule noMask: mask :=
        ``((`,self & `,mask) == 0).

    // Some numerical testing methods.
    IntegerType macro expansionRule isEven :=
        ``((`,self & 1) == 0).
    IntegerType macro expansionRule isOdd :=
        ``((`,self & 1) == 1).

}.
