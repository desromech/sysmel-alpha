namespace SysmelKernel definition: {
    PrimitiveIntegerType macro expansionRule floorAlignedTo: alignment := ``(
        self __macroExpand & (alignment __macroExpand negated castTo: SelfType __macroExpand)
    ).

    PrimitiveIntegerType macro expansionRule alignedTo: alignment := ``(
        (self __macroExpand + alignment __macroExpand - 1) & (alignment __macroExpand negated castTo: SelfType __macroExpand)
    ).

    // ifTrue:ifFalse
    BooleanType macro expansionRule ifTrue: trueAction :=
        ``(if: self __macroExpand then: trueAction __macroExpand).
    BooleanType macro expansionRule ifFalse: falseAction :=
        ``(if: self __macroExpand not then: falseAction __macroExpand).

    BooleanType macro expansionRule ifTrue: trueAction ifFalse: falseAction :=
        ``(if: self __macroExpand then: trueAction __macroExpand else: falseAction __macroExpand).
    BooleanType macro expansionRule ifFalse: falseAction ifTrue: trueAction :=
        ``(if: self __macroExpand then: trueAction __macroExpand else: falseAction __macroExpand).

    // isNil
    PointerType macro expansionRule isNil := ``(self __macroExpand == nil).
    PointerType macro expansionRule isNotNil := ``(self __macroExpand ~~ nil).

    // ifNil:ifNotNil
    // TODO: Add higienic symbols.
    PointerType macro expansionRule ifNil: nilAction :=
        ``(if: self __macroExpand == nil then: nilAction __macroExpand).
    PointerType macro expansionRule ifNotNil: notNilAction :=
        ``(if: self __macroExpand ~~ nil then: notNilAction __macroExpand).

    PointerType macro expansionRule ifNotNil: notNilAction ifNil: nilAction :=
        ``(if: self __macroExpand ~~ nil then: notNilAction __macroExpand else: nilAction __macroExpand).
    PointerType macro expansionRule ifNil: nilAction ifNotNil: notNilAction :=
        ``(if: self __macroExpand == nil then: nilAction __macroExpand else: notNilAction __macroExpand).


    // isAlignedTo:
    PointerType macro expansionRule isAlignedTo: alignment :=
        ``(((self __macroExpand reinterpretCastTo: UIntPointer) & (alignment - 1 castTo: UIntPointer)) == 0).

    // Bitwise logarithm base 2
    NumericalType macro expansionRule log2Floor :=
        ``(self __macroExpand highBit - 1).

    /**
     * According to https://en.wikipedia.org/wiki/Binary_logarithm:
     * floor(log2(n)) = ceil(log2(n + 1)) - 1
     * => ceil(log2(n + 1)) = floor(log2(n)) + 1
     * => ceil(log2(n)) = floor(log2(n - 1)) + 1
     */
    NumericalType macro expansionRule log2Ceil :=
        ``((self __macroExpand - 1) log2Floor + 1).

    // Bitwise manipulation.
    IntegerType macro expansionRule bitClear: bits :=
        ``(self __macroExpand & (bits __macroExpand bitInvert)).

    IntegerType macro expansionRule allMask: mask :=
        ``((self __macroExpand & mask __macroExpand) == bits __macroExpand).

    IntegerType macro expansionRule anyMask: mask :=
        ``((self __macroExpand & mask __macroExpand) ~~ 0).

    IntegerType macro expansionRule noMask: mask :=
        ``((self __macroExpand & mask __macroExpand) == 0).

    // Some numerical testing methods.
    IntegerType macro expansionRule isEven :=
        ``((self __macroExpand & 1) == 0).
    IntegerType macro expansionRule isOdd :=
        ``((self __macroExpand & 1) == 1).

}.
