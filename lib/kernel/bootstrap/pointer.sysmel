namespace SysmelKernel definition: {

ReferenceType macro selector: #address doOn: #{
evaluation: $$Pharo {
    node: node environment: environment
        | receiver |
        receiver := node receiver evaluateInEnvironment: environment.
        ^ receiver sameValueButWithType: node valueType
}.

## Semantic analysis
semanticAnalysis: $$Pharo {
    node: node environment: environment position: aSourcePosition
        | reference referenceType pointerType|

        "Check and coerce the pointer"
        reference := node receiver semanticAnalysisInEnvironment: environment.
        referenceType := reference evaluateTypeInEnvironment: environment.
        self assert: referenceType isReferenceType.

        pointerType := referenceType asPointerType.

        "Create the analyzed message"
        ^ node copyForSemanticAnalysis
            metaMethod: self;
            receiver: reference;
            valueType: pointerType;
            yourself
}.

## Code generation
codeGeneration: $$Pharo {
    node: messageNode builder: builder
        "Just evaluate the receiver"
        ^ messageNode receiver generateSSACodeWith: builder
}.
}.

PointerType macro selectors: #(value _) doOn: #{
## Semantic analysis
semanticAnalysis: $$Pharo {
    node: node environment: environment position: aSourcePosition
        | pointer rawPointerType pointerType pointerCoercionRule referenceType |

        "Check and coerce the pointer"
        pointer := node receiver semanticAnalysisInEnvironment: environment.
        rawPointerType := pointer evaluateTypeInEnvironment: environment.
        pointerType := rawPointerType valueType.
        self assert: pointerType isPointerType.

        pointerCoercionRule := rawPointerType node: pointer coercedImplicitlyInto: pointerType at: node.
        referenceType := pointerType asReferenceType.

        "Create the analyzed message"
        ^ node copyForSemanticAnalysis
            metaMethod: self;
            receiver: pointer;
            arguments: #();
            coercionType: pointerType;
            coercionRule: pointerCoercionRule;
            valueType: referenceType;
            yourself
}.

## Code generation
codeGeneration: $$Pharo {
    node: messageNode builder: builder
        "Just convert the pointer"
        ^ messageNode coercionRule convertSSAValue: (messageNode receiver generateSSACodeWith: builder)
            to: messageNode coercionType
            with: builder at: messageNode.
}.
}.

PointerType macro selectors: #(+ at: subscriptAt:) doOn: #{
evaluation: $$Pharo {
    node: node environment: environment
        | pointer index element |

        pointer := (node coercionRule first
            convertValue: (node receiver evaluateInEnvironment: environment)
            into: node coercionType first
            at: node) unwrapSysmelValue.
        index := (node coercionRule second
            convertValue: (node arguments first evaluateInEnvironment: environment)
            into: node coercionType second
            at: node) unwrapSysmelValue.
        "Zero-based into one based"
        node selector == #subscriptAt: ifTrue: [
            index := index + 1
        ].

        node valueType isReferenceType ifTrue: [
            ^ (SYMLArraySlotReference new
                container: pointer;
                type: node valueType valueType;
                slotIndex: index;
                yourself) asSysmelValueInEnvironment: environment
        ] ifFalse: [
            (pointer perform: node selector with: index) sysmelValueWithType: node valueType inEnvironment: environment
        ]
}.

## Semantic analysis
semanticAnalysis: $$Pharo {
    node: node environment: environment position: aSourcePosition
        | pointer rawPointerType pointerType pointerCoercionRule resultType index indexType coercionType coercionRule |

        "Check and coerce the pointer"
        pointer := node receiver semanticAnalysisInEnvironment: environment.
        rawPointerType := pointer evaluateTypeInEnvironment: environment.
        pointerType := rawPointerType valueType.
        self assert: pointerType isPointerType.

        pointerCoercionRule := rawPointerType node: pointer coercedImplicitlyInto: pointerType at: node.
        resultType := (#(+ -) includes: node selector)
            ifTrue: [ pointerType ]
            ifFalse: [ pointerType asReferenceType ].

        "Check the index type."
        index := node arguments first semanticAnalysisInEnvironment: environment.
        indexType := index evaluateTypeInEnvironment: environment.
        coercionType := indexType cleanValueType.

        coercionType isIntegerType ifFalse: [
            self error: 'Expected an integer for pointer element accessing.' at: aSourcePosition.
        ].
        coercionRule := indexType node: index coercedImplicitlyInto: coercionType at: node.

        "Create the analyzed message"
        ^ node copyForSemanticAnalysis
            metaMethod: self;
            receiver: pointer;
            arguments: {index};
            coercionType: {pointerType . coercionType};
            coercionRule: {pointerCoercionRule . coercionRule};
            valueType: resultType;
            yourself
}.

## Code generation
codeGeneration: $$Pharo {
    node: messageNode builder: builder
        | pointer index |
        "Convert the pointer"
        pointer := messageNode coercionRule first convertSSAValue: (messageNode receiver generateSSACodeWith: builder)
            to: messageNode coercionType first
            with: builder at: messageNode.

        "Convert the index"
        index := messageNode coercionRule second convertSSAValue: (messageNode arguments first generateSSACodeWith: builder)
            to: messageNode coercionType second
            with: builder at: messageNode.

        "One based indices into zero based"
        messageNode selector == #at: ifTrue: [
            index := builder sub: index with: (builder const: 1 type: index type)
        ].

        ^ builder getPointer: pointer element: {index}
}.

}.
}. ## End of namespace SysmelKernel
