namespace NStd definition: {

class AbstractMutex definition: {
    public field handle type: Unix pthread_mutex_t.

    method finalize => Void := {
        Unix pthread_mutex_destroy(handle address).
    }.

    method lock => Void := {
        Unix pthread_mutex_lock(handle address).
    }.

    method unlock => Void := {
        Unix pthread_mutex_unlock(handle address).
    }.

    macro method withLock: aBlock := ``{
        `,self lock.
        `,aBlock __macroInlineBlockEnsure: `,self unlock.
    }.
}.

#**
 * Pthread mutex wrapper.
 *#
class Mutex superclass: AbstractMutex; definition: {
    method initialize => Void := {
        Unix pthread_mutex_init(handle address, nil).
    }.
}.

class MemoryHeapMutex superclass: Mutex; definition: {}.

#**
 * Pthread recursive mutex wrapper.
 *#
class RecursiveMutex superclass: AbstractMutex; definition: {
    method initialize => Void := {
        let attributes mutable type: Unix pthread_mutexattr_t.
        Unix pthread_mutexattr_init(attributes address).
        Unix pthread_mutexattr_settype(attributes address, Unix PTHREAD_MUTEX_RECURSIVE).

        Unix pthread_mutex_init(handle address, attributes address).

        Unix pthread_mutexattr_destroy(attributes address).
    }.
}.

#**
 * Pthread condition variable wrapper.
 *#
class ConditionVariable
definition: {
    public field handle type: Unix pthread_cond_t.

    method initialize => Void := {
        Unix pthread_cond_init(handle address, nil).
    }.

    method finalize => Void := {
        Unix pthread_cond_destroy(handle address).
    }.

    method wait: (mutex: Mutex ref) ::=> Void := {
        Unix pthread_cond_wait(handle address, mutex handle address).
    }.

    method notifyOne => Void := {
        Unix pthread_cond_signal(handle address).
    }.

    method notifyAll => Void := {
        Unix pthread_cond_broadcast(handle address).
    }.
}.

#**
 * Semaphore implementation.
 *#
class Semaphore
definition: {
    field mutex type: Mutex.
    field condition type: ConditionVariable.
    field count type: UIntPointer.

    method initializeWithCount: (initialCount: UIntPointer) ::=> Void := {
        count := initialCount.
    }.

    method lock => Void := {
        self wait: 1
    }.

    method unlock => Void := {
        self signal: 1
    }.

    method signal => Void
        := self signal: 1.

    method wait => Void
        := self wait: 1.

    method signal: (n: UIntPointer) ::=> Void := {
        n == 0 ifTrue: {
            return: nil
        }.

        mutex withLock: {
            count := count + n.
            n > 1 ifTrue: {
                condition notifyAll.
            } ifFalse: {
                condition notifyOne.
            }
        }
    }.

    method wait: (n: UIntPointer) ::=> Void := {
        n == 0 ifTrue: {
            return: nil
        }.

        mutex withLock: {
            while: (count < n) do: {
                condition wait: mutex
            }.

            count := count - n
        }.
    }.
}.

Thread extend: {
    public field handle type: Unix pthread_t.

    method start: (entryPoint: NativeEntryPointFunctionType pointer) with: (argument: Void pointer)::=> Void := {
        Unix pthread_create(handle address, nil, entryPoint reinterpretCastTo: Unix pthread_start_routine_t pointer, argument).
    }.

    method detach => Void := {
        Unix pthread_detach(handle).
    }.

    method join => Void := {
        Unix pthread_join(handle, nil).
    }.
}.

}. ## End of namespace NStd
