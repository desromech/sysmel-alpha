namespace StdNative definition: {
namespace IO definition: {

#**
 * File stream class.
 *#
class FixedMemoryStream superclass: Stream;
definition: {
    protected field currentPosition type: UIntPointer.
    protected field dataSize type: UIntPointer.
    protected field basePointer type: UInt8 pointer.

    meta method for: (basePointer: Void pointer) withSize: (dataSize: UIntPointer) ::=> SelfType
        := SelfType newValue
            setBasePointer: basePointer withSize: dataSize;
            yourself.

	method setBasePointer: (theBasePointer: Void pointer) withSize: (theDataSize: UIntPointer) ::=> Void := {
		currentPosition := 0.
		basePointer := theBasePointer reinterpretCastTo: UInt8 pointer.
		dataSize := theDataSize.
	}.

    method currentPointer => UInt8 pointer
        := basePointer[currentPosition] address.

    override method atEnd => Boolean8
        := currentPosition >= dataSize.

    override method position => Int64
        := currentPosition castTo: Int64.

    override method seek: (offset: Int64) mode: (mode: SeekMode) ::=> Boolean8 := {
        let newPosition mutable type: IntPointer := -1.
        false
    }.

    override method write: (buffer: Void const pointer) size: (writeSize: UIntPointer) ::=> IntPointer := {
        let toWrite := dataSize - currentPosition min: writeSize.
        toWrite > 0 ifTrue: {
            memcpy(basePointer[currentPosition] address, buffer, toWrite).
            currentPosition := currentPosition + toWrite
        }.

        toWrite castTo: IntPointer
    }.

    override method read: (buffer: Void pointer) size: (readSize: UIntPointer) ::=> IntPointer := {
        let toRead := dataSize - currentPosition min: readSize.
        toRead > 0 ifTrue: {
            memcpy(buffer, basePointer[currentPosition] address, toRead).
            currentPosition := currentPosition + toRead
        }.

        toRead castTo: IntPointer
    }.
}.

}. ## End of namespace IO
}. ## End of namespace StdNative
