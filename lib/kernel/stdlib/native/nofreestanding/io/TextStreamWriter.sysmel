namespace StdNative definition: {
namespace IO definition: {

#**
 * Text stream writer
 *#
class TextStreamWriter definition: {
    field stream public type: Stream pointer.

    meta method for: (stream: Stream pointer) ::=> SelfType
        := SelfType newValue
            stream: stream;
            yourself.

    method nextPut: (character: Char32) ::=> Boolean8 := {
        let buffer mutable type: UInt8 := character castTo: UInt8.
        (stream _ write: buffer address size: 1) == 1
    }.

    method nextPut: (character: Int32) ::=> Boolean8
		:= self nextPut: (character castTo: Char32).

    method nextPutAll: (string: StdNative StringLiteral) ::=> Boolean8 := {
        (stream _ write: string [0] address size: string size) == (string size castTo: IntPointer)
    }.

    method write: (string: Void const pointer) size: (size: UIntPointer) ::=> Boolean8 := {
        (stream _ write: string size: size) == (size castTo: IntPointer)
    }.

    method nextPutBasicValuePrinterBuffer: (valuePrinter: BasicValuePrinter const ref) ::=> Boolean8 := {
        valuePrinter bufferSize > 0 ifTrue: {
            (stream _ write: valuePrinter buffer [0] address size: valuePrinter bufferSize) == (valuePrinter bufferSize castTo: IntPointer)
        } ifFalse: {
            true
        }
    }.

    method nextPutBoolean: (value: Boolean8) ::=> Void := {
        value ifTrue: {
			self nextPutAll: "true"
		} ifFalse:{
			self nextPutAll: "false"
		}
    }.

    method nextPutHexDigit: (digit: Int32) ::=> Void := {
        if: 0 <= digit && digit <= 9 then: {
            self nextPut: '0' + digit
        } else: {
            self nextPut: 'a' + digit - 10
        }
    }.

    ## Integer formatting.
    method nextPutInteger: (value: Int64) ::=> Void := {
        let integerPrinter mutable type: BasicValueIntegerPrinter.
        integerPrinter nextPutInteger: value.
        self nextPutBasicValuePrinterBuffer: integerPrinter
    }.

    method nextPutUnsignedInteger: (value: UInt64) ::=> Void := {
        let integerPrinter mutable type: BasicValueIntegerPrinter.
        integerPrinter nextPutUnsignedInteger: value.
        self nextPutBasicValuePrinterBuffer: integerPrinter
    }.

    ## Floating point formatting
    method nextPutSingleFloat: (float: Float32) ::=> Void := {
        let floatPrinter mutable type: BasicValueFloatPrinter.
        floatPrinter nextPutSingleFloat: float.
        self nextPutBasicValuePrinterBuffer: floatPrinter
    }.

    method nextPutDouble: (double: Float64) ::=> Void := {
        let floatPrinter mutable type: BasicValueFloatPrinter.
        floatPrinter nextPutDouble: double.
        self nextPutBasicValuePrinterBuffer: floatPrinter
    }.

    ## Pointer formatting.
    method nextPutLittleUInt32: (value: UInt32) ::=> Void := {
        let integerPrinter mutable type: BasicValueIntegerPrinter.
        integerPrinter nextPutLittleUInt32: value.
        self nextPutBasicValuePrinterBuffer: integerPrinter
    }.

    method nextPutHexPointer: (address: UInt32) ::=> Void := {
        let integerPrinter mutable type: BasicValueIntegerPrinter.
        integerPrinter nextPutHexUInt32: address.
        self nextPutBasicValuePrinterBuffer: integerPrinter
    }.

    method nextPutHexPointer: (address: UInt64) ::=> Void := {
        let integerPrinter mutable type: BasicValueIntegerPrinter.
        integerPrinter nextPutHexUInt64: address.
        self nextPutBasicValuePrinterBuffer: integerPrinter
    }.

    method nextPutHexPointer: (pointer: Void const pointer) ::=> Void := {
        self nextPutHexPointer: (pointer reinterpretCastTo: UIntPointer).
    }.

    method nextPutCString:(cstring: Char8 const pointer) ::=> Boolean8 := {
        cstring ifNil: {
            true
        } ifNotNil: {
            let length := cstrlen(cstring).
            (stream _ write: cstring size: length) == (length castTo: IntPointer)
        }
    }.

    ## Special characters
    method tab => SelfType ref
        := self nextPut: '\t'; yourself.

    method lf => SelfType ref
        := self nextPut: '\n'; yourself.

    method cr => SelfType ref
        := self nextPut: '\r'; yourself.

    method crlf => SelfType ref
        := self nextPutAll: "\r\n"; yourself.

    method nl => SelfType ref
        := self lf; yourself.

    ## Convenience printing methods.
    method << (character: Char32) => SelfType ref
        := self nextPut: character; yourself.

    method << (string: StdNative StringLiteral) => SelfType ref
        := self nextPutAll: string; yourself.

    method << (bool: Boolean8) => SelfType ref
        := self nextPutBoolean: bool; yourself.

    method << (integer: Int8) => SelfType ref
        := self nextPutInteger: integer; yourself.

    method << (integer: Int16) => SelfType ref
        := self nextPutInteger: integer; yourself.

    method << (integer: Int32) => SelfType ref
        := self nextPutInteger: integer; yourself.

    method << (integer: Int64) => SelfType ref
        := self nextPutInteger: integer; yourself.

    method << (integer: UInt8) => SelfType ref
        := self nextPutUnsignedInteger: integer; yourself.

    method << (integer: UInt16) => SelfType ref
        := self nextPutUnsignedInteger: integer; yourself.

    method << (integer: UInt32) => SelfType ref
        := self nextPutUnsignedInteger: integer; yourself.

    method << (integer: UInt64) => SelfType ref
        := self nextPutUnsignedInteger: integer; yourself.

    method << (pointer: Void const pointer) => SelfType ref
        := self nextPutHexPointer: pointer; yourself.

    method << (float: Float32) => SelfType ref
        := self nextPutSingleFloat: float; yourself.

    method << (double: Float64) => SelfType ref
        := self nextPutDouble: double; yourself.

    method << (exception: Exception const ref) => SelfType ref := {
        exception printOnNativeTextStreamWriter: self.
        self
    }.
}.

_PrimitiveVectorTypeTemplate extend: {
    let VectorType := SelfType.
    let VectorSize := SelfType elements.

    TextStreamWriter extend: {
        method nextPutVector: (vector: VectorType) ::=> Void := {
            self << vector x.
            compileTimeIf: VectorSize > 1 then: {
                self nextPut: ' '.
                self << vector y.
                compileTimeIf: VectorSize > 2 then: {
                    self nextPut: ' '.
                    self << vector z.
                    compileTimeIf: VectorSize > 3 then: {
                        self nextPut: ' '.
                        self << vector w.
                    }
                }
            }.
        }.

        method << (vector: VectorType) => SelfType ref := {
            self nextPutVector: vector.
            self
        }.
    }.
}.

}. ## End of namespace IO

global stdout mutable := IO TextStreamWriter for: IO stdoutFile address.
global stderr mutable := IO TextStreamWriter for: IO stderrFile address.

}. ## End of namespace StdNative
