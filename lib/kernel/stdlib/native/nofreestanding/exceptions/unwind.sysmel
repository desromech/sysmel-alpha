namespace StdNative definition: {

namespace Unwind definition: {

## libunwind bindings according to the Itanium C++:
## https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html
enum _Unwind_Reason_Code valueType: Int32; values: #{
    _URC_NO_REASON: 0.
	_URC_FOREIGN_EXCEPTION_CAUGHT: 1.
	_URC_FATAL_PHASE2_ERROR: 2.
	_URC_FATAL_PHASE1_ERROR: 3.
	_URC_NORMAL_STOP: 4.
	_URC_END_OF_STACK: 5.
	_URC_HANDLER_FOUND: 6.
	_URC_INSTALL_CONTEXT: 7.
	_URC_CONTINUE_UNWIND: 8.
}.

struct _Unwind_Exception.
compileTimeConstant _Unwind_Exception_Cleanup_Fn := ((_Unwind_Reason_Code -- _Unwind_Exception pointer) => Void) pointer.

_Unwind_Exception definition: {
    public field exceptionClass type: UInt64.
    public field exceptionCleanup type: _Unwind_Exception_Cleanup_Fn.
    public field private1 type: UInt64.
    public field private2 type: UInt64.
}.

struct _Unwind_Context.

function _Unwind_RaiseException externC(exception_object: _Unwind_Exception pointer) => _Unwind_Reason_Code.
function _Unwind_Resume externC(exception_object: _Unwind_Exception pointer) => Void.
function _Unwind_DeleteException externC(exception_object: _Unwind_Exception pointer) => Void.

function _Unwind_GetGR externC(context: _Unwind_Context pointer, index: Int32) => UInt64.
function _Unwind_SetGR externC(context: _Unwind_Context pointer, index: Int32, newValue: UInt64) => UInt64.
function _Unwind_GetIP externC(context: _Unwind_Context pointer) => UInt64.
function _Unwind_SetIP externC(context: _Unwind_Context pointer, newValue: UInt64) => UInt64.
function _Unwind_GetLanguageSpecificData externC(context: _Unwind_Context pointer) => UInt64.
function _Unwind_GetRegionStart externC(context: _Unwind_Context pointer) => UInt64.

compileTimeConstant _Unwind_Action := Int32.
compileTimeConstant _UA_SEARCH_PHASE := 1.
compileTimeConstant _UA_CLEANUP_PHASE := 2.
compileTimeConstant _UA_HANDLER_FRAME := 4.
compileTimeConstant _UA_FORCE_UNWIND := 8.

enum SysmelExceptionKind valueType: Int32; values: #{
    NonLocalReturn: 0.
    Native: 1.
    GCException: 2.
    Foreign: 3.
}.

struct SysmelUnwindExceptionData definition: {
    public field kind type: SysmelExceptionKind.
    public field exceptionObjectPointer type: Void pointer.
    public field unwindException type: _Unwind_Exception.
}.

function __sysmel_eh_personality externC(
    version: Int32, actions: _Unwind_Action,
    exceptionClass: UInt64,
    exceptionObject: _Unwind_Exception pointer, context: _Unwind_Context pointer) => _Unwind_Reason_Code := {

    stdout << "TODO: Implement personality function"; nl.
    native_abort().
    _Unwind_Reason_Code _URC_NO_REASON.
}.

function __sysmel_eh_handleForbiddenException externC(exceptionData: Void pointer) => Void := {
	raiseForbiddenExceptionDuringCleanUp().
}.

function allocateNativeExceptionData(typeInfo: TypeInformation const pointer) => SysmelUnwindExceptionData pointer := {
    let heapExceptionObject := zmalloc(typeInfo _ instanceSize).
    typeInfo _ basicInitializationFunctionPointer(heapExceptionObject).

    let exceptionData := SysmelUnwindExceptionData basicNativeNew.

    exceptionData _
        kind: SysmelExceptionKind Native;
        exceptionObjectPointer: heapExceptionObject.
	exceptionData
}.

if: Compiler hasExceptions then: {
    Exception extend: {
        method signal ::=> Void := {
            ## Use the RTTI type information for cloning the exception object into the heap.
            let exceptionData := allocateNativeExceptionData(self __typeInformation).
            (exceptionData _ exceptionObjectPointer reinterpretCastTo: Exception pointer) _
                initializeFromCopy: self.

            ## Raise the actual exception.
			_Unwind_RaiseException(exceptionData _ unwindException address).

            ##stderr << "TODO raise: [" << self address << "]: " << self; nl.
            native_abort().
        }.
    }
}.

Compiler compilationTarget
    personalityFunction: __sysmel_eh_personality;
    forbiddenExceptionHandlingFunction: __sysmel_eh_handleForbiddenException;
    yourself.
}.

}.
