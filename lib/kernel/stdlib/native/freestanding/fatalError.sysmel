namespace StdNative definition: {

if: Compiler compilationTarget hasNoOperatingSystem then: {
    message fatalError: (errorMessage: StringLiteral) ::=> Void := {
        ## TODO: Use a trap instruction here.
    }.
} else: {
    message fatalError: (errorMessage: StringLiteral) ::=> Void := {
		LibC printf("FATAL ERROR: %.*s\n", errorMessage size castTo: Int32, errorMessage elements address).
        ##stderr << "FATAL ERROR: " << errorMessage; nl.
        native_abort().
    }.
}.

#**
 * assert: an assertion that can be disabled in compile time.
 *#
macro expansionRule assert: condition := {
    let position := condition asSourcePositionString.
    let expression := condition originalSourceCode.
    let errorMessage := "Assertion " -- expression -- " FAILED in " -- position.
    let messageNode := __astBuilder literalString: errorMessage position: condition position.

    ``(`,condition ifFalse: {
        StdNative fatalError: `,messageNode
    })
}.

#**
 * assertAlways: An assertion that is always active.
 *#
macro expansionRule assertAlways: condition := {
    let position := condition asSourcePositionString.
    let expression := condition originalSourceCode.
    let errorMessage := "Assertion " -- expression -- " FAILED in " -- position.
    let messageNode := __astBuilder literalString: errorMessage position: condition position.

    ``(`,condition ifFalse: {
        StdNative fatalError: `,messageNode
    })
}.

}.
