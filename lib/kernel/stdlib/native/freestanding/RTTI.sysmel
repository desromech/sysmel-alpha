namespace StdNative definition: {
function typeInformationFromPointerToVTable(vtablePointer: Void const pointer) => TypeInformation pointer
    := (vtablePointer reinterpretCastTo: TypeInformation pointer const pointer const pointer)
        _ [-1].

compileTimeConstant NativeBasicInitializeFunctionPointerType := ((Void pointer) => Void) pointer.
compileTimeConstant CopyConstructorFunctionPointerType := ((Void pointer -- Void pointer) => Void) pointer.
compileTimeConstant MoveConstructorFunctionPointerType := ((Void pointer -- Void pointer) => Void) pointer.

## I am an instance of basic type information. I provide the bare minimun that is
## required for moving/copying any native object from one location to another by
## erasing its type. I am used for implementing the throwing of native exceptions.
class TypeInformation definition: {
    public field superclass type: TypeInformation pointer.
    public field instanceSize type: UIntPointer.
    public field instanceAlignment type: UIntPointer.

    public field basicInitializationFunctionPointer type: NativeBasicInitializeFunctionPointerType.
    public field copyConstructorFunctionPointer type: CopyConstructorFunctionPointerType.
    public field moveConstructorFunctionPointer type: MoveConstructorFunctionPointerType.

    const method isPointerReinterpretableTo: (other: TypeInformation const pointer) ::=> Boolean8 := {
        ## Am I the other type information?
        self address == other ifTrue: {
            return: true.
        }.

        ## Check in my base class.
        superclass ifNotNil: {
            return: (superclass _ isPointerReinterpretableTo: other)
        }.

        false
    }.
}.

_BehaviorType extend: {
    macro method asTypeInformation := ``(`,self reinterpretCastTo: StdNative TypeInformation const pointer).
}.

Compiler compilationTarget
    typeInformationNativeClass: TypeInformation.

}.
