namespace StdNative definition: {

if: Compiler compilationTarget hasNoOperatingSystem then: {
    message fatalError: (message: StringLiteral) ::=> Void := {
        // TODO: Use a trap instruction here.
    }.
} else: {
    message fatalError: (message: StringLiteral) ::=> Void := {
        stderr << "FATAL ERROR: " << message; nl.
        native_abort().
    }.
}.

/**
 * assert: an assertion that can be disabled in compile time.
 */
macro expansionRule assert: condition := {
    let position := condition position asString.
    let expression := condition originalSourceCode.
    let message := "Assertion " -- expression -- " FAILED in " -- position.
    let messageNode := __apsgBuilder literalString: message position: condition position.

    ``(`,condition ifFalse: {
        StdNative fatalError: `,messageNode
    })
}.

/**
 * assertAlways: An assertion that is always active.
 */
macro expansionRule assertAlways: condition := {
    let position := condition position asString.
    let expression := condition originalSourceCode.
    let message := "Assertion " -- expression -- " FAILED in " -- position.
    let messageNode := __apsgBuilder literalString: message position: condition position.

    ``(`,condition ifFalse: {
        StdNative fatalError: `,messageNode
    })
}.

}.
