namespace Smalltalk definition: {
Object extend: {
    method decodeFromSysmelBridge
        := self subclassResponsibility
}.

Number extend: {
    method decodeFromSysmelBridge
        := self
}.

String extend: {
    method decodeFromSysmelBridge
        := self
}.

Character extend: {
    method decodeFromSysmelBridge
        := self
}.

Array extend: {
    method decodeFromSysmelBridge
        := self collect: {:each :: ProtoObject | each decodeFromSysmelBridge}.
}.

Dictionary extend: {
    method decodeFromSysmelBridge := {
        ## StdNative stdout << "decodeFromSysmelBridge " << self; nl.
        let type := self at: #type.
        type == #Dictionary ifTrue: {
            return: (self at: #value).
        }.

        type == #CompiledMethod ifTrue: {
            let result := InterpretedMethod
                literals: (self at: #literals) decodeFromSysmelBridge
                bytecodes: (self at: #bytecodes).
            result numArgs: (self at: #numArgs) asUInt32.
            result numTemps: (self at: #numTemps) asUInt32.
            return: result.
        }.

        type == #GlobalVariable ifTrue: {
            let key := self at: #key.
            let nspace := (Smalltalk castTo: ProtoObject) sharedNamespace.
            return: (nspace associationAt: key)
        }.

        type == #Class ifTrue: {
            let key := self at: #name.
            let nspace := (Smalltalk castTo: ProtoObject) sharedNamespace.
            return: (nspace associationAt: key)
        }.

        type == #Metaclass ifTrue: {
            let key := self at: #name.
            let nspace := (Smalltalk castTo: ProtoObject) sharedNamespace.
            return: (nspace associationAt: key) class
        }.

        self error: "Unsupported object encoded as a dictionary: " -- type asString.
    }.
}.

}. ## End of namespace Smalltalk
