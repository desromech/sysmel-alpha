namespace NStd definition: {
namespace Serialization definition: {
namespace MessagePack definition: {

template Decoder(RT: Type)
 := class definition: {
    compileTimeConstant ResultType := RT.
    compileTimeConstant DefaultResult := RT defaultValue.

    class Callback definition: {
        virtual method onInteger: (value: Int64) ::=> ResultType
            := DefaultResult.

        virtual method onUnsignedInteger64: (value: UInt64) ::=> ResultType
            := DefaultResult.

        virtual method onNil ::=> ResultType
            := DefaultResult.

        virtual method onBoolean: (value: Boolean8) ::=> ResultType
            := DefaultResult.

        virtual method onFloat: (value: Float64) ::=> ResultType
            := DefaultResult.

        virtual method onArray: (elementCount: UInt32) ::=> ResultType
            := DefaultResult.

        virtual method onMap: (elementCount: UInt32) ::=> ResultType
            := DefaultResult.

        virtual method onString: (dataSize: UInt32) ::=> ResultType
            := DefaultResult.

        virtual method onBinary: (dataSize: UInt32) ::=> ResultType
            := DefaultResult.

        virtual method onExtension: (dataSize: UInt32) type: (type: UInt8) ::=> ResultType
            := DefaultResult.

        virtual method onUnusedFormat ::=> ResultType
            := DefaultResult.
    }.

    public field callback type: Callback pointer.
    public field reader type: NStd IO BinaryDataStreamReader.

    method beginDecodingStream: (stream: NStd IO Stream pointer) ::=> Void := {
        reader := NStd IO BinaryDataStreamReader for: stream.
        reader activeEndianness: NStd IO BinaryDataStreamEndianness Little.
    }.

    method readBytes: (count: UIntPointer) into: (buffer: Void pointer) ::=> Boolean8
        := reader nextBytes: count into: buffer.

    method decodeNextElement => ResultType := {
        let format := reader nextUInt8.

        format selectCase: #{
        ## Positive fixint
        (0 to: 16r7f) : {
            return: (callback _ onInteger: format & 16r7f)
        }.

        ## Fixmap
        (16r80 to: 16r8F) : {
            return: (callback _ onMap: (format - 16r80 castTo: UInt32))
        }.

        ## Fixarray
        (16r90 to: 16r9F) : {
            return: (callback _ onArray: (format - 16r90 castTo: UInt32))
        }.

        ## Fixstring
        (16rA0 to: 16rBF) : {
            return: (callback _ onString: (format - 16rA0 castTo: UInt32))
        }.

        ## nil
        16rC0 : {
            return: callback _ onNil
        }.
        ## (never used)
        16rC1 : {
            return: callback _ onUnusedFormat
        }.
        ## false
        16rC2 : {
            return: (callback _ onBoolean: false)
        }.
        ## true
        16rC3 : {
            return: (callback _ onBoolean: true)
        }.
        ## bin8
        16rC4 : {
            return: (callback _ onBinary: reader nextUInt8)
        }.
        ## bin16
        16rC5 : {
            return: (callback _ onBinary: reader nextUInt16)
        }.
        ## bin32
        16rC6 : {
            return: (callback _ onBinary: reader nextUInt32)
        }.

        ## ext8
        16rC7 : {
            return: (callback _ onExtension: reader nextUInt8 type: reader nextUInt8)
        }.
        ## ext16
        16rC8 : {
            return: (callback _ onExtension: reader nextUInt16 type: reader nextUInt8)
        }.
        ## ext32
        16rC9 : {
            return: (callback _ onExtension: reader nextUInt32 type: reader nextUInt8)
        }.
        ## float32
        16rCA : {
            return: (callback _ onFloat: reader nextFloat32)
        }.
        ## float64
        16rCB : {
            return: (callback _ onFloat: reader nextFloat64)
        }.
        ## uint8
        16rCC : {
            return: (callback _ onInteger: reader nextUInt8)
        }.
        ## uint16
        16rCD : {
            return: (callback _ onInteger: reader nextUInt16)
        }.
        ## uint32
        16rCE : {
            return: (callback _ onInteger: reader nextUInt32)
        }.
        ## uint64
        16rCF : {
            return: (callback _ onUnsignedInteger64: reader nextUInt64)
        }.
        ## int8
        16rD0 : {
            return: (callback _ onInteger: reader nextInt8)
        }.
        ## int16
        16rD1 : {
            return: (callback _ onInteger: reader nextInt16)
        }.
        ## int32
        16rD2 : {
            return: (callback _ onInteger: reader nextInt32)
        }.
        ## int64
        16rD3 : {
            return: (callback _ onInteger: reader nextInt64)
        }.
        ## fixext 1
        16rD4 : {
            return: (callback _ onExtension: 1 type: reader nextUInt8)
        }.
        ## fixext 2
        16rD5 : {
            return: (callback _ onExtension: 2 type: reader nextUInt8)
        }.
        ## fixext 4
        16rD6 : {
            return: (callback _ onExtension: 4 type: reader nextUInt8)
        }.
        ## fixext 8
        16rD7 : {
            return: (callback _ onExtension: 8 type: reader nextUInt8)
        }.
        ## fixext 16
        16rD8 : {
            return: (callback _ onExtension: 16 type: reader nextUInt8)
        }.
        ## str8
        16rD9 : {
            return: (callback _ onString: reader nextUInt8)
        }.
        ## str16
        16rDA : {
            return: (callback _ onString: reader nextUInt16)
        }.
        ## str32
        16rDB : {
            return: (callback _ onString: reader nextUInt32)
        }.
        ## array 16
        16rDC : {
            return: (callback _ onArray: reader nextUInt16)
        }.
        ## array 32
        16rDD : {
            return: (callback _ onArray: reader nextUInt32)
        }.
        ## map 16
        16rDE : {
            return: (callback _ onMap: reader nextUInt16)
        }.
        ## map 32
        16rDF : {
            return: (callback _ onMap: reader nextUInt32)
        }.

        ## Negative fixint
        (16rE0 to: 16rFF) : {
            return: (callback _ onInteger: (format castTo: Int8))
        }.

        }.

        ## We should never reach here. All possible format values are covered by the spec.
        abort()
    }.
}.

}. ## End of namespace MessagePack
}. ## End of namespace Serialization
}. ## End of namespace NStd
