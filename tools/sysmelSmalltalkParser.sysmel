Compiler importModulesNamed: #(
    #"Sysmel.Compiler.SmalltalkLanguage"
).

useNamespace: Sysmel Compiler Parsing.
useNamespace: Sysmel Compiler SmalltalkLanguage.

function parseAndVerifySourceCode(fileName: Std ImmutableString, content: Std String const ref) => Void := {
    let sourceCode := SourceCode rcNew.
    sourceCode _
        content: content;
        name: fileName.

    let tokenizedSourceCode := Scanner() scan: sourceCode.
    tokenizedSourceCode _ tokens do: {:each :: Void |
        each type isError ifTrue: {
            Std stderr << each position << ": tokenization error: " << each type; nl
        }.
    }.

    let ast := Parser() parse: tokenizedSourceCode.
    ASTParseErrorCheckerVisitor verify: ast _ callback: {:parserErrorNode :: Void |
        Std stderr << parserErrorNode sourcePosition << ": " << parserErrorNode errorMessage; nl
    }.
}.

Std MainEntryPoint: {:args :: Int32 |
    (args elements from: 1 until: args size) do: {:arg :: Void |

        arg = "-" ifTrue: {
            let contents := Std stdin readUntilEnd.
            parseAndVerifySourceCode("stdin", contents)
        } ifFalse: {
            let contents := arg asNativeFileReference utf8Contents.
            contents ifNil: {
                Std stderr << "Failed to read content of file named " << arg; nl.
                return: 1
            }.

            parseAndVerifySourceCode(arg, contents _)
        }.
    }.

    0
}.
