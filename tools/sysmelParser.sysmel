Compiler importModulesNamed: #(
    #"Sysmel.Compiler.SysmelLanguage"
    #"Sysmel.Tools.LanguageServerProtocol"
).

useNamespace: Sysmel Compiler Parsing.
useNamespace: Sysmel Compiler SysmelLanguage.
useNamespace: Sysmel Tools LanguageServerProtocol.

function parseAndVerifySourceCode(fileName: Std ImmutableString, content: Std String const ref) => Void := {
    let sourceCode := SourceCode new
        content: content;
        name: fileName;
        yourself.

    let tokenizedSourceCode := Scanner() scan: sourceCode.
    tokenizedSourceCode tokens do: {:each :: Void |
        each type isError ifTrue: {
            Std stderr << each position << ": tokenization error: " << each type; nl
        }.
    }.

    let ast := Parser() parse: tokenizedSourceCode.
    ASTParseErrorCheckerVisitor verify: ast callback: {:parserErrorNode :: Void |
        Std stderr << parserErrorNode sourcePosition << ": " << parserErrorNode errorMessage; nl
    }.
}.

function startLanguageServerOnStdio() => Void := {
    let server mutable := LanguageServer().
    server
        setForStdio;
        run
}.

Std MainEntryPoint: {:args :: Int32 |
    for: (let i mutable type: UIntPointer := 1) while: (i < args size) do: {
        let arg := args[i].

        arg selectCase: #{
        "-" : {
            let contents := Std stdin readUntilEnd.
            parseAndVerifySourceCode("stdin", contents)
        }.
        "-lang-server" : {
            let endpointName := args[i := i + 1].
            endpointName = "stdio" ifTrue: {
                startLanguageServerOnStdio()
            } ifFalse: {
                Std stderr << "Unsupported language server protocol endpoint."; nl.
                return: 1
            }
        }.
        _ : {
            let contents := arg asNativeFileReference utf8Contents.
            contents ifNil: {
                Std stderr << "Failed to read content of file named " << arg; nl.
                return: 1
            }.

            parseAndVerifySourceCode(arg, contents _)
        }.
        }
    } continueWith: (i := i + 1).

    0
}.
