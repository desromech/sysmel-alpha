// Main function
function printf externC CVariadic (format: Char const pointer) -> Int32.

struct SomeStruct := {
    field first type: Float32.
    field second type: Float64.
}.

template Vector3(S: Type) := struct definition: {
    using Scalar := S.
    using Vector3F := Vector3(Float32).
    using Vector3D := Vector3(Float64).

    field x public type: Scalar.
    field y public type: Scalar.
    field z public type: Scalar.

    message + (o: SelfType) ::-> SelfType := {
        return: (SelfType newValue
            x: x + o x;
            y: y + o y;
            z: z + o z;
            yourself
        )
    }.

    message asVector3D ::-> Vector3D := {
        return: (Vector3D newValue x: x; y: y; z: z; yourself)
    }.

    message asVector3F ::-> Vector3F := {
        return: (Vector3F newValue
            x: (x castTo: Float32);
            y: (y castTo: Float32);
            z: (z castTo: Float32);
            yourself)
    }.
}.

using Vector3F := Vector3(Float32).
using Vector3D := Vector3(Float64).


function main externC (argc: Int32, argv: Char const pointer pointer) -> Int32 := {
    let i := 1.
    printf("i address: %p\n", i address).
    until: i >= argc do: {
        if: i = 1 then: {
            printf("First ").
        } else: {
            printf("Not first ").
        }.

        printf("argv %d %p %p: %s\n", i, argv[i] address, argv + i, argv[i]).
    } continueWith: {i := i + 1}.

    printf("Hello World: %s\n", argv value).
    return: 0.
}.
