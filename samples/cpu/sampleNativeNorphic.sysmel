Compiler
    importModuleNamed: #"Norphic.Core";
	importModuleNamed: #"Sysmel.Graphics.Headfull".

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Graphics GUI.
useNamespace: Stdn Math Geometry.
useNamespace: Norphic.

function main externC (argc: Int32, argv: UInt8 const pointer pointer) => Int32 := {
    let windowSystem mutable := createDefaultWindowSystem().
    windowSystem ifNil: {
        return: 0
    }.
    windowSystem _ targetFrameRate: 20.

    ## Create the main window.
    let mainWindow := SystemWindowNorph createFor: windowSystem title: "Test Norphic" asMutableString extent: Int32x2(640, 480).
    mainWindow ifNil: {
        return: 0.
    }.

    let mainSizer := VerticalBoxSizer sharedNew.

    ## Menu bar
    {
        let menuBar := MenuBarNorph sharedNew.
        mainWindow _ addSubnorph: (menuBar upCastFor: Norph).
        mainSizer _ element: menuBar do: {:constraints :: Void |
            constraints expanded.
        }.

        menuBar _
            addMenu: "File" asMutableString with: {:menu :: Void |
                menu
                    addItem: "New" asMutableString doing: { :(NorphEvent ref) event :: Void |
                        Stdn stdout << "TODO: File new"; nl.
                    };
                    addItem: "Open" asMutableString doing: { :(NorphEvent ref) event :: Void |
                        Stdn stdout << "TODO: File open"; nl.
                    };
                    addSeparator;
                    addItem: "Exit" asMutableString doing: { :(NorphEvent ref) event :: Void |
                        mainWindow _ destroy
                    }
            };
            addMenu: "Help" asMutableString with: {:menu :: Void |
                menu addItem: "About" asMutableString doing: { :(NorphEvent ref) event :: Void |
                    Stdn stdout << "TODO: Help about"; nl.
                }
            }
    }.

    let contentPanel := Norph sharedNew.
    contentPanel _ color: Float32x4 zeros.
    mainWindow _ addSubnorph: (contentPanel upCastFor: Norph).
    mainSizer _ element: contentPanel do: {:constraints :: Void |
        constraints expanded; proportion: 1.0f.
    }.

    ## Status bar
    {
        let statusBar := StatusBarNorph sharedNew.
        mainWindow _ addSubnorph: (statusBar upCastFor: Norph).
        mainSizer _ element: statusBar do: {:constraints :: Void |
            constraints expanded.
        }.
    }.

    mainWindow _
        sizer: (mainSizer upCastFor: Sizer);
        autolayout: true;
        updateLayout.

    ## Rectangle with border.
    let list := ListViewNorph sharedNew.
    {
        let borderedNorph := BorderedNorph sharedNew.
        borderedNorph _
            bounds: (RectangleF32 min: Float32x2(50.0f, 50.0f) extent: Float32x2(50.0f, 50.0f));
            color: Float32x4(1.0f, 0.0f, 0.0f, 1.0f);
            borderColor: Float32x4(0.0f, 0.0f, 0.0f, 1.0f).
        contentPanel _ addSubnorph: (borderedNorph upCastFor: Norph).
    }.

    ## Sample label
    {
        let label := LabelNorph sharedNew.
        label _
            bounds: (RectangleF32 min: Float32x2(150.0f, 50.0f) extent: Float32x2(100.0f, 100.0f));
            text: "Hello World" asMutableString.
        contentPanel _ addSubnorph: (label upCastFor: Norph).
    }.

    ## Sample button
    {
        let button := SimpleButtonNorph sharedNew.
        button _
            bounds: (RectangleF32 min: Float32x2(200.0f, 100.0f) extent: Float32x2(100.0f, 40.0f));
            text: "Button" asMutableString.
        contentPanel _ addSubnorph: (button upCastFor: Norph).

        button _ when: NorphActivatedEvent do: { :(NorphEvent ref) event :: Void |
            list _ addItem: "Extra item" asMutableString.
        }.
    }.

    ## List view
    {
        list _
            bounds: (RectangleF32 min: Float32x2(50.0f, 150.0f) extent: Float32x2(200.0f, 200.0f));
            addItem: "First" asMutableString;
            addItem: "Second" asMutableString;
            addItem: "Third" asMutableString.
        contentPanel _ addSubnorph: (list upCastFor: Norph).
    }.

    ## Sample text input
    {
        let textInput := TextInputNorph sharedNew.
        textInput _
            bounds: (RectangleF32 min: Float32x2(400.0f, 50.0f) extent: Float32x2(200.0f, 40.0f)).
        contentPanel _ addSubnorph: (textInput upCastFor: Norph).
    }.

    ## Sample text area
    {
        let textArea := TextAreaNorph sharedNew.
        textArea _
            bounds: (RectangleF32 min: Float32x2(400.0f, 150.0f) extent: Float32x2(200.0f, 200.0f)).
        contentPanel _ addSubnorph: (textArea upCastFor: Norph).
    }.

    ## Run the actual main loop.
    return: windowSystem _ runMainLoop.
}.
