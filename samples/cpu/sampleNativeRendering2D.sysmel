Compiler
	importModuleNamed: #"Std.Graphics.Headfull".

useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.
useNamespace: Std Math Geometry.
useNamespace: Std Math LinearAlgebra.

compileTime constant Node2D := Std Graphics Scene2D Node.
compileTime constant Node2DPtr := Std Graphics Scene2D NodePtr.

class Sample definition: {
	public field vsyncDisabled type: Boolean8.
	public field mainWindow type: WindowRef.
	public field mainWindowRenderer type: WindowScene2DRendererPtr.
	public field fontFaceWithSize type: FontFaceWithSize rcPointer.

	public field mainRectangle type: RectangleF32.
	public field mainRectangleNormalColor type: Float32x4.
	public field mainRectangleHighlightColor type: Float32x4.
	public field mainRectangleColor type: Float32x4.
	public field frameTime type: Float32.
	public field currentTime type: Float32.
	public field lastFrameRenderingTime type: Float32.

	public field windowScaleTransform type: AffinePostTransform2dF32.
	public field currentTransform type: AffinePostTransform2dF32.

	method initialize => Void := {
		mainRectangle := RectangleF32 min: Float32x2(-25.0f, 5.0f) extent: Float32x2(200.0f, 100.0f).
		mainRectangleNormalColor := Float32x4(0.8f, 0.2f, 0.2f, 1.0f).
		mainRectangleHighlightColor := Float32x4(0.2f, 0.8f, 0.8f, 1.0f).
		mainRectangleColor := mainRectangleNormalColor.
	}.

	method buildRenderScene2D: (builder: Std Graphics Scene2D Builder ref) ::=> Node2DPtr := {
		let scene2D mutable :=
			(builder fillRectangle: mainRectangle color: mainRectangleColor) _ --
			((builder borderRectangle: mainRectangle color: Float32x4 black width: 4.0f) upCastFor: Node2D).
		scene2D := scene2D _ --
			((builder fillTriangle: Float32x2(40.0f, 300.0f) color: Float32x4(1.0f, 0.0f, 0.0f, 1.0)
				p2: Float32x2(440.0f, 300.0f) color: Float32x4(0.0f, 1.0f, 0.0f, 1.0)
				p3: Float32x2(240.0f, 50.0f) color: Float32x4(0.0f, 0.0f, 1.0f, 1.0)) upCastFor: Node2D).
		scene2D := scene2D _ --
			((builder text: "Hello World" at: Float32x2(80.0f, 128.0f) font: fontFaceWithSize color: Float32x4(0.0f, (currentTime *5.0f) cos*0.5f + 0.5f, 1.0f, 1.0f)) upCastFor: Node2D).

		scene2D := (builder transform: currentTransform node: scene2D) upCastFor: Node2D.

		{
			let frameRenderingCommandListTime := lastFrameRenderingTime * 1000.0f.
			let frameTimeString := Std String textStreamContents: {:out :: Void |
				out << "Frame time " << (frameTime * 1000.0) << " ms"; nl.
				out << "FPS " << 1.0f / frameTime; nl.
				out << "Current time " << currentTime; nl.
				out << "Rendering time " << frameRenderingCommandListTime << " ms".
			}.

			let frameTimeNode := (builder text: frameTimeString asArraySlice at: Float32x2(15.0f, 30.0f) font: fontFaceWithSize color: Float32x4 green) upCastFor: Node2D.
			scene2D := scene2D _ -- frameTimeNode
		}.

		(builder transform: windowScaleTransform node: scene2D) upCastFor: Node2D.
	}.

	method main => Int32 := {
		let windowSystem mutable := createDefaultWindowSystem().
	    windowSystem ifNil: {
	        return: 0
	    }.

	    ## Create the main window.
	    mainWindow := windowSystem createWindow: (WindowCreationInfo()
		 	title: "Sample Native Rendering 2D" asMutableString;
			extent: Int32x2(640, 480);
			resizable: true;
			animated: true;
			vsyncDisabled: vsyncDisabled;
			yourself).
	    mainWindow ifNil: {
	        return: 0.
	    }.

	    ## Create the main window renderer.
		mainWindowRenderer := mainWindow createScene2DRenderer.
		mainWindowRenderer ifNil: {
			return: 0.
		}.

	    ## Use the default font face.
	    let fontFace mutable := FontRegistry default defaultSans _ normalFace.
		fontFace ifNotNil: {
			fontFaceWithSize := fontFace _ getOrCreateFaceWithSize: 24.
		}.

	    ## Create the event handler.
		mainWindow eventHandler: (MainWindowEventHandler new
			sample: self address;
			upCastFor: EventHandler).

	    ## Run the actual main loop.
	    return: windowSystem runMainLoop.

	}.

	method render ::=> Void := {
		lastFrameRenderingTime := (Std Chrono profileTimeToRun: {
		mainWindowRenderer _
			clearColor: Float32x4(0.4f, 0.4f, 0.4f, 1.0f);
			renderScene: (self buildRenderScene2D: (mainWindowRenderer _ newSceneBuilder _));
			present
		}) castTo: Float32.
    }.

    method onMouseMoveEvent: (event: MouseMoveEvent ref) ::=> Void := {
        (mainRectangle includesPoint: (currentTransform inverseTransformPoint:
			(windowScaleTransform inverseTransformPoint: (event position castTo: Float32x2)))) ifTrue: {
            mainRectangleColor := mainRectangleHighlightColor.
        } ifFalse: {
            mainRectangleColor := mainRectangleNormalColor.
        }
    }.

    method onTickEvent: (event: TickEvent ref) ::=> Void := {
		frameTime := event deltaSeconds castTo: Float32.
        currentTime := currentTime + (frameTime min: 0.1).
		let extent := mainWindow extent castTo: Float32x2.
		windowScaleTransform := AffinePostTransform2dF32()
			setIdentity;
			scaleBy: extent y / 480.0f;
			yourself.
		currentTransform := AffinePostTransform2dF32()
			setIdentity;
			rotateByRadians: currentTime negated;
			translateBy: Float32x2(currentTime cos *100.0f, currentTime sin *100.0f);
			yourself.
        self render
    }.

    method onExposeEvent: (event: ExposeEvent ref) ::=> Void := {
        self render
    }.

    method onWindowCloseRequestEvent: (event: WindowCloseRequestEvent ref) ::=> Void := {
        mainWindow close
    }.

}.

class MainWindowEventHandler superclass: EventHandler; definition: {
	public field sample type: Sample pointer.

    override method onMouseMoveEvent: (event: MouseMoveEvent ref) ::=> Void := {
        sample _ onMouseMoveEvent: event
    }.

    override method onTickEvent: (event: TickEvent ref) ::=> Void := {
		sample _ onTickEvent: event
    }.

    override method onExposeEvent: (event: ExposeEvent ref) ::=> Void := {
		sample _ onExposeEvent: event
    }.

    override method onWindowCloseRequestEvent: (event: WindowCloseRequestEvent ref) ::=> Void := {
		sample _ onWindowCloseRequestEvent: event
    }.
}.

Std MainEntryPoint: {:args :: Int32 |
	let sample mutable := Sample().

	args do: {:arg :: Void |
		arg selectCase: #{
		"-no-vsync" : {
			sample vsyncDisabled: true
		}.
		_ : {}.
		}
	}.

	sample main.
}.
