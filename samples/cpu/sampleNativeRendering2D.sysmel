useNamespace: Stdn Graphics Core.
useNamespace: Stdn Graphics GUI.
useNamespace: Stdn Math Geometry.

let mainWindow mutable type: Window sharedPointer.
let mainDrawingSurface mutable type: Surface sharedPointer.
let fontFaceWithSize mutable type: FontFaceWithSize sharedPointer.

let mainRectangle mutable := RectangleF32 min: Float32x2(-25.0f, 5.0f) extent: Float32x2(200.0f, 100.0f).
let mainRectangleNormalColor := Float32x4(0.8f, 0.2f, 0.2f, 1.0f).
let mainRectangleHighlightColor := Float32x4(0.2f, 0.8f, 0.8f, 1.0f).
let mainRectangleColor mutable := mainRectangleNormalColor.
let currentTime mutable type: Float32.

class MainWindowEventHandler superclass: EventHandler; definition: {
    method render ::=> Void := {
        let canvas := mainDrawingSurface _ beginDrawingWithCanvas.
        canvas ifNil: {return: void}.

        canvas _ transform
            setIdentity;
            rotateByRadians: currentTime negated;
            translateBy: Float32x2(currentTime cos *100.0f, currentTime sin *100.0f).

        canvas _
            color: Float32x4(0.4f, 0.4f, 0.4f, 1.0f);
            clear;

            color: mainRectangleColor;
            fillRectangle: mainRectangle;

            black;
            drawRectangle: mainRectangle;

            white;
            fillTriangle: Float32x2(40.0f, 300.0f) color: Float32x4(1.0f, 0.0f, 0.0f, 1.0)
                p2: Float32x2(440.0f, 300.0f) color: Float32x4(0.0f, 1.0f, 0.0f, 1.0)
                p3: Float32x2(240.0f, 50.0f) color: Float32x4(0.0f, 0.0f, 1.0f, 1.0);

            fontFaceWithSize: fontFaceWithSize;
            color: Float32x4(0.0f, (currentTime *5.0f) cos*0.5f + 0.5f, 1.0f, 1.0f);
            drawUTF8String: "Hello World" at: Float32x2(80.0f, 128.0f).
    }.

    override method onMouseMoveEvent: (event: MouseMoveEvent ref) ::=> Void := {
        (mainRectangle includesPoint: (event position castTo: Float32x2)) ifTrue: {
            mainRectangleColor := mainRectangleHighlightColor.
            self render.
        } ifFalse: {
            mainRectangleColor := mainRectangleNormalColor.
            self render.
        }
    }.

    override method onTickEvent: (event: TickEvent ref) ::=> Void := {
        currentTime := event seconds castTo: Float32.
        self render
    }.

    override method onExposeEvent: (event: ExposeEvent ref) ::=> Void := {
        self render
    }.

    override method onWindowCloseRequestEvent: (event: WindowCloseRequestEvent ref) ::=> Void := {
        mainWindow _ close
    }.
}.

function main externC (argc: Int32, argv: UInt8 const pointer pointer) => Int32 := {
    let windowSystem mutable := createWindowSystem().
    windowSystem ifNil: {
        return: 0
    }.
    windowSystem _ targetFrameRate: 60.

    ## Create the main window.
    mainWindow := windowSystem _ createWindowWithTitle: "Test Window" asMutableString extent: Int32x2(640, 480).
    mainWindow ifNil: {
        return: 0.
    }.

    ## Create the main window drawing surface.
    mainDrawingSurface := mainWindow _ createDefaultDrawingSurface.
    mainDrawingSurface ifNil: {
        return: 0.
    }.

    ## Use the default font face.
    let fontFace mutable := FontRegistry default defaultSans _ normalFace.
    fontFaceWithSize := fontFace _ getOrCreateFaceWithSize: 24.

    ## Create the event handler.
    {
        let eventHandler := MainWindowEventHandler sharedNew.
        mainWindow _ eventHandler: (eventHandler upCastFor: EventHandler)
    }.

    ## Run the actual main loop.
    return: windowSystem _ runMainLoop.
}.
