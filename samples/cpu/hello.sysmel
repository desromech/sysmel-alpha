## Main function

global testGlobal mutable := 42.

function printValue(value: Int32) => Void := {
    StdNative stdout << "printValue Int32: " << value; nl.
}.

function printValue(value: Float32) => Void := {
    StdNative stdout << "printValue Float32: " << value; nl.
}.

function main externC (argc: Int32, argv: Char const pointer pointer) => Int32 := {
    StdNative stdout << "testGlobal " << testGlobal; nl.

    ##let s type: SomeStruct.

    1 to: 3 do: {:(UInt32)i :: Void |.
        StdNative stdout << "Loop iteration " << i; nl
    }.

    let v3f := Float32x3 x: 1.0 y: 2.0 z: 3.0.
    StdNative stdout << "v3f " << v3f; nl.

    let vp := v3f + (Float32x3 x: 4.0 y: 5.0 z: 6.0).
    StdNative stdout << "vp " << v3f; nl.

    let vps := v3f + 3.0.
    StdNative stdout << "vps " << v3f; nl.

    let v3d := Float64x3 x: v3f x y: v3f y z: v3f z.
    StdNative stdout << "v3d " << v3f; nl.

    let matrix := Float32x3x3 identity + Float32x3x3 identity.
    ##let matrix := Float32x3x3 rowMajorIndices * Float32x3x3 rowMajorIndices.
    ##let matrix mutable := Float32x3x3 identity + Float32x3x3 identity.
    LibC printf(
"zm
    %f %f %f
    %f %f %f
    %f %f %f\n",
    matrix firstColumn x, matrix secondColumn x, matrix thirdColumn x,
    matrix firstColumn y, matrix secondColumn y, matrix thirdColumn y,
    matrix firstColumn z, matrix secondColumn z, matrix thirdColumn z).

    let mv3f := matrix * v3f.
    LibC printf("mv3f %f %f %f\n", mv3f x, mv3f y, mv3f z).

    let v3fm := v3f * matrix.
    StdNative stdout << "v3fm " << v3fm; nl.
    StdNative stdout << "v3f dot: v3f" << (v3f dot: v3f); nl.

    let v3fc := v3f cross: v3f.
    StdNative stdout << "v3fc cross: v3f " << v3fc; nl.

    printValue(1).
    printValue(1.0).

    1 until: argc do: {:(Int32)i :: Void |.
        i = 1 ifTrue: {
            StdNative stdout << "First "
        } ifFalse: {
            StdNative stdout << "Not first "

        }.

        StdNative stdout << "argv " << i << " " << (argv[i] address) << " " << (argv + i) << " "; nextPutCString: argv[i]; nl
    }.

    StdNative stdout << "Hello World: "; nextPutCString: argv value; nl.

    StdNative stdout << "Object: " << (Smalltalk Object reinterpretCastTo: Void pointer); nl.
    StdNative stdout << "Object class: " << (Smalltalk Object class reinterpretCastTo: Void pointer); nl.

    useNamespace: Smalltalk.

    let o := Object.
    StdNative stdout << "o: " << (o reinterpretCastTo: Void pointer); nl.
    StdNative stdout << "o class: " << (o class reinterpretCastTo: Void pointer); nl.
    StdNative stdout << "Object basicNew: " << (Object basicNew reinterpretCastTo: Void pointer); nl.

    return: 0.
}.
