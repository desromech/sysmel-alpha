class ClassWithMethodDictionary superclass: Std RCObject; definition: {
    SelfType setMethodDictionaryRequired.

    method testMethodA => Void := {

    }.

    method testMethodB => Void := {

    }.
}.

class SubClassWithMethodDictionary superclass: ClassWithMethodDictionary; definition: {

}.

class SubClassWithMethodDictionary2  superclass: ClassWithMethodDictionary; definition: {

}.


Std MainEntryPoint: {:args :: Int32 |
    let typeInfo := ClassWithMethodDictionary asTypeInformationMetadata.
    Std stdout << "typeInfo " << typeInfo << ": " << typeInfo _ name << " children " << typeInfo _ staticlyDefinedChildren size; nl.
    typeInfo _ staticlyDefinedChildren do: {:child :: Void |
        Std stdout << "child " << child << ": " << child _ name; nl.
        child _ isFunctionalObjectInformationMetadata ifTrue: {
            let functionalObject := child castTo: Std Reflection FunctionalObjectInformationMetadata pointer.
            Std stdout << "    entryPoint " << functionalObject _ entryPoint; nl.
            Std stdout << "    type " << functionalObject _ type; nl.
        }.
    }.

    typeInfo _ subclasses do: {:subclass :: Void |
        Std stdout << "subclass " << subclass _ name; nl.
    }.

    let module := typeInfo _ module.
    module ifNotNil: {
        Std stdout << "module " << module << ": " << module _ name ; nl.
    }.

    0
}.
