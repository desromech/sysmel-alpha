class ClassWithMethodDictionary superclass: Std RCObject; definition: {
    SelfType setMethodDictionaryRequired.

    method testMethodA => Void := {

    }.

    method testMethodB => Void := {

    }.
}.

class SubClassWithMethodDictionary superclass: ClassWithMethodDictionary; definition: {

}.

class SubClassWithMethodDictionary2  superclass: ClassWithMethodDictionary; definition: {

}.


Std MainEntryPoint: {:args :: Int32 |
    let typeInfo := ClassWithMethodDictionary asTypeInformation.
    Std stdout << "typeInfo " << typeInfo << ": " << typeInfo name << " children " << typeInfo children size; nl.

    typeInfo children do: {:child :: Void |
        Std stdout << "child " << child << ": " << child name; nl.
        child isFunctionalObjectInformation ifTrue: {
            let functionalObject := child downCastFor: Std Reflection FunctionalObjectInformation.
            Std stdout << "    entryPoint " << functionalObject entryPoint; nl.
            Std stdout << "    type " << functionalObject type; nl.
        }.
    }.

    let typeInfoMetadata := typeInfo metadata castTo: Std Reflection TypeInformationMetadata pointer.
    Std stdout << "staticlyDefinedMethodDictionary"; nl.
    typeInfoMetadata _ staticlyDefinedMethodDictionary do: {:assoc :: Void |
        Std stdout << assoc key << " : " << assoc value; nl.
    }.

    Std stdout << "staticlyDefinedOverloadedMethodDictionary"; nl.
    typeInfoMetadata _ staticlyDefinedOverloadedMethodDictionary do: {:assoc :: Void |
        Std stdout << assoc key << " : " << assoc value; nl.
    }.

    Std stdout << "staticlyDefinedMacroMethodDictionary"; nl.
    typeInfoMetadata _ staticlyDefinedMacroMethodDictionary do: {:assoc :: Void |
        Std stdout << assoc key << " : " << assoc value; nl.
    }.

    typeInfo subclasses do: {:subclass :: Void |
        Std stdout << "subclass " << subclass name; nl.
    }.

    #*
    let module := typeInfo module.
    module ifNotNil: {
        Std stdout << "module " << module << ": " << module _ name ; nl.
    }.*#

    0
}.
