Compiler importModuleNamed: #"Sysmel.Graphics.Headfull".

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Graphics GUI.
useNamespace: Stdn Math Geometry.

compileTime constant Texture2DPtr := StrongTextureHandlePtr.
compileTime constant Node2D := Stdn Graphics Scene2D Node.
compileTime constant Node2DPtr := Stdn Graphics Scene2D NodePtr.

struct SimpleVertex definition: {
	public field position type: Float32x4.
	public field color type: Float32x4.
	public field normal type: Float32x3.
}.

class CameraTransformationState definition: {
	public field viewMatrix type: Float32x4x4.
    public field projectionMatrix type: Float32x4x4.
}.

class CameraState definition: {
    public field transformationState type: CameraTransformationState uniformBufferPointer.
}.

class ObjectTransformationState definition: {
    public field modelMatrix type: Float32x4x4.
}.

class ObjectState definition: {
    public field transformationState type: ObjectTransformationState uniformBufferPointer.
}.

class CheckboardShader definition: {
	public field cameraState type: CameraState bindingSetPointer.
	public field objectState type: ObjectState bindingSetPointer.

	class VertexIO definition: {
		public field position type: Float32x4; location: 0.
		public field color type: Float32x4; location: 1.
		public field normal type: Float32x3; location: 2.
    }.

	class FragmentOutput definition: {
		public field color0 type: Float32x4; location: 0.
    }.

    function vertex vertexShader(in: VertexIO inputChannel, out: VertexIO outputChannel, stageOut: GPU VertexStageOutput outputChannel) => Void := {
        let input := in receive.

		let worldPosition := objectState _ transformationState _ modelMatrix * input position.
		let viewPosition := cameraState _ transformationState _ viewMatrix * worldPosition.
		let screenPosition := cameraState _ transformationState _ projectionMatrix * viewPosition.

		let output mutable := input.
		output position: worldPosition.
		out send: output.

        stageOut send: (GPU VertexStageOutput()
            screenPosition: screenPosition;
            yourself
        ).
    }.

    function fragment fragmentShader(stageIn: VertexIO inputChannel, out: FragmentOutput outputChannel) => Void := {
        let input := stageIn receive.

		let P := input position xyz / input position w.
		let N := input normal normalized.
		let L := Float32x3(1, 1, 1) normalized.

		let x := P.
		## FIXME: This does not pass the validation without the Float32x3.
		let edge := 0.48f *Float32x3 ones smoothStepTo: 0.52f*Float32x3 ones value: 2*(x - (x + 0.5f) floor) abs. ##((x - x floor)*2 - 1) abs.
		let aliasFactor := 10.0f smoothStepTo: 30.0f value: P length.

		let stipple := fuzzyXor(fuzzyXor(edge x, edge y), edge z) interpolateTo: 0.5f at: aliasFactor.
		let albedo := stipple * Float32x3(1,1,1).
		## let albedo := edge.
		let NdotL := (N dot: L) max: 0.0f.

		let result := Float32x4(albedo*(0.2f + 0.8f*NdotL), 1.0f).
		##let result := Float32x4(N*0.5f + 0.5f, 1.0f).

        out send: (FragmentOutput() color0: result)
    }.
}.

function fuzzyXor(a: Float32, b: Float32) => Float32 := {
	(a max: b) - (a min: b)
}.

class Mesh definition: {
	public field vertexBinding type: VertexBindingPtr.
	public field indexBuffer type: BufferPtr.
	public field indexCount type: UInt32.

	method drawWith: (commandList: CommandList ref) ::=> Void := {
		commandList
			useVertexBinding: vertexBinding;
			useIndexBuffer: indexBuffer;
			drawElements: indexCount instanceCount: 1 firstIndex: 0 baseVertex: 0 baseInstance: 0.
	}.
}.
compileTime constant MeshPtr := Mesh sharedPointer.

class MeshBuilder definition: {
	public field renderingDevice type: RenderingDevicePtr.

	public field baseVertex type: UInt32.
	public field vertices type: Stdn Collections Vector(SimpleVertex).
	public field indices type: Stdn Collections Vector(UInt32).
	public field vertexLayout type: VertexLayoutPtr.

	method beginSubmesh => Void := {
		baseVertex := vertices size castTo: UInt32.
	}.

	method addVertex: (p: Float32x3) normal: (n: Float32x3) ::=> Void := {
		self addVertex: Float32x4(p, 1) normal: n
	}.

	method addVertex: (p: Float32x3) normal: (n: Float32x3) texcoord: (tc: Float32x2)::=> Void := {
		self addVertex: Float32x4(p, 1) normal: n texcoord: tc
	}.

	method addVertex: (p: Float32x4) normal: (n: Float32x3) ::=> Void := {
		self addVertex: p normal: n texcoord: 0
	}.

	method addVertex: (p: Float32x4) normal: (n: Float32x3) texcoord: (tc: Float32x2) ::=> Void := {
		vertices add: (SimpleVertex()
			position: p;
			normal: n;
			color: Float32x4 ones;
			yourself)
	}.

	method addTriangle: (i1: UInt32) i2: (i2: UInt32) i3: (i3: UInt32) ::=> Void := {
		indices
			add: i1 + baseVertex; add: i2 + baseVertex; add: i3 + baseVertex
	}.

	method finish => MeshPtr := {
		let vertexBuffers mutable := BufferPtr array (
			renderingDevice _ createBuffer: (BufferDescription()
				size: vertices size * SimpleVertex instanceSize;
				heapType: MemoryHeapType DeviceLocal;
				usageModes: BufferUsageMode Array;
				mainUsageMode: BufferUsageMode Array;
				stride: SimpleVertex instanceSize;
				yourself) initialData: vertices asArraySlice elements
		).

		let indexBuffer := renderingDevice _ createBuffer: (BufferDescription()
			size: indices size * 4;
			heapType: MemoryHeapType DeviceLocal;
			usageModes: BufferUsageMode ElementArray;
			mainUsageMode: BufferUsageMode ElementArray;
			stride: 4;
			yourself) initialData: indices asArraySlice elements.

		let vertexBinding := renderingDevice _ createVertexBindingFor: vertexLayout.
		vertexBinding _ bindVertexBuffers: vertexBuffers.

		let result := Mesh sharedNew.
		result _
			vertexBinding: vertexBinding;
			indexBuffer: indexBuffer;
			indexCount: (indices size castTo: UInt32).
		result
	}.
}.

class Sample definition: {
	public field vsyncDisabled type: Boolean8.
	field renderingDevice type: RenderingDevicePtr.
	field mainWindow type: Window sharedPointer.
	field mainWindowRenderer type: WindowScene2DRendererPtr.
	field fontFaceWithSize type: FontFaceWithSize sharedPointer.

	field shaderSignature type: ShaderSignaturePtr.

	field frameTime type: Float32.
	field currentTime type: Float32.
	field lastFrameRenderingTime type: Float32.

	field renderingCommandQueue type: CommandQueuePtr.
	field commandListAllocator type: CommandListAllocatorPtr.
	field commandList type: CommandListPtr.

	field colorBufferTextureHandle type: Texture2DPtr.
	field mainFrameBufferExtent type: UInt32x2.
	field mainFrameBuffer type: FramebufferPtr.
	field mainRenderPass type: RenderPassPtr.

	field cameraOrientation type: Float32x3x3.
	field cameraPosition type: Float32x3.
	field cameraAngle type: Float32x3.

	field renderingPipelineState type: PipelineStatePtr.

	field projectionMatrix type: Float32x4x4.
	field viewMatrix type: Float32x4x4.
	field modelMatrix type: Float32x4x4.

	field cameraStateBuffer type: BufferPtr.
	field cameraStateBinding type: ShaderResourceBindingsPtr.

	field cubeObjectStateBuffer type: BufferPtr.
	field cubeObjectStateBinding type: ShaderResourceBindingsPtr.

	field planeObjectStateBuffer type: BufferPtr.
	field planeObjectStateBinding type: ShaderResourceBindingsPtr.

	field planeMesh type: MeshPtr.
	field cubeMesh type: MeshPtr.

	field simpleVertexLayout mutable type: VertexLayoutPtr.

	method initialize => Void := {
		cameraOrientation := Float32x3x3 identity.
		cameraPosition := Float32x3(0, 1, 3).
		cameraAngle := Float32x3(0, 0, 0).
	}.

	method doRender3D => Void := {
		{
			let cameraTransformationState mutable := CameraTransformationState()
				viewMatrix: viewMatrix;
				projectionMatrix: projectionMatrix;
				yourself.

			cameraStateBuffer _ uploadAt: 0 size: CameraTransformationState instanceSize data: cameraTransformationState address.
		}.

		commandListAllocator _ resetAllocator.
		commandList _
			resetFor: commandListAllocator;
			useShaderSignature: shaderSignature;
			usePipelineState: renderingPipelineState;
			useGraphicShaderBindings: cameraStateBinding;

			beginRenderPass: mainRenderPass on: mainFrameBuffer contentOnBundle: false;
			setViewport: (RectangleI32 min: Int32x2 zeros max: (mainFrameBufferExtent castTo: Int32x2));
			setScissor: (RectangleI32 min: Int32x2 zeros max: (mainFrameBufferExtent castTo: Int32x2)).

		commandList _ useGraphicShaderBindings: planeObjectStateBinding.
		planeMesh _ drawWith: commandList _.

		commandList _ useGraphicShaderBindings: cubeObjectStateBinding.
		cubeMesh _ drawWith: commandList _.

		commandList _
			endRenderPass;
			close.

		renderingCommandQueue _
			submitCommandList: commandList;
			waitForIdle.
	}.

	method buildRenderScene2D: (builder: Stdn Graphics Scene2D Builder ref) ::=> Node2DPtr := {
		let rendering3DTime := (Stdn Chrono profileTimeToRun: {
			self doRender3D.
		}) castTo: Float32.

		let scene3DResult :=
			builder blendingMode: BlendingMode Copy node: ((
				builder texture: colorBufferTextureHandle rectangle: (RectangleF32 extent: (mainFrameBufferExtent castTo: Float32x2))
			) upCastFor: Node2D).

		let scene2D mutable := scene3DResult upCastFor: Node2D.

		{
			let frameRenderingCommandListTime := lastFrameRenderingTime * 1000.0f.
			let frameTimeString := Stdn String textStreamContents: {:out :: Void |
				out << "Frame time " << (frameTime * 1000.0) << " ms"; nl.
				out << "FPS " << 1.0f / frameTime; nl.
				out << "Current time " << currentTime; nl.
				out << "Rendering time " << frameRenderingCommandListTime << " ms".
			}.

			let frameTimeNode := (builder text: frameTimeString asArraySlice at: Float32x2(15.0f, 30.0f) font: fontFaceWithSize color: Float32x4 green) upCastFor: Node2D.
			scene2D := scene2D _ -- frameTimeNode
		}.

		scene2D
	}.

	method render ::=> Void := {
		(self setMainFramebufferWithExtent: mainWindow _ extent) ifFalse: {return: void}.

		lastFrameRenderingTime := (Stdn Chrono profileTimeToRun: {
			mainWindowRenderer _
				clearColor: Float32x4 zeros;
				renderScene: (self buildRenderScene2D: mainWindowRenderer _ newSceneBuilder _);
				present
		}) castTo: Float32.
    }.

	method onTickEvent: (event: TickEvent ref) ::=> Void := {
		frameTime := event deltaSeconds castTo: Float32.
        currentTime := currentTime + (frameTime min: 0.1).

		cameraOrientation := (Float32x3x3 yRotation: cameraAngle y) * (Float32x3x3 xRotation: cameraAngle x).
		viewMatrix := (Float32x4x4 mat3: cameraOrientation transpose)*(Float32x4x4 translation: cameraPosition negated).

        self render
    }.

	method onWindowCloseRequestEvent: (event: WindowCloseRequestEvent ref) ::=> Void := {
        mainWindow _ close
    }.

	method onMouseMoveEvent: (event: MouseMoveEvent ref) ::=> Void := {
		event isLeftButtonPressed ifTrue: {
			cameraAngle := cameraAngle + Float32x3(event delta y negated, event delta x negated, 0.0f)*0.01f.
		}.

		event isRightButtonPressed ifTrue: {
			cameraPosition := cameraPosition + cameraOrientation * Float32x3(event delta x, event delta y negated , 0.0f) *0.01f.
		}.
    }.

	method onMouseWheelEvent: (event: MouseWheelEvent ref) ::=> Void := {
		cameraPosition := cameraPosition + cameraOrientation * Float32x3(0.0f, 0.0f, event scrollDelta y * -0.1f).
    }.

	method setMainFramebufferWithExtent: (newExtent: UInt32x2) ::=> Boolean8 := {
		mainFrameBuffer isNotNil && mainFrameBufferExtent = newExtent ifTrue: {
			return: true
		}.

		mainFrameBuffer ifNotNil: {
			renderingDevice _ waitForIdle.
		}.

		let colorBuffer := renderingDevice _ createTexture: (TextureDescription()
			type: TextureType Texture2D;
			width: newExtent x;
			height: newExtent y;
			depth: 1;
			layers: 1;
			miplevels: 1;
			format: PixelFormat B8G8R8A8_UNormSRGB;
			usageModes: TextureUsageMode Sampled | TextureUsageMode ColorAttachment;
			mainUsageMode: TextureUsageMode Sampled;
			heapType: MemoryHeapType DeviceLocal;
			sampleCount: 1;
			yourself).
		let colorBufferTextureView := colorBuffer _ getOrCreateFullView.

		colorBufferTextureHandle := mainWindowRenderer _ newSceneBuilder _
			createTextureHandleFor: (colorBuffer upCastFor: Stdn SharedObject) view: (colorBufferTextureView upCastFor: Stdn SharedObject).

		let depthBuffer := renderingDevice _ createTexture: (TextureDescription()
			type: TextureType Texture2D;
			width: newExtent x;
			height: newExtent y;
			depth: 1;
			layers: 1;
			miplevels: 1;
			format: PixelFormat D32_Float;
			usageModes: TextureUsageMode DepthAttachment;
			mainUsageMode: TextureUsageMode DepthAttachment;
			heapType: MemoryHeapType DeviceLocal;
			sampleCount: 1;
			yourself).
		let depthBufferTextureView := depthBuffer _ getOrCreateFullView.

		let colorAttachments mutable := TextureViewPtr array(colorBufferTextureView).
		mainFrameBuffer := renderingDevice _ createFramebuffer: newExtent colorViews: colorAttachments depthStencilView: depthBufferTextureView.
		mainFrameBufferExtent := newExtent.

		true
	}.

	method run => Int32 := {
		let windowSystem mutable := createDefaultWindowSystem().
	    windowSystem ifNil: {
	        return: 0
	    }.

	    ## Create the main window.
	    mainWindow := windowSystem _ createWindow: (WindowCreationInfo()
			resizable: true;
			extent: Int32x2(640, 480);
			title: "Sample Native Rendering 3D" asMutableString;
			animated: true;
			vsyncDisabled: vsyncDisabled;
			yourself).
	    mainWindow ifNil: {
	        return: 0.
	    }.

		renderingDevice := mainWindow _ renderingDevice.

	    ## Create the main window scene 2D renderer.
	    mainWindowRenderer := mainWindow _ createScene2DRenderer.
	    mainWindowRenderer ifNil: {
	        return: 0.
	    }.

		## Create the main framebuffer.
		self setMainFramebufferWithExtent: mainWindow _ extent.

		## Create the main render pass
		{
			let colorAttachments mutable := RenderPassColorAttachmentDescription array (
				RenderPassColorAttachmentDescription()
					format: PixelFormat B8G8R8A8_UNormSRGB;
					beginAction: RenderPassAttachmentAction Clear;
					endAction: RenderPassAttachmentAction Keep;
					clearValue: 0.25f;
					yourself
			).

			let depthStencilAttachment mutable := RenderPassDepthStencilAttachmentDescription()
				format: PixelFormat D32_Float;
				beginAction: RenderPassAttachmentAction Clear;
				endAction: RenderPassAttachmentAction Discard;
				yourself.
			mainRenderPass := renderingDevice _ createRenderPass: colorAttachments depthStencilAttachment: depthStencilAttachment address.
		}.

		## Set the projection and model view matrix.
		projectionMatrix := Float32x4x4 reversePerspectiveFovY: 60.0f aspect: 640.0f / 480.0f near: 0.1f far: 100.0f invertedY: renderingDevice _ shouldInvertProjectionY.

	    ## Use the default font face.
	    let fontFace mutable := FontRegistry default defaultSans _ normalFace.
	    fontFaceWithSize := fontFace _ getOrCreateFaceWithSize: 12.

		## Build the shader signature.
		{
			shaderSignature := renderingDevice _ createShaderSignatureBuilder _
				## Camera state
				beginBindingBank;
				addBankElementWithType: ShaderBindingType UniformBuffer;

				## Object state
				beginBindingBank;
				addBankElementWithType: ShaderBindingType UniformBuffer;
				build
		}.

		## Build the vertex layout.
		{
			let attributes mutable := VertexAttributeDescription array (
				VertexAttributeDescription()
					location: 0;
					format: PixelFormat R32G32B32A32_Float;
					offset: 0;
					yourself,
				VertexAttributeDescription()
					location: 1;
					format: PixelFormat R32G32B32A32_Float;
					offset: 16;
					yourself,
				VertexAttributeDescription()
					location: 2;
					format: PixelFormat R32G32B32_Float;
					offset: 32;
					yourself
			).

			let strides mutable := UInt32 array(SimpleVertex instanceSize).

			simpleVertexLayout := renderingDevice _ createVertexLayout.
			simpleVertexLayout _ addVertexBuffers: strides withAttributes: attributes.
		}.

		## Build the graphics pipeline state.
		{
			let shaderCache ref := renderingDevice _ getDefaultShaderCache.
			renderingPipelineState := renderingDevice _ getDefaultPipelineStateCache _ getOrCreateGraphicsPipeline: (GraphicsPipelineStateDescription()
				shaderSignature: shaderSignature;

				vertexShader: (shaderCache _ getOrCreateShaderStageFromEntryPoint: CheckboardShader vertex shaderEntryPointInfo);
				fragmentShader: (shaderCache _ getOrCreateShaderStageFromEntryPoint: CheckboardShader fragment shaderEntryPointInfo);

				vertexLayout: simpleVertexLayout;
				primitiveTopology: PrimitiveTopology Triangles;

				addColorAttachmentWithFormat: PixelFormat B8G8R8A8_UNormSRGB;
				setAllBlendingEquationsTo: BlendingMode CompositeAlphaOver asBlendingEquation;

				depthStencilFormat: PixelFormat D32_Float;
				depthTestingEnabled: true;
				depthWriteMask: true;
				depthFunction: CompareFunction GreaterOrEqual;

				yourself)
		}.

		## Get the rendering command queue.
		renderingCommandQueue := renderingDevice _ getDefaultCommandQueue.

		## Build the command allocator and list.
		{
			commandListAllocator := renderingDevice _ createCommandAllocatorOfType: CommandListType Direct for: renderingCommandQueue.
			commandList := renderingDevice _ createCommandListOfType: CommandListType Direct for: commandListAllocator.
			commandList _ close.
		}.

		## Create the camera state buffer and binding
		{
			cameraStateBuffer := renderingDevice _ createBuffer: (BufferDescription()
				size: (CameraTransformationState instanceSize alignedTo: 256);
				heapType: MemoryHeapType HostToDevice;
				usageModes: BufferUsageMode Uniform;
				mainUsageMode: BufferUsageMode Uniform;
				mappingFlags: BufferMappingFlags DynamicStorage;
				yourself) initialData: nil.
			cameraStateBinding := shaderSignature _ createShaderResourceBindings: 0.
			cameraStateBinding _ bindOn: 0 uniformBuffer: cameraStateBuffer.
		}.

		## Build the plane
		{
			planeMesh := MeshBuilder()
				vertexLayout: simpleVertexLayout;
				renderingDevice: renderingDevice;
				addVertex: Float32x3(0, 0, 0) normal: Float32x3(0, 1, 0);
				addVertex: Float32x4(-1, 0, -1, 0) normal: Float32x3(0, 1, 0);
				addVertex: Float32x4(1, 0, -1, 0) normal: Float32x3(0, 1, 0);
				addVertex: Float32x4(-1, 0, 1, 0) normal: Float32x3(0, 1, 0);
				addVertex: Float32x4(1, 0, 1, 0) normal: Float32x3(0, 1, 0);

				addTriangle: 0 i2: 2 i3: 1;
				addTriangle: 0 i2: 4 i3: 2;
				addTriangle: 0 i2: 3 i3: 4;
				addTriangle: 0 i2: 1 i3: 3;

				finish.

			let planeTransformationState mutable := ObjectTransformationState()
				modelMatrix: Float32x4x4 identity;
				yourself.

			planeObjectStateBuffer := renderingDevice _ createBuffer: (BufferDescription()
				size: (ObjectTransformationState instanceSize alignedTo: 256);
				heapType: MemoryHeapType HostToDevice;
				usageModes: BufferUsageMode Uniform;
				mainUsageMode: BufferUsageMode Uniform;
				yourself) initialData: planeTransformationState address.
			planeObjectStateBinding := shaderSignature _ createShaderResourceBindings: 1.
			planeObjectStateBinding _ bindOn: 0 uniformBuffer: planeObjectStateBuffer.
		}.

		## Build the cube
		{
			let max := Float32x3 ones.
			let min := max negated.

			cubeMesh := MeshBuilder()
				vertexLayout: simpleVertexLayout;
				renderingDevice: renderingDevice;
				## Left
		        beginSubmesh;
		        addVertex: Float32x3(min x, min y, min z) normal: Float32x3(-1.0f, 0.0f, 0.0f) texcoord: Float32x2(0.0f, 1.0f);
		        addVertex: Float32x3(min x, max y, min z) normal: Float32x3(-1.0f, 0.0f, 0.0f) texcoord: Float32x2(1.0f, 1.0f);
		        addVertex: Float32x3(min x, max y, max z) normal: Float32x3(-1.0f, 0.0f, 0.0f) texcoord: Float32x2(1.0f, 0.0f);
		        addVertex: Float32x3(min x, min y, max z) normal: Float32x3(-1.0f, 0.0f, 0.0f) texcoord: Float32x2(0.0f, 0.0f);
		        addTriangle: 1 i2: 0 i3: 2;
		        addTriangle: 3 i2: 2 i3: 0;

		        ## Right
		        beginSubmesh;
		        addVertex: Float32x3(max x, min y, min z) normal: Float32x3(1.0f, 0.0f, 0.0f) texcoord: Float32x2(1.0f, 1.0f);
		        addVertex: Float32x3(max x, max y, min z) normal: Float32x3(1.0f, 0.0f, 0.0f) texcoord: Float32x2(0.0f, 1.0f);
		        addVertex: Float32x3(max x, max y, max z) normal: Float32x3(1.0f, 0.0f, 0.0f) texcoord: Float32x2(0.0f, 0.0f);
		        addVertex: Float32x3(max x, min y, max z) normal: Float32x3(1.0f, 0.0f, 0.0f) texcoord: Float32x2(1.0f, 0.0f);
		        addTriangle: 0 i2: 1 i3: 2;
		        addTriangle: 2 i2: 3 i3: 0;

		        ## Top
		        beginSubmesh;
		        addVertex: Float32x3(min x, max y, min z) normal: Float32x3(0.0f, 1.0f, 0.0f) texcoord: Float32x2(0.0f, 1.0f);
		        addVertex: Float32x3(max x, max y, min z) normal: Float32x3(0.0f, 1.0f, 0.0f) texcoord: Float32x2(1.0f, 1.0f);
		        addVertex: Float32x3(max x, max y, max z) normal: Float32x3(0.0f, 1.0f, 0.0f) texcoord: Float32x2(1.0f, 0.0f);
		        addVertex: Float32x3(min x, max y, max z) normal: Float32x3(0.0f, 1.0f, 0.0f) texcoord: Float32x2(0.0f, 0.0f);
				addTriangle: 1 i2: 0 i3: 2;
		        addTriangle: 3 i2: 2 i3: 0;

		        ## Bottom
		        beginSubmesh;
		        addVertex: Float32x3(min x, min y, min z) normal: Float32x3(0.0f, -1.0f, 0.0f) texcoord: Float32x2(1.0f, 1.0f);
		        addVertex: Float32x3(max x, min y, min z) normal: Float32x3(0.0f, -1.0f, 0.0f) texcoord: Float32x2(0.0f, 1.0f);
		        addVertex: Float32x3(max x, min y, max z) normal: Float32x3(0.0f, -1.0f, 0.0f) texcoord: Float32x2(0.0f, 0.0f);
		        addVertex: Float32x3(min x, min y, max z) normal: Float32x3(0.0f, -1.0f, 0.0f) texcoord: Float32x2(1.0f, 0.0f);
				addTriangle: 0 i2: 1 i3: 2;
		        addTriangle: 2 i2: 3 i3: 0;

		        ## Back
		        beginSubmesh;
		        addVertex: Float32x3(min x, min y, min z) normal: Float32x3(0.0f, 0.0f, -1.0f) texcoord: Float32x2(0.0f, 1.0f);
		        addVertex: Float32x3(max x, min y, min z) normal: Float32x3(0.0f, 0.0f, -1.0f) texcoord: Float32x2(1.0f, 1.0f);
		        addVertex: Float32x3(max x, max y, min z) normal: Float32x3(0.0f, 0.0f, -1.0f) texcoord: Float32x2(1.0f, 0.0f);
		        addVertex: Float32x3(min x, max y, min z) normal: Float32x3(0.0f, 0.0f, -1.0f) texcoord: Float32x2(0.0f, 0.0f);
				addTriangle: 1 i2: 0 i3: 2;
		        addTriangle: 3 i2: 2 i3: 0;

		        ## Front
		        beginSubmesh;
		        addVertex: Float32x3(min x, min y, max z) normal: Float32x3(0.0f, 0.0f, 1.0f) texcoord: Float32x2(0.0f, 1.0f);
		        addVertex: Float32x3(max x, min y, max z) normal: Float32x3(0.0f, 0.0f, 1.0f) texcoord: Float32x2(1.0f, 1.0f);
		        addVertex: Float32x3(max x, max y, max z) normal: Float32x3(0.0f, 0.0f, 1.0f) texcoord: Float32x2(1.0f, 0.0f);
		        addVertex: Float32x3(min x, max y, max z) normal: Float32x3(0.0f, 0.0f, 1.0f) texcoord: Float32x2(0.0f, 0.0f);
				addTriangle: 0 i2: 1 i3: 2;
		        addTriangle: 2 i2: 3 i3: 0;

				finish.

				let cubeTransformationState mutable := ObjectTransformationState()
					modelMatrix: (Float32x4x4 translation: Float32x3(0, 1, 0));
					yourself.

				cubeObjectStateBuffer := renderingDevice _ createBuffer: (BufferDescription()
					size: (ObjectTransformationState instanceSize alignedTo: 256);
					heapType: MemoryHeapType HostToDevice;
					usageModes: BufferUsageMode Uniform;
					mainUsageMode: BufferUsageMode Uniform;
					yourself) initialData: cubeTransformationState address.
				cubeObjectStateBinding := shaderSignature _ createShaderResourceBindings: 1.
				cubeObjectStateBinding _ bindOn: 0 uniformBuffer: cubeObjectStateBuffer.
		}.

	    ## Create the event handler.
	    {
	        let eventHandler := MainWindowEventHandler sharedNew.
			eventHandler _ sample: self address.
	        mainWindow _ eventHandler: (eventHandler upCastFor: EventHandler)
	    }.

	    ## Run the actual main loop.
	    return: windowSystem _ runMainLoop.
	}
}.

class MainWindowEventHandler superclass: EventHandler; definition: {
	public field sample type: Sample pointer.

    method render ::=> Void := {
		sample _ render.
    }.

    override method onTickEvent: (event: TickEvent ref) ::=> Void := {
		sample _ onTickEvent: event.
    }.

    override method onExposeEvent: (event: ExposeEvent ref) ::=> Void := {
        self render
    }.

    override method onWindowCloseRequestEvent: (event: WindowCloseRequestEvent ref) ::=> Void := {
		sample _ onWindowCloseRequestEvent: event.
    }.

	override method onMouseMoveEvent: (event: MouseMoveEvent ref) ::=> Void := {
		sample _ onMouseMoveEvent: event.
    }.

	override method onMouseWheelEvent: (event: MouseWheelEvent ref) ::=> Void := {
		sample _ onMouseWheelEvent: event.
    }.
}.

Stdn MainEntryPoint: {:args :: Int32 |
	let sample mutable := Sample().
	args do: {:arg :: Void |
		(arg until: Stdn cstrlen(arg)) selectCase: #{
		"-no-vsync" : {
			sample vsyncDisabled: true
		}.
		_ : {}.
		}
	}.

	sample run.
}.
