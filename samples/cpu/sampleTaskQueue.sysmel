class PrintStringTask superclass: Std Task; definition: {
    public field string type: Std String.
    override method run => Void := {
        Std stdout << string.
    }.
}.

function enqueueTasksOn(taskQueue: Std TaskQueueRef const ref) ::=> Void := {
    PrintStringTask new string: "PrintStringTask: 1\n"; enqueueOn: taskQueue.
    PrintStringTask new string: "PrintStringTask: 2\n"; enqueueOn: taskQueue.
    PrintStringTask new string: "PrintStringTask: 3\n"; enqueueOn: taskQueue.
    PrintStringTask new string: "PrintStringTask: 4\n"; enqueueOn: taskQueue.
    PrintStringTask new string: "PrintStringTask: 5\n"; enqueueOn: taskQueue.
    PrintStringTask new string: "PrintStringTask: 6\n"; enqueueOn: taskQueue.
    PrintStringTask new string: "PrintStringTask: 8\n"; enqueueOn: taskQueue.
    PrintStringTask new string: "PrintStringTask: 9\n"; enqueueOn: taskQueue.
    PrintStringTask new string: "PrintStringTask: 10\n"; enqueueOn: taskQueue.

    (Std Task for: {:: Void | Std stdout << "ClosureTask: 1\n"}) enqueueOn: taskQueue.
    (Std Task for: {:: Void | Std stdout << "ClosureTask: 2\n"}) enqueueOn: taskQueue.
    (Std Task for: {:: Void | Std stdout << "ClosureTask: 3\n"}) enqueueOn: taskQueue.
    (Std Task for: {:: Void | Std stdout << "ClosureTask: 4\n"}) enqueueOn: taskQueue.
    (Std Task for: {:: Void | Std stdout << "ClosureTask: 5\n"}) enqueueOn: taskQueue.
    (Std Task for: {:: Void | Std stdout << "ClosureTask: 6\n"}) enqueueOn: taskQueue.
    (Std Task for: {:: Void | Std stdout << "ClosureTask: 7\n"}) enqueueOn: taskQueue.
    (Std Task for: {:: Void | Std stdout << "ClosureTask: 8\n"}) enqueueOn: taskQueue.
    (Std Task for: {:: Void | Std stdout << "ClosureTask: 9\n"}) enqueueOn: taskQueue.
    (Std Task for: {:: Void | Std stdout << "ClosureTask: 10\n"}) enqueueOn: taskQueue.
}.

Std MainEntryPoint: {:args :: Int32 |
    {
        Std stdout << "============================================="; nl.
        Std stdout << "Run on synchronous queue:"; nl.
        Std stdout << "============================================="; nl.
        let synchronousQueue := Std TaskQueue new.
        enqueueTasksOn(synchronousQueue).
        synchronousQueue runAllPendingTasks
    }.

    {
        Std stdout << "============================================="; nl.
        Std stdout << "Run on explicit asynchronous task processor with single thread:"; nl.
        Std stdout << "============================================="; nl.
        let taskProcessor := Std AsynchronousTaskProcessor new
            startWithProcessorCount: 1;
            yourself.
        enqueueTasksOn(taskProcessor taskQueue).
    }.

    {
        Std stdout << "============================================="; nl.
        Std stdout << "Run on explicit asynchronous task processor with two threads:"; nl.
        Std stdout << "============================================="; nl.
        let taskProcessor := Std AsynchronousTaskProcessor new
            startWithProcessorCount: 2;
            yourself.
        enqueueTasksOn(taskProcessor taskQueue).
    }.

    {
        Std stdout << "============================================="; nl.
        Std stdout << "Run on default asynchronous task queue"; nl.
        Std stdout << "============================================="; nl.
        enqueueTasksOn(Std TaskQueue defaultAsync).
    }.

    0
}.
