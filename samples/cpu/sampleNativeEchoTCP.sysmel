Compiler importModuleNamed: #"Sysmel.Networking.Core".

class ClientProcessor definition: {
    field clientSocket type: Stdn IO Socket.
    field clientThread type: Stdn Thread.

    method startProcessingNewClient: (theClientSocket: Stdn IO Socket ref) ::=> Void := {
        clientSocket := theClientSocket asMoveReference.
        clientThread start: { :: Void |
            self echoLoop
        }
    }.

    method echoLoop => Void := {
        Stdn stdout << "Accepted client with endpoint " << clientSocket endpoint; nl.
        let buffer mutable type: (UInt8 array: 2048).

        while: clientSocket isValid do: {
            let readCount := clientSocket read: buffer[0] address size: 2048.
            readCount > 0 ifTrue: {
                clientSocket write: buffer[0] address size: (readCount castTo: UIntPointer)
            } ifFalse: {
                clientSocket close.
            }
        }.

        Stdn stdout << "Client with endpoint has " << clientSocket endpoint << " has closed its connection."; nl.
        self address nativeDelete.
    }.
}.

Stdn MainEntryPoint: {:args :: Int32 |
    let port mutable type: UInt16 := 1234.
    argc > 1 ifTrue: {
        port := LibC atoi(argv[1]) castTo: UInt16
    }.

    let endpoint := Stdn IO Endpoint ipv4SourcePort: port.
    let socket mutable := Stdn IO Socket tcpIPv4.
    socket isValid ifFalse: {
        Stdn stdout << "Failed to create the socket."; nl.
        return: 1.
    }.

    socket setOption: Stdn IO SocketOption ReuseAddress value: 1.

    (socket bind: endpoint) ifFalse: {
        Stdn stdout << "Failed to bind listening port " << port; nl.
        return: 1.
    }.

    ## Start listening on the socket.
    socket listen: 10.

    ## Main loop.
    while: socket isValid do: {
        let clientSocket mutable := socket accept.
        clientSocket isValid ifTrue: {
            let processor := ClientProcessor nativeNew.
            processor _ startProcessingNewClient: clientSocket.
        }
    }.

    socket close.

    return: 0.
}.
