Compiler
    importModuleNamed: #"Norphic.Core";
	importModuleNamed: #"Std.Graphics.Headfull".

useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.
useNamespace: Std Math Geometry.
useNamespace: Norphic.

Std MainEntryPoint: {:args :: Int32 |
    let windowSystem mutable := createDefaultWindowSystem().
    windowSystem ifNil: {
        return: 0
    }.

    ## Create the main window.
    let mainWindow := SystemWindowNorph createFor: windowSystem title: "Test Norphic" asMutableString extent: Int32x2(640, 480).
    mainWindow ifNil: {
        return: 0.
    }.

    let menuBar := MenuBarNorph new.
    let statusBar := StatusBarNorph new.
    let rectangleWithBorder := BorderedNorph new.
    let list := ListViewNorph new.
    let label := LabelNorph new.
    let button := SimpleButtonNorph new.
    let textInput := TextInputNorph new.
    let textArea := TextAreaNorph new.

    ## Menu bar
    {
        menuBar
            addMenu: "File" asMutableString with: {:(MenuNorphRef const ref)menu :: Void |
                menu
                    addItem: "New" asMutableString doing: { :(NorphEvent ref) event :: Void |
                        Std stdout << "TODO: File new"; nl.
                    };
                    addItem: "Open" asMutableString doing: { :(NorphEvent ref) event :: Void |
                        Std stdout << "TODO: File open"; nl.
                    };
                    addSeparator;
                    addItem: "Exit" asMutableString doing: { :(NorphEvent ref) event :: Void |
                        mainWindow destroy
                    }
            };
            addMenu: "Help" asMutableString with: {:(MenuNorphRef const ref)menu :: Void |
                menu addItem: "About" asMutableString doing: { :(NorphEvent ref) event :: Void |
                    Std stdout << "TODO: Help about"; nl.
                }
            }
    }.

    ## Rectangle with border.
    {
        rectangleWithBorder
            color: Float32x4(1.0f, 0.0f, 0.0f, 1.0f);
            borderColor: Float32x4(0.0f, 0.0f, 0.0f, 1.0f).
    }.

    ## Sample label
    {
        label
            text: "Hello World" asMutableString.
    }.

    ## Sample button
    {
        button
            text: "Button" asMutableString.

        button when: NorphActivatedEvent do: { :(NorphEvent ref) event :: Void |
            list addItem: "Extra item" asMutableString.
        }.
    }.

    ## List view
    {
        list
            addItem: "First" asMutableString;
            addItem: "Second" asMutableString;
            addItem: "Third" asMutableString.
    }.

    ## Layout
    mainWindow
        buildLayoutWith: {:(LayoutBuilder ref)b :: Void |
            b verticalBoxWith: {:(SizerLayoutBuilder ref)b :: Void |
                b
                    element: menuBar with: {:(SizerElementRef const ref) c :: Void | c expanded};
                    horizontalPanedWith: {:(PanedNorphLayoutBuilder ref)b :: Void |
                        b
                            verticalPanedWith: {:(PanedNorphLayoutBuilder ref)b :: Void |
                                b
                                    element: rectangleWithBorder;
                                    element: label;
                                    element: button;
                                    element: list
                            };
                            verticalPanedWith: {:(PanedNorphLayoutBuilder ref)b :: Void |
                                b
                                    element: textInput;
                                    element: textArea
                            }
                    } constraints: {:(SizerElementRef const ref)c :: Void | c expanded; proportion: 1.0f};
                    element: statusBar with: {:(SizerElementRef const ref)c :: Void | c expanded}
            }.
        };
        autolayout: true;
        updateLayout.

    ## Run the actual main loop.
    return: windowSystem runMainLoop.
}.
