Compiler importModulesNamed: #(
	#"Std.Graphics.Headfull"
	#"Std.Sound.Headfull"
).

useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.
useNamespace: Std Sound.
useNamespace: Std Math Geometry.
useNamespace: Std Math LinearAlgebra.

let Gravity := Float32x2(0.0, -9.8).

compileTime constant Node2D := Std Graphics Scene2D Node.
compileTime constant Node2DPtr := Std Graphics Scene2D NodePtr.

global mainWindow mutable type: WindowRef.
let mainWindowRenderer mutable type: WindowScene2DRendererPtr.
let fontFaceWithSize mutable type: FontFaceWithSize rcPointer.
let lastFrameRenderingTime mutable type: Float32.
let lastFrameUpdateTime mutable type: Float32.
let lastFrameTime mutable type: Float32.
let accumulatedUpdateTime mutable type: Float32.
let updateStepTime type: Float32 := 1.0f / 60.0f.

global playbackDevice mutable type: Std Sound PlaybackDeviceRef.

global jumpSound mutable type: SoundSourceRef.
global dashSound mutable type: SoundSourceRef.
global shootSound mutable type: SoundSourceRef.

class Entity.
compileTime constant EntityRef := Entity rcRef.
compileTime constant EntityWeakRef := Entity weakRCRef.

class Entity superclass: Std RCObject; definition: {
	public field position type: Float32x2.
	public field halfExtent type: Float32x2.
	public field color type: Float32x4.

	virtual method shouldBeRemoved => Boolean8
		:= self isDead.

	virtual method isDead => Boolean8
		:= false.

	method boundingBox => RectangleF32
		:= RectangleF32 center: position halfExtent: halfExtent.

	method boundingBoxExpandedWith: (extraHalfExtent: Float32x2) ::=> RectangleF32
		:= RectangleF32 center: position halfExtent: halfExtent + extraHalfExtent.

	virtual method currentColor => Float32x4
		:= color.

	virtual method hasCollisionResponse => Boolean8
		:= true.

	virtual method canBeShot => Boolean8
		:= true.

	virtual method shotAt: (bulletHitPoint: Float32x2) withDamage: (damage: Float32) ::=> Void := {
		## By default do nothing when shot.
	}.

	virtual method buildSceneNodeWith: (builder: Std Graphics Scene2D Builder ref) ::=> Node2DPtr := {
		(builder fillRectangle: self boundingBox color: self currentColor) upCastFor: Node2D
	}.

	virtual method update: (delta: Float32) ::=> Void := {
	}.
}.

class Wall superclass: Entity; definition: {

}.

class Character superclass: Entity; definition: {
	public field velocity type: Float32x2.
	public field lookDirection type: Float32x2.
	public field hitPoints type: Float32.
	field hitFlashRemainingTime type: Float32.

	field isOnFloor type: Boolean8.

	override method currentColor => Float32x4
		:= hitFlashRemainingTime > 0.0f ifTrue: {Float32x4(1.0f, 1.0f, 1.0f, 1.0f)} ifFalse: {color}.

	method initialize => Void := {
		lookDirection := Float32x2(1.0f, 0.0f).
		hitPoints := 100.0.
	}.

	override method isDead => Boolean8
		:= hitPoints <= 0.0f.

	override method hasCollisionResponse => Boolean8
		:= false.

	override method shotAt: (bulletHitPoint: Float32x2) withDamage: (damage: Float32) ::=> Void := {
		## Invincibility period.
		hitFlashRemainingTime > 0.0f ifTrue: { return: 0.0f }.

		hitPoints := hitPoints - damage.
		hitFlashRemainingTime := 0.05f.
	}.

	method sweepCollidingFrom: (oldPosition: Float32x2) into: (targetPosition: Float32x2) maxDepth: (maxDepth: UInt32)::=> Void := {
		maxDepth = 0 ifTrue: { return: nil. }.

		let ray := Ray2dF32 from: oldPosition to: targetPosition.

		## Perform Minkowski difference based collision detection with the boxes.
		let bestCollisionAlpha mutable := ray tmax.
		let bestCollisionEntity mutable type: Entity rcRef.
		let bestCollisionExpandedBound mutable type: RectangleF32.

		entities do: {:entity :: Void |
			entity ~~ self &&
			entity isDead not &&
			entity hasCollisionResponse ifTrue: {
				let entityExpandedBoundingBox mutable := entity boundingBoxExpandedWith: halfExtent.
				let intersectionResult mutable := entityExpandedBoundingBox intersectionWithRay: ray.
				intersectionResult isPresent ifTrue: {
					let intersectionAlpha := intersectionResult _.
					intersectionAlpha < bestCollisionAlpha ifTrue: {
						bestCollisionExpandedBound := entityExpandedBoundingBox.
						bestCollisionAlpha := intersectionAlpha.
						bestCollisionEntity := entity
					}.
				}.
			}.
		}.

		bestCollisionAlpha < ray tmax ifTrue: {
			let collisionPoint := ray pointAtDistance: bestCollisionAlpha.
			let remainingDelta := (ray tmax - bestCollisionAlpha)*ray direction.

			let normalAndDistance := bestCollisionExpandedBound computePenetrationNormalAndDistanceForPoint: collisionPoint.
			let collisionNormal := normalAndDistance first.
			let penetrationDistance := normalAndDistance second.
			let tangentMask := Float32x2 ones - collisionNormal abs.

			let slidingDelta := remainingDelta*tangentMask.

			isOnFloor := isOnFloor || collisionNormal y > 0.0.
			velocity := velocity*tangentMask.
			position := collisionPoint + collisionNormal*(penetrationDistance*0.1f + 0.00001f).

			self sweepCollidingFrom: position into: position + slidingDelta maxDepth: maxDepth - 1.
		} ifFalse: {
			position := targetPosition
		}.

	}.

	override method update: (delta: Float32) ::=> Void := {
		hitFlashRemainingTime > 0.0f ifTrue: {
			hitFlashRemainingTime := hitFlashRemainingTime - delta.
		}.

		velocity := velocity + Gravity * delta.
		let newPosition := position + velocity * delta.

		isOnFloor := false.
		self sweepCollidingFrom: position into: newPosition maxDepth: 5.
	}.
}.

class Bullet superclass: Entity; definition: {
	public field velocity type: Float32x2.
	public field shooter type: Entity weakRCRef.
	public field maxFlyingTime type: Float32.
	public field damage type: Float32.

	field flyingTime type: Float32.
	field hasHitTarget type: Boolean8.

	override method isDead => Boolean8
		:= hasHitTarget || flyingTime > maxFlyingTime.

	override method hasCollisionResponse => Boolean8
		:= false.

	override method update: (delta: Float32) ::=> Void := {
		let targetPosition := position + velocity * delta.
		let oldPosition := position.
		flyingTime := flyingTime + delta.

		## Perform Minkowski difference based collision detection with the boxes.
		let ray := Ray2dF32 from: oldPosition to: targetPosition.
		let bestCollisionAlpha mutable := ray tmax.
		let bestCollisionEntity mutable type: Entity rcRef.

		entities do: {:entity :: Void |
			entity ~~ shooter &&
			entity ~~ self &&
			entity isDead not &&
			entity canBeShot ifTrue: {
				let entityExpandedBoundingBox mutable := entity boundingBoxExpandedWith: halfExtent.
				let intersectionResult mutable := entityExpandedBoundingBox intersectionWithRay: ray.
				intersectionResult isPresent ifTrue: {
					let intersectionAlpha := intersectionResult _.
					intersectionAlpha < bestCollisionAlpha ifTrue: {
						bestCollisionAlpha := intersectionAlpha.
						bestCollisionEntity := entity
					}.
				}.
			}.
		}.

		bestCollisionEntity ifNotNil: {
			hasHitTarget := true.
			bestCollisionEntity shotAt: (ray pointAtDistance: bestCollisionAlpha) withDamage: damage.
			return: nil
		}.

		position := targetPosition.
	}.
}.

class Enemy superclass: Character; definition: {
	method initialize => Void := {
		halfExtent := Float32x2(0.5, 1.0).
		color := Float32x4(0.5, 0.1, 0.1, 1.0).
	}.
}.

class Player superclass: Character; definition: {
	public field speed type: Float32.
	public field direction type: Float32x2.
	public field remainingDashTime type: Float32.
	public field dashDirection type: Float32x2.

	## Never remove the player.
	method shouldBeRemoved => Boolean8
		:= false.

	method initialize => Void := {
		halfExtent := Float32x2(0.5, 1.0).
		color := Float32x4(0.5, 0.5, 0.2, 1.0).
		speed := 3.0f.
	}.

	method dash => Void := {
		isOnFloor ifTrue: {
			remainingDashTime := 0.35f.
			dashDirection := Float32x2(lookDirection x, 0.0f).
			speed := 10.0f.
			dashSound play
		}.
	}.

	method moveLeftInput: (state: Boolean8) ::=> Void := {
		state ifTrue: {
			direction x: -1.0.
			lookDirection x: -1.0.
		} ifFalse: {
			direction x < 0.0 ifTrue: {
				direction x: 0.0.
			}.
		}.
	}.

	method moveRightInput: (state: Boolean8) ::=> Void := {
		state ifTrue: {
			direction x: 1.0.
			lookDirection x: 1.0.
		} ifFalse: {
			direction x > 0.0 ifTrue: {
				direction x: 0.0.
			}.
		}.
	}.

	method jump => Void := {
		isOnFloor ifTrue: {
			velocity y: 10.0.
			remainingDashTime := 0.0f.
			jumpSound play
		}.
	}.

	method shoot => Void := {
		shootSound play.

		entities add: (Bullet new
			color: Float32x4(0.8, 0.8, 0.8, 1.0);
			halfExtent: 0.2;
			shooter: self;
			position: position;
			velocity: Float32x2(velocity x, 0.0f) + 10.0f*lookDirection;
			damage: 20.0f;
			maxFlyingTime: 0.5f;
			upCastFor: Entity)
	}.

	override method update: (delta: Float32) ::=> Void := {
		remainingDashTime > 0.0f ifTrue: {
			remainingDashTime := remainingDashTime - delta.
			velocity x: dashDirection x * speed.
		} ifFalse: {
			velocity x: direction x * speed.
		}.

		super update: delta.

		isOnFloor ifTrue: {
			remainingDashTime <= 0.0f ifTrue: {
				speed := 3.0f
			}.
		}.
	}.
}.

global entities mutable type: (Std Collections Vector(Entity rcRef)).

global player mutable type: Player rcRef.
global viewMatrix mutable type: Float32x2x3.

class MainWindowEventHandler superclass: EventHandler; definition: {
	method buildEntitiesScene2D: (builder: Std Graphics Scene2D Builder ref) ::=> Node2DPtr := {
		let screenExtent := mainWindow extent castTo: Float32x2.
		let viewTranform := AffinePostTransform2dF32()
			setIdentity;

			## Convert into NDC space.
			scaleBy: screenExtent y * Float32x2(0.5f, -0.5f);
			translateBy: Float32x2(1.0f, -1.0f);

			## Scale the view.
			scaleBy: 0.2f;

			## Set the camera position.
			translateBy: player position negated + Float32x2(-2.0f, -2.0f);
			yourself.

		let container := builder container.
		## Draw the entities.
		entities do: {:entity :: Void |
			container _ add: (entity buildSceneNodeWith: builder).
		}.

		(builder transform: viewTranform node: (container upCastFor: Node2D)) upCastFor: Node2D
	}.

	method buildHealthIndicatorWith: (builder: Std Graphics Scene2D Builder ref) ::=> Node2DPtr := {
		## Red border
		let fullHealthRect := RectangleF32 min: Float32x2(20, 20) extent: Float32x2(250, 15).

		let healthPercentage := player hitPoints / 100.0f clampMin: 0.0f max: 1.0.
		let currentHealthRect := RectangleF32 min: fullHealthRect min extent: fullHealthRect extent * Float32x2(healthPercentage, 1.0f).

		(builder fillRectangle: fullHealthRect color: Float32x4(1.0f, 0.6f, 0.0f, 1.0f)) _ --
		((builder fillRectangle: currentHealthRect color: Float32x4(1.0f, 0.6f, 0.0f, 1.0f)) upCastFor: Node2D)
	}.

	method buildProfilingData: (builder: Std Graphics Scene2D Builder ref) ::=> Node2DPtr := {
		let updateTime := lastFrameUpdateTime * 1000.0f.
		let frameRenderingCommandListTime := lastFrameRenderingTime * 1000.0f.
		let frameTimeString := Std String textStreamContents: {:out :: Void |
			out << "Frame time " << (lastFrameTime * 1000.0f) << "ms"; nl.
			out << "FPS " << (1.0f / lastFrameTime); nl.
			out << "Update time " << updateTime << "ms"; nl.
			out << "CPU Rendering time " << frameRenderingCommandListTime << " ms"
		}.

		(builder text: frameTimeString asArraySlice at: Float32x2(15.0f, 30.0f) font: fontFaceWithSize color: Float32x4 green) upCastFor: Node2D.
	}.

	method buildHudScene2D: (builder: Std Graphics Scene2D Builder ref) ::=> Node2DPtr := {
		let screenExtent := mainWindow extent castTo: Float32x2.
		let windowScaleTransform := AffinePostTransform2dF32()
			setIdentity;

			## Convert into NDC space.
			scaleBy: screenExtent y / 480.0f;
			yourself.

		let result := builder container.
		result _
			add: (self buildHealthIndicatorWith: builder);
			add: (self buildProfilingData: builder).
		(builder transform: windowScaleTransform node: (result upCastFor: Node2D)) upCastFor: Node2D
	}.

	method buildRenderScene2D: (builder: Std Graphics Scene2D Builder ref) ::=> Node2DPtr := {
		let entities := self buildEntitiesScene2D: builder.
		let hud := self buildHudScene2D: builder.
		entities _ -- (hud upCastFor: Node2D)
	}.

	method render => Void := {
		lastFrameRenderingTime := (Std Chrono profileTimeToRun: {
		mainWindowRenderer _
			clearColor: Float32x4(0.1f, 0.4f, 0.4f, 1.0f);
			renderScene: (self buildRenderScene2D: mainWindowRenderer _ newSceneBuilder _);
			present
		}) castTo: Float32.
	}.

	override method onExposeEvent: (event: ExposeEvent ref) ::=> Void := {
		self render
	}.

	override method onTickEvent: (event: TickEvent ref) ::=> Void := {

		lastFrameUpdateTime := (Std Chrono profileTimeToRun: {
			lastFrameTime := event deltaSeconds castTo: Float32.
			accumulatedUpdateTime := accumulatedUpdateTime + (lastFrameTime min: 5.0f).
			while: accumulatedUpdateTime >= updateStepTime do: {
				update(updateStepTime).
				accumulatedUpdateTime := accumulatedUpdateTime - updateStepTime
			}.
		}) castTo: Float32.

        self render
    }.

	override method onWindowCloseRequestEvent: (event: WindowCloseRequestEvent ref) ::=> Void := {
		mainWindow close
	}.

	override method onKeyPressedEvent: (event: KeyPressedEvent ref) ::=> Void := {
		event isRepeat ifTrue: {return: void}.

		event symbol selectCase: #{
		KeySymbol Escape : {mainWindow close}.
		KeySymbol A : {player moveLeftInput: true}.
		KeySymbol D : {player moveRightInput: true}.
		KeySymbol W : {player jump}.
		KeySymbol Space : {player shoot}.
		KeySymbol LShift : {player dash}.
		_ : {}.
		}
	}.

	override method onKeyReleasedEvent: (event: KeyReleasedEvent ref) ::=> Void := {
		event isRepeat ifTrue: {return: void}.

		event symbol selectCase: #{
		KeySymbol A : {player moveLeftInput: false}.
		KeySymbol D : {player moveRightInput: false}.
		_ : {}.
		}
	}.

	override method onGameControllerButtonPressedEvent: (event: GameControllerButtonPressedEvent ref) ::=> Void := {
		event button selectCase: #{
		GameControllerButton DPadLeft : {player moveLeftInput: true}.
		GameControllerButton DPadRight : {player moveRightInput: true}.
		GameControllerButton ButtonLeft : {player shoot}.
		GameControllerButton ButtonDown : {player jump}.
		GameControllerButton RightShoulder : {player dash}.
		_ : {}.
		}.
	}.

	override method onGameControllerButtonReleasedEvent: (event: GameControllerButtonReleasedEvent ref) ::=> Void := {
		event button selectCase: #{
		GameControllerButton DPadLeft : {player moveLeftInput: false}.
		GameControllerButton DPadRight : {player moveRightInput: false}.
		_ : {}.
		}.
	}.
}.

function update(delta: Float32) => Void := {
	entities do: {:entity :: Void |
		entity update: delta.
	}.

	## Remove the dead entities
	let destIndex mutable type: UIntPointer := 0.
	0 until: entities size do: {:i :: Void |
		let entity := entities[i].
		entity shouldBeRemoved ifFalse: {
			entities[destIndex] := entity.
			destIndex := destIndex + 1
		}.
	}.

	entities resizeTo: destIndex.
}.

method createWallMin: (min: Float32x2) max: (max: Float32x2) color: (color: Float32x4) ::=> Void := {
	entities add: (Wall new
		position: (max + min) *0.5f;
		halfExtent: (max - min) *0.5f;
		color: color;
		upCastFor: Entity).
}.

Std MainEntryPoint: {:args :: Int32 |
	let vsyncDisabled mutable := false.
	args do: {:arg :: Void |
		arg selectCase: #{
		"-no-vsync" : {
			vsyncDisabled := true
		}.
		_ : {}.
		}
	}.

	## Create the window system.
	let windowSystem := createDefaultWindowSystem().
	windowSystem ifNil: {
		return: 0.
	}.

	## Create the main window.
    mainWindow := windowSystem createWindow: (WindowCreationInfo()
	 	title: "Sample Native Game" asMutableString;
		extent: Int32x2(640, 480);
		resizable: true;
		animated: true;
		vsyncDisabled: vsyncDisabled;
		yourself).
    mainWindow ifNil: {
        return: 0.
    }.

	## Create the main window renderer.
	mainWindowRenderer := mainWindow createScene2DRenderer.
	mainWindowRenderer ifNil: {
		return: 0.
	}.

	## Use the default font face.
    let fontFace mutable := FontRegistry default defaultSans _ normalFace.
    fontFaceWithSize := fontFace _ getOrCreateFaceWithSize: 12.

	## Create the event handler.
	mainWindow eventHandler: (MainWindowEventHandler new upCastFor: EventHandler).

	playbackDevice := SoundDriverRegistry validDefaultPlaybackDevice.

	## Create the floor
	{
		createWallMin: Float32x2(-5.0f, -5.0f) max: Float32x2(20.0f, -4.0f) color: Float32x4(0.2f, 0.2f, 0.2f, 1.0f).

		createWallMin: Float32x2(3.0f, -1.0f) max: Float32x2(8.0f, 0.0f) color: Float32x4(0.2f, 0.2f, 0.2f, 1.0f).
	}.

	{
		player := Player new.
		entities add: (player upCastFor: Entity).
	}.

	{
		let enemy := Enemy new.
		enemy position: Float32x2(4.0, 2.0).
		entities add: (enemy upCastFor: Entity).
	}.

	{
		let enemy := Enemy new.
		enemy position: Float32x2(15.0, 0.0).
		entities add: (enemy upCastFor: Entity).
	}.

	## Shoot sound.
	{
		let pulseChannel := PulseToneGenerator new
			frequency: 150.0;
			amplitude: 0.1;
			pulseWidth: 0.15;

			attackTime: 0.025;
			decayTime: 0.025;
			sustainLevel: 0.4;
			sustainTime: 0.1;
			releaseTime: 0.3;
			yourself.

		shootSound := playbackDevice newSoundSourceForStaticGenerator: (pulseChannel upCastFor: SoundGenerator)
	}.

	## Jump sound.
	{
		let noiseChannel := NoiseSoundGenerator new
			amplitude: 0.1;

			attackTime: 0.015f;
			decayTime: 0.015f;
			sustainLevel: 0.2f;
			sustainTime: 0.05f;
			releaseTime: 0.1f;
			yourself.
		jumpSound := playbackDevice newSoundSourceForStaticGenerator: (noiseChannel upCastFor: SoundGenerator)
	}.

	## Dash sound.
	{
		let noiseChannel := NoiseSoundGenerator new
			amplitude: 0.1;

			attackTime: 0.025f;
			decayTime: 0.02f;
			sustainLevel: 0.2f;
			sustainTime: 0.1f;
			releaseTime: 0.2f;
			yourself.
		dashSound := playbackDevice newSoundSourceForStaticGenerator: (noiseChannel upCastFor: SoundGenerator)
	}.

	playbackDevice resume.

	## Enter into the main loop.
	windowSystem runMainLoop.

	playbackDevice destroy.

    return: 0.
}.
