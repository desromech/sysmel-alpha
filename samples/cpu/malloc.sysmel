let randomState mutable type: UInt64 := 1.

function nextRandom() => UInt64 := {
    randomState := randomState*6364136223846793005 + 1.
}.

compileTimeConstant AllocationCount := 1000.
let allocationResults mutable type: (Void pointer array: AllocationCount).

function freeAll() => Void := {
    for: (let i mutable := 0) while: (i < AllocationCount) do: {
        Std free(allocationResults[i])
    } continueWith: (i := i + 1).
    Std stdout << "================================================================"; nl
}.


#**
 * malloc benchmarking and testing.
 *#
Std MainEntryPoint: {:args :: Int32 |
    ## First zmalloc - with some fixed size
    for: (let i mutable := 0) while: (i < AllocationCount) do: {
        allocationResults[i] := Std zmalloc(16)
    } continueWith: (i := i + 1).

    freeAll().

    ## Second zmalloc - with quantum fixed sizes.
    for: (let i mutable := 0) while: (i < AllocationCount) do: {
        let size := ((i%31) + 1)*16 castTo: UIntPointer.
        allocationResults[i] := Std zmalloc(size)
    } continueWith: (i := i + 1).

    freeAll().

    ## Second zmalloc - random with quantum fixed sizes.
    for: (let i mutable := 0) while: (i < AllocationCount) do: {
        let size := ((nextRandom() % 31) + 1)*16 castTo: UIntPointer.
        allocationResults[i] := Std zmalloc(size)
    } continueWith: (i := i + 1).

    freeAll().

    ## Second, zmalloc - with random sizes
    #*for: (let i mutable := 0) while: (i < AllocationCount) do: {
        allocationResults[i] := Std zmalloc(nextRandom() % (2<<20))
    } continueWith: (i := i + 1).
    freeAll().*#

    Std stdout << "UInt32 basicNativeNew value " << UInt32 basicNativeNew value; nl.
    UInt32 basicNativeNew basicNativeDelete.

    0
}.
