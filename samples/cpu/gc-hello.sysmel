## Main function

global testGlobal mutable := 42.

function printValue(value: Int32) => Void := {
    Std stdout << "printValue Int32: " << value; nl.
}.

function printValue(value: Float32) => Void := {
    Std stdout << "printValue Float32: " << value; nl.
}.

function testNativeErrorThrow() => Void := {
    Std error: "Test error"
}.

function testNativeError() => Void := {
    try: {
        testNativeErrorThrow().
    } catch: Std Error doing: {:exception :: Void |
        Std stdout << "Caught error exception: " << exception; nl.
    }.
}.

function testSmalltalkErrorThrow() => Void := {
    Smalltalk Object error: "Test smalltalk error".
}.

function testGCError() => Void := {
    try: {
        testSmalltalkErrorThrow().
    } catch: Smalltalk Error doing: {:exception :: Void |
        Std stdout << "Caught Smalltalk exception: " << exception; nl.
    }.
}.

function testNonLocalReturn() => Void := {
    let array type: Smalltalk ProtoObject := #(1 2 3 4 5).
    Std stdout << "Should print until 3"; nl.
    array do: {:(Smalltalk ProtoObject)v :: Void |
        Std stdout << v; nl.
        v == 3 ifTrue: {
            Std stdout << "Found 3, do non-local return."; nl.
            return: nil
        }.
    }.
}.

function testWriteFile() => Void := {
    let outFile mutable type: Std IO FileStream.
    (outFile open: "test.txt" mode: Std IO FileOpenMode CreateNew) ifTrue: {
        let out mutable := Std IO TextStreamWriter for: outFile address.
        out << "Hello World"; nl.
        out << "File written from sysmel"; nl.
        outFile close
    }.
}.

function testMessageNotUnderstood() => Void := {
    try: {
        Smalltalk Object someMessageThatIsNotImplemented: #hello with: #world and: 42
    } catch: Smalltalk MessageNotUnderstood doing: {:exception :: Void |
        Std stdout << "Caught message not understood exception: " << exception; nl.
    }.
}.

function testMessageNotUnderstood2(exceptionType: Smalltalk ProtoObject) => Void := {
    try: {
        Smalltalk Object someMessageThatIsNotImplemented: #hello with: #world and: 42
    } catch: exceptionType doing: {:exception :: Void |
        Std stdout << exceptionType << " Caught message not understood exception: " << exception; nl.
    }.
}.

Std MainEntryPoint: {:args :: Int32 |
    Std stdout << "testGlobal " << testGlobal; nl.
	Std stdout << "TestChar " << 'c'; nl.

    ##let s type: SomeStruct.

    1 to: 3 do: {:i :: Void |
        Std stdout << "Loop iteration " << i; nl
    }.

    let v3f := Float32x3 x: 1.0 y: 2.0 z: 3.0.
    Std stdout << "v3f " << v3f; nl.

    let vp := v3f + (Float32x3 x: 4.0 y: 5.0 z: 6.0).
    Std stdout << "vp " << v3f; nl.

    let vps := v3f + 3.0.
    Std stdout << "vps " << v3f; nl.

    let v3d := Float64x3 x: v3f x y: v3f y z: v3f z.
    Std stdout << "v3d " << v3f; nl.

    ##let matrix := Float32x3x3 identity + Float32x3x3 identity.
    ##let matrix := Float32x3x3 ones * Float32x3x3 ones.
    let matrix := Float32x3x3 rowMajorIndices.
    ##let matrix mutable := Float32x3x3 identity + Float32x3x3 identity.
    Std stdout nextPutAll: "zm "; nl;
	tab; print: matrix firstRow; nl;
	tab; print: matrix secondRow; nl;
	tab; print: matrix thirdRow; nl.

    let mv3f := matrix * v3f.
    Std stdout << "mv3f " << mv3f; nl.

    let v3fm := v3f * matrix.
    Std stdout << "v3fm " << v3fm; nl.
    Std stdout << "v3f dot: v3f" << (v3f dot: v3f); nl.

    let v3fc := v3f cross: v3f.
    Std stdout << "v3fc cross: v3f " << v3fc; nl.

    printValue(1).
    printValue(1.0).

    1 until: args size do: {:i :: Void |
        i = 1 ifTrue: {
            Std stdout << "First "
        } ifFalse: {
            Std stdout << "Not first "

        }.

        Std stdout << "args[" << i << "] " << (args[i] reinterpretCastTo: Void pointer) << ": " << args[i]; nl
    }.

    Std stdout << "Hello World: " << args first; nl.

    Std stdout << "Object: " << (Smalltalk Object reinterpretCastTo: Void pointer); nl.
    Std stdout << "Object class: " << (Smalltalk Object class reinterpretCastTo: Void pointer); nl.

    useNamespace: Smalltalk.

    let o := Object.
    Std stdout << "o: " << (o reinterpretCastTo: Void pointer) << " " << o; nl.
    Std stdout << "o class: " << (o class reinterpretCastTo: Void pointer) << " " << o class; nl.
    Std stdout << "Object basicNew: " << Object basicNew; nl.

	let n mutable type: ProtoObject := 42.
	let sumResult := n + 7.
    Std stdout << "(ProtoObject)42 + (ProtoObject)7 = " << sumResult; nl.

    let boolValue := true.
    let boolCast type: ProtoObject := boolValue.
    Std stdout << "Bool cast " << (boolCast reinterpretCastTo: Void pointer) << " " << boolCast; nl.

	let testArray type: ProtoObject := #("Hello world" 1 #symbol 2 3 4 5).
	testArray do: {:(ProtoObject)el :: Void |
	    Std stdout << "Array element " << el; nl.
	}.

    Std stdout << "Printing ProtoObject with all subclasses"; nl.
    ProtoObject withAllSubclassesDo: {:(ProtoObject)cls :: Void |
	    Std stdout << cls; nl.
	}.

    {
        let string type: ProtoObject := "class".
        let symbol := string asSymbol.

        Std stdout << "String '"  << string << "' asSymbol #'" << symbol << "' unique: " << (symbol == #class) << " sameResult: " << (symbol == string asSymbol); nl.
    }.

    testNativeError().
    testNonLocalReturn().
    testGCError().
    testWriteFile().
    testMessageNotUnderstood().
    testMessageNotUnderstood2(MessageNotUnderstood).
    testMessageNotUnderstood2(Error).

    Std stdout << (__global Smalltalk Object name -- " with concat"); nl.
    Std stdout << (__global Smalltalk Object name -- " with concat") asStdnMutableString; nl.

    Std stdout << "Printing Smalltalk global values"; nl.
    Smalltalk globals associations do: {:each :: Void |
        Std stdout << each; nl.
    }.


    return: 0.
}.
