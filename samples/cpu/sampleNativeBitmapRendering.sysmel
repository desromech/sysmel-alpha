Compiler
	importModuleNamed: #"Sysmel.Graphics.Core.Raster".

useNamespace: Stdn Graphics Core.

Stdn MainEntryPoint: {:args :: Int32 |
    ## Palette tga
    {
        let form := Form extent: UInt32x2(4, 4) pixelFormat: PixelFormat B8G8R8A8_UNorm.
        form _ makeBlitter setPixelsWith: {:(UInt32x2)pixelCoord :: UInt8x4 |
            let index := pixelCoord y*4 + pixelCoord x.
            let color mutable := UInt8x4 zeros.

            index selectCase: #{
            0: color := UInt8x4(255, 0, 0, 255).
            1: color := UInt8x4(0, 255, 0, 255).
            2: color := UInt8x4(0, 0, 255, 255).
            3: color := UInt8x4(255, 255, 0, 255).
            4: color := UInt8x4(255, 0, 255, 255).
            5: color := UInt8x4(0, 255, 255, 255).
            6: color := UInt8x4(0, 0, 0, 255).
            7: color := UInt8x4(255, 255, 255, 255).
			_ : {}.
            }.

            color
        }.

        form _ writeTGAfileNamed: "pixelUnormRenderPalette.tga" asMutableString.
    }.

    ## Palette tga
    {
        let form := Form extent: UInt32x2(4, 4) pixelFormat: PixelFormat B8G8R8A8_UNorm.
        form _ makeBlitter setPixelsWith: {:(UInt32x2)pixelCoord :: Float32x4 |
            let index := pixelCoord y*4 + pixelCoord x.
            let color mutable := Float32x4 zeros.

            index selectCase: #{
            0: color := Float32x4(1.0f, 0.0f, 0.0f, 1.0f).
            1: color := Float32x4(0.0f, 1.0f, 0.0f, 1.0f).
            2: color := Float32x4(0.0f, 0.0f, 1.0f, 1.0f).
            3: color := Float32x4(1.0f, 1.0f, 0.0f, 1.0f).
            4: color := Float32x4(1.0f, 0.0f, 1.0f, 1.0f).
            5: color := Float32x4(0.0f, 1.0f, 1.0f, 1.0f).
            6: color := Float32x4(0.0f, 0.0f, 0.0f, 1.0f).
            7: color := Float32x4(1.0f, 1.0f, 1.0f, 1.0f).
			_ : {}.
            }.

            color
        }.
        form _ writeTGAfileNamed: "pixelFloatRenderPalette.tga" asMutableString.
    }.

    ## Sine waves
    #* let sineWavesTexture :=
    {
        let sineWaves := Form extent: UInt32x2(64, 64) pixelFormat: PixelFormat B8G8R8A8_UNorm.
        sineWaves _ makeBlitter setPixelsWith: {:(Float32x2)pixelCoord :: Float32x4 |
            let p := (pixelCoord*2.0f - 1.0f) *20.0f.
            Float32x4(0.0f, 0.0f, 0.0f, 1.0f) interpolateTo: Float32x4 ones at: p length sin*0.5f + 0.5f.
        }.
        sineWaves _ writeTGAfileNamed: "sineWaveRender.tga" asMutableString.

        FormTextureView for: sineWaves
    }.

    ## Use the default font face.
    let fontFace mutable := FontRegistry default defaultSans _ normalFace.
    let fontFaceWithSize := fontFace _ getOrCreateFaceWithSize: 24.

    ## Canvas rendering.
    {
        let destForm := Form extent: UInt32x2(256, 256) pixelFormat: PixelFormat B8G8R8A8_UNorm.
        let destSurface := FormSurface for: destForm.

        {
            let canvas := destSurface _ beginDrawingWithCanvas.

            canvas _
                color: Float32x4(0.4f, 0.4f, 0.4f, 1.0f);
                clear;
                white;
                copyTexture: sineWavesTexture at: Float32x2(-50.0f, 50.0f);

                fontFaceWithSize: fontFaceWithSize;
                color: Float32x4(0.0f, 1.0f, 1.0f, 1.0f);
                drawUTF8String: "Hello World" at: Float32x2(80.0f, 128.0f).

            void.
        }.

        destForm _ writeTGAfileNamed: "blitCopyRender.tga" asMutableString.
    }. *#

    return: 0.
}.
