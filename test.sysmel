/*sasa */

// sasasa

/*namespace object is the receiver, #Example: is the macro selector */
namespace Example: {
    struct Something: {
        field float: Float32.
        field int: Int32.

        (field pf: Float32)
            private.
    }.

    let anonStruct := struct: {
    }.

    let s := Something value
        float: 1.0;
        int: 1;
        yourself.
}.

namespace Sysmel Runtime: {
}.

namespace: (Compiler current fileName asSymbol) with: {
}.

// Single expression valued function
function squaref(x: Float32) -> Float32 => (x*x).

// Function template
template square(Scalar: typename) => (function (x: Scalar) -> Scalar => (x*x)).

// Main function
function main (argc: Int32, argv: Char const pointer) -> Int32 := {
    [[SomePragma]]
    [[selector: #main:argv:]]

    x deref * y.
    return: 0
}.


if: a then: {
}
else: {
}.

while: true do: {
}.

do: {
} while: true.

do: {
} until: false.


oneConditionOf: {
    when: x < 1 do: {
    }.
    when: x > 1 do: {
    }.
    otherwise: {
    }.
}.

